# SOME DESCRIPTIVE TITLE.
# Copyright (C) 1995-2011 Fredrik Lundh, 2010-2020 Alex Clark and
# Contributors
# This file is distributed under the same license as the Pillow (PIL Fork)
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Pillow (PIL Fork) 7.0.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-01-07 15:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../reference/ExifTags.rst:5
msgid ":py:mod:`ExifTags` Module"
msgstr ":py:mod:`ExifTags` Module"

#: ../../reference/ExifTags.rst:7
msgid ""
"The :py:mod:`ExifTags` module exposes two dictionaries which provide "
"constants and clear-text names for various well-known EXIF tags."
msgstr "The :py:mod:`ExifTags` module exposes two dictionaries which provide constants and clear-text names for various well-known EXIF tags."

#: ../../reference/ExifTags.rst:12
msgid ""
"The TAG dictionary maps 16-bit integer EXIF tag enumerations to "
"descriptive string names.  For instance:"
msgstr "The TAG dictionary maps 16-bit integer EXIF tag enumerations to descriptive string names.  For instance:"

#: ../../reference/ExifTags.rst:21
msgid ""
"The GPSTAGS dictionary maps 8-bit integer EXIF gps enumerations to "
"descriptive string names.  For instance:"
msgstr "The GPSTAGS dictionary maps 8-bit integer EXIF gps enumerations to descriptive string names.  For instance:"

#: ../../reference/Image.rst:5
msgid ":py:mod:`Image` Module"
msgstr ":py:mod:`Image` Module"

#: ../../reference/Image.rst:7
msgid ""
"The :py:mod:`~PIL.Image` module provides a class with the same name which"
" is used to represent a PIL image. The module also provides a number of "
"factory functions, including functions to load images from files, and to "
"create new images."
msgstr ""

#: ../../reference/Image.rst:13
msgid "Examples"
msgstr "Examples"

#: ../../reference/Image.rst:16
msgid "Open, rotate, and display an image (using the default viewer)"
msgstr "Open, rotate, and display an image (using the default viewer)"

#: ../../reference/Image.rst:18
msgid ""
"The following script loads an image, rotates it 45 degrees, and displays "
"it using an external viewer (usually xv on Unix, and the Paint program on"
" Windows)."
msgstr ""

#: ../../reference/Image.rst:29
msgid "Create thumbnails"
msgstr "Create thumbnails"

#: ../../reference/Image.rst:31
msgid ""
"The following script creates nice thumbnails of all JPEG images in the "
"current directory preserving aspect ratios with 128x128 max resolution."
msgstr "The following script creates nice thumbnails of all JPEG images in the current directory preserving aspect ratios with 128x128 max resolution."

#: ../../reference/Image.rst:48 ../../reference/ImageChops.rst:18
#: ../../reference/ImageColor.rst:47 ../../reference/ImageDraw.rst:106
#: ../../reference/ImageFont.rst:40
msgid "Functions"
msgstr "Functions"

#: PIL.Image.open:1 of
msgid "Opens and identifies the given image file."
msgstr "Opens and identifies the given image file."

#: PIL.Image.open:3 of
msgid ""
"This is a lazy operation; this function identifies the file, but the file"
" remains open and the actual image data is not read from the file until "
"you try to process the data (or call the :py:meth:`~PIL.Image.Image.load`"
" method).  See :py:func:`~PIL.Image.new`. See :ref:`file-handling`."
msgstr ""

#: ../../reference/ImageCms.rst ../../reference/ImageDraw.rst
#: ../../reference/ImageGrab.rst ../../reference/ImageMath.rst
#: ../../reference/ImagePath.rst ../../reference/ImageStat.rst
#: ../../reference/PixelAccess.rst ../../reference/TiffTags.rst
#: PIL.BufrStubImagePlugin.register_handler
#: PIL.DcxImagePlugin.DcxImageFile.seek
#: PIL.FitsStubImagePlugin.register_handler
#: PIL.FliImagePlugin.FliImageFile.seek PIL.GifImagePlugin.GifImageFile.seek
#: PIL.GifImagePlugin.getdata PIL.GifImagePlugin.getheader
#: PIL.GribStubImagePlugin.register_handler
#: PIL.Hdf5StubImagePlugin.register_handler PIL.ImImagePlugin.ImImageFile.seek
#: PIL.Image.Image.alpha_composite PIL.Image.Image.convert PIL.Image.Image.crop
#: PIL.Image.Image.draft PIL.Image.Image.filter PIL.Image.Image.getchannel
#: PIL.Image.Image.getcolors PIL.Image.Image.getdata PIL.Image.Image.getpixel
#: PIL.Image.Image.histogram PIL.Image.Image.paste PIL.Image.Image.point
#: PIL.Image.Image.putalpha PIL.Image.Image.putdata PIL.Image.Image.putpalette
#: PIL.Image.Image.putpixel PIL.Image.Image.quantize
#: PIL.Image.Image.remap_palette PIL.Image.Image.resize PIL.Image.Image.rotate
#: PIL.Image.Image.save PIL.Image.Image.seek PIL.Image.Image.show
#: PIL.Image.Image.thumbnail PIL.Image.Image.tobitmap PIL.Image.Image.tobytes
#: PIL.Image.Image.transform PIL.Image.Image.transpose
#: PIL.Image.alpha_composite PIL.Image.blend PIL.Image.composite PIL.Image.eval
#: PIL.Image.fromarray PIL.Image.frombuffer PIL.Image.frombytes PIL.Image.merge
#: PIL.Image.new PIL.Image.open PIL.Image.register_decoder
#: PIL.Image.register_encoder PIL.Image.register_extension
#: PIL.Image.register_mime PIL.Image.register_open PIL.Image.register_save
#: PIL.ImageCms.applyTransform PIL.ImageCms.buildProofTransform
#: PIL.ImageCms.buildProofTransformFromOpenProfiles PIL.ImageCms.buildTransform
#: PIL.ImageCms.buildTransformFromOpenProfiles PIL.ImageCms.createProfile
#: PIL.ImageCms.getDefaultIntent PIL.ImageCms.getOpenProfile
#: PIL.ImageCms.getProfileCopyright PIL.ImageCms.getProfileDescription
#: PIL.ImageCms.getProfileInfo PIL.ImageCms.getProfileManufacturer
#: PIL.ImageCms.getProfileModel PIL.ImageCms.getProfileName
#: PIL.ImageCms.isIntentSupported PIL.ImageCms.profileToProfile
#: PIL.ImageFile.Parser.feed PIL.ImageFile.PyDecoder.decode
#: PIL.ImageFile.PyDecoder.init PIL.ImageFile.PyDecoder.set_as_raw
#: PIL.ImageFile.PyDecoder.setfd PIL.ImageFile.PyDecoder.setimage
#: PIL.ImageFilter.BoxBlur PIL.ImageFilter.Color3DLUT
#: PIL.ImageFilter.Color3DLUT.generate PIL.ImageFilter.Color3DLUT.transform
#: PIL.ImageFilter.GaussianBlur PIL.ImageFilter.Kernel
#: PIL.ImageFilter.MaxFilter PIL.ImageFilter.MedianFilter
#: PIL.ImageFilter.MinFilter PIL.ImageFilter.ModeFilter
#: PIL.ImageFilter.RankFilter PIL.ImageFilter.UnsharpMask
#: PIL.ImageFont.FreeTypeFont.getmask PIL.ImageFont.FreeTypeFont.getmask2
#: PIL.ImageFont.FreeTypeFont.getoffset PIL.ImageFont.FreeTypeFont.getsize
#: PIL.ImageFont.FreeTypeFont.getsize_multiline
#: PIL.ImageFont.FreeTypeFont.set_variation_by_axes
#: PIL.ImageFont.FreeTypeFont.set_variation_by_name
#: PIL.ImageFont.ImageFont.getmask PIL.ImageFont.ImageFont.getsize
#: PIL.ImageFont.load PIL.ImageFont.load_path PIL.ImageFont.truetype
#: PIL.ImageOps.autocontrast PIL.ImageOps.colorize PIL.ImageOps.crop
#: PIL.ImageOps.deform PIL.ImageOps.equalize PIL.ImageOps.exif_transpose
#: PIL.ImageOps.expand PIL.ImageOps.fit PIL.ImageOps.flip
#: PIL.ImageOps.grayscale PIL.ImageOps.invert PIL.ImageOps.mirror
#: PIL.ImageOps.pad PIL.ImageOps.posterize PIL.ImageOps.scale
#: PIL.ImageOps.solarize PIL.ImagePalette.ImagePalette
#: PIL.ImageSequence.Iterator PIL.ImageTk.BitmapImage PIL.ImageTk.PhotoImage
#: PIL.ImageTk.PhotoImage.paste PIL.ImageWin.Dib PIL.ImageWin.Dib.expose
#: PIL.ImageWin.Dib.frombytes PIL.ImageWin.Dib.paste
#: PIL.ImageWin.Dib.query_palette PIL.IptcImagePlugin.getiptcinfo
#: PIL.JpegImagePlugin.JpegImageFile.draft PIL.MspImagePlugin.MspDecoder.decode
#: PIL.PSDraw.PSDraw.rectangle PIL.PSDraw.PSDraw.setfont
#: PIL.PsdImagePlugin.PsdImageFile.seek PIL.PyAccess.PyAccess.getpixel
#: PIL.PyAccess.PyAccess.putpixel PIL.SgiImagePlugin.SGI16Decoder.decode
#: PIL.SpiderImagePlugin.SpiderImageFile.seek
#: PIL.TiffImagePlugin.IFDRational.limit_rational
#: PIL.WebPImagePlugin.WebPImageFile.seek PIL.WmfImagePlugin.register_handler
#: of
msgid "参数"
msgstr "参数"

#: PIL.Image.open:9 of
msgid ""
"A filename (string), pathlib.Path object or a file object. The file "
"object must implement :py:meth:`~file.read`, :py:meth:`~file.seek`, and "
":py:meth:`~file.tell` methods, and be opened in binary mode."
msgstr ""

#: PIL.Image.open:13 of
msgid "The mode.  If given, this argument must be \"r\"."
msgstr "The mode.  If given, this argument must be \"r\"."

#: ../../reference/ImageCms.rst ../../reference/ImageDraw.rst
#: ../../reference/ImageGrab.rst ../../reference/ImageMath.rst
#: ../../reference/ImagePath.rst ../../reference/TiffTags.rst
#: PIL.DcxImagePlugin.DcxImageFile.tell PIL.FliImagePlugin.FliImageFile.tell
#: PIL.GifImagePlugin.GifImageFile.tell PIL.GifImagePlugin.getdata
#: PIL.GifImagePlugin.getheader PIL.ImImagePlugin.ImImageFile.tell
#: PIL.Image.Image.convert PIL.Image.Image.copy PIL.Image.Image.crop
#: PIL.Image.Image.filter PIL.Image.Image.getbands PIL.Image.Image.getbbox
#: PIL.Image.Image.getchannel PIL.Image.Image.getcolors PIL.Image.Image.getdata
#: PIL.Image.Image.getextrema PIL.Image.Image.getpalette
#: PIL.Image.Image.getpixel PIL.Image.Image.histogram PIL.Image.Image.load
#: PIL.Image.Image.point PIL.Image.Image.quantize PIL.Image.Image.remap_palette
#: PIL.Image.Image.resize PIL.Image.Image.rotate PIL.Image.Image.save
#: PIL.Image.Image.split PIL.Image.Image.tell PIL.Image.Image.thumbnail
#: PIL.Image.Image.tobitmap PIL.Image.Image.transform PIL.Image.Image.transpose
#: PIL.Image.alpha_composite PIL.Image.blend PIL.Image.eval PIL.Image.fromarray
#: PIL.Image.frombuffer PIL.Image.frombytes PIL.Image.merge PIL.Image.new
#: PIL.Image.open PIL.ImageCms.applyTransform PIL.ImageCms.buildProofTransform
#: PIL.ImageCms.buildProofTransformFromOpenProfiles PIL.ImageCms.buildTransform
#: PIL.ImageCms.buildTransformFromOpenProfiles PIL.ImageCms.createProfile
#: PIL.ImageCms.getDefaultIntent PIL.ImageCms.getOpenProfile
#: PIL.ImageCms.getProfileCopyright PIL.ImageCms.getProfileDescription
#: PIL.ImageCms.getProfileInfo PIL.ImageCms.getProfileManufacturer
#: PIL.ImageCms.getProfileModel PIL.ImageCms.getProfileName
#: PIL.ImageCms.isIntentSupported PIL.ImageCms.profileToProfile
#: PIL.ImageFile.Parser.close PIL.ImageFile.PyDecoder.cleanup
#: PIL.ImageFile.PyDecoder.decode PIL.ImageFile.PyDecoder.init
#: PIL.ImageFile.PyDecoder.set_as_raw PIL.ImageFile.PyDecoder.setfd
#: PIL.ImageFile.PyDecoder.setimage PIL.ImageFont.FreeTypeFont.font_variant
#: PIL.ImageFont.FreeTypeFont.get_variation_axes
#: PIL.ImageFont.FreeTypeFont.get_variation_names
#: PIL.ImageFont.FreeTypeFont.getmask PIL.ImageFont.FreeTypeFont.getmask2
#: PIL.ImageFont.FreeTypeFont.getmetrics PIL.ImageFont.FreeTypeFont.getname
#: PIL.ImageFont.FreeTypeFont.getoffset PIL.ImageFont.FreeTypeFont.getsize
#: PIL.ImageFont.FreeTypeFont.getsize_multiline PIL.ImageFont.ImageFont.getmask
#: PIL.ImageFont.ImageFont.getsize PIL.ImageFont.load
#: PIL.ImageFont.load_default PIL.ImageFont.load_path PIL.ImageFont.truetype
#: PIL.ImageOps.autocontrast PIL.ImageOps.colorize PIL.ImageOps.crop
#: PIL.ImageOps.deform PIL.ImageOps.equalize PIL.ImageOps.exif_transpose
#: PIL.ImageOps.expand PIL.ImageOps.fit PIL.ImageOps.flip
#: PIL.ImageOps.grayscale PIL.ImageOps.invert PIL.ImageOps.mirror
#: PIL.ImageOps.pad PIL.ImageOps.posterize PIL.ImageOps.scale
#: PIL.ImageOps.solarize PIL.ImageTk.BitmapImage.height
#: PIL.ImageTk.BitmapImage.width PIL.ImageTk.PhotoImage.height
#: PIL.ImageTk.PhotoImage.width PIL.ImageWin.Dib.query_palette
#: PIL.ImageWin.Dib.tobytes PIL.IptcImagePlugin.getiptcinfo
#: PIL.MspImagePlugin.MspDecoder.decode PIL.PsdImagePlugin.PsdImageFile.tell
#: PIL.PyAccess.PyAccess.getpixel PIL.SgiImagePlugin.SGI16Decoder.decode
#: PIL.SpiderImagePlugin.SpiderImageFile.tell
#: PIL.TiffImagePlugin.IFDRational.limit_rational
#: PIL.TiffImagePlugin.ImageFileDirectory_v1.from_v2
#: PIL.TiffImagePlugin.ImageFileDirectory_v1.to_v2
#: PIL.TiffImagePlugin.ImageFileDirectory_v2.named
#: PIL.WebPImagePlugin.WebPImageFile.tell of
msgid "返回"
msgstr "返回"

#: PIL.Image.Image.convert:38 PIL.Image.Image.copy:5 PIL.Image.Image.crop:9
#: PIL.Image.Image.filter:5 PIL.Image.Image.point:13
#: PIL.Image.Image.remap_palette:7 PIL.Image.Image.resize:29
#: PIL.Image.Image.rotate:22 PIL.Image.Image.transform:41
#: PIL.Image.alpha_composite:6 PIL.Image.blend:14 PIL.Image.eval:9
#: PIL.Image.frombuffer:29 PIL.Image.frombytes:20 PIL.Image.merge:8
#: PIL.Image.new:12 PIL.Image.open:14 PIL.ImageOps.scale:9 of
msgid "An :py:class:`~PIL.Image.Image` object."
msgstr "An :py:class:`~PIL.Image.Image` object."

#: PIL.DcxImagePlugin.DcxImageFile.seek PIL.FliImagePlugin.FliImageFile.seek
#: PIL.GifImagePlugin.GifImageFile.seek PIL.ImImagePlugin.ImImageFile.seek
#: PIL.Image.Image.save PIL.Image.Image.seek PIL.Image.Image.tobitmap
#: PIL.Image.open PIL.ImageCms.applyTransform PIL.ImageCms.buildProofTransform
#: PIL.ImageCms.buildProofTransformFromOpenProfiles PIL.ImageCms.buildTransform
#: PIL.ImageCms.buildTransformFromOpenProfiles PIL.ImageCms.createProfile
#: PIL.ImageCms.getDefaultIntent PIL.ImageCms.getOpenProfile
#: PIL.ImageCms.getProfileCopyright PIL.ImageCms.getProfileDescription
#: PIL.ImageCms.getProfileInfo PIL.ImageCms.getProfileManufacturer
#: PIL.ImageCms.getProfileModel PIL.ImageCms.getProfileName
#: PIL.ImageCms.isIntentSupported PIL.ImageCms.profileToProfile
#: PIL.ImageFile.Parser.close PIL.ImageFile.Parser.feed
#: PIL.ImageFont.FreeTypeFont.get_variation_axes
#: PIL.ImageFont.FreeTypeFont.get_variation_names
#: PIL.ImageFont.FreeTypeFont.set_variation_by_axes
#: PIL.ImageFont.FreeTypeFont.set_variation_by_name PIL.ImageFont.load
#: PIL.ImageFont.load_path PIL.ImageFont.truetype
#: PIL.PsdImagePlugin.PsdImageFile.seek
#: PIL.SpiderImagePlugin.SpiderImageFile.seek
#: PIL.WebPImagePlugin.WebPImageFile.seek of
msgid "引发"
msgstr "引发"

#: PIL.Image.open:15 of
msgid "If the file cannot be found."
msgstr "If the file cannot be found."

#: PIL.Image.open:16 of
msgid "If the image cannot be opened and identified."
msgstr "If the image cannot be opened and identified."

#: PIL.Image.open:18 of
msgid ""
"If the ``mode`` is not \"r\", or if a ``StringIO`` instance is used for "
"``fp``."
msgstr "If the ``mode`` is not \"r\", or if a ``StringIO`` instance is used for ``fp``."

#: ../../reference/Image.rst:53
msgid ""
"To protect against potential DOS attacks caused by \"`decompression "
"bombs`_\" (i.e. malicious files which decompress into a huge amount of "
"data and are designed to crash or cause disruption by using up a lot of "
"memory), Pillow will issue a ``DecompressionBombWarning`` if the image is"
" over a certain limit. If desired, the warning can be turned into an "
"error with ``warnings.simplefilter('error', "
"Image.DecompressionBombWarning)`` or suppressed entirely with "
"``warnings.simplefilter('ignore', Image.DecompressionBombWarning)``. See "
"also `the logging documentation`_ to have warnings output to the logging "
"facility instead of stderr."
msgstr ""

#: ../../reference/Image.rst:65
msgid "Image processing"
msgstr "Image processing"

#: PIL.Image.alpha_composite:1 of
msgid "Alpha composite im2 over im1."
msgstr "Alpha composite im2 over im1."

#: PIL.Image.alpha_composite:3 of
msgid "The first image. Must have mode RGBA."
msgstr "The first image. Must have mode RGBA."

#: PIL.Image.alpha_composite:4 of
msgid ""
"The second image.  Must have mode RGBA, and the same size as the first "
"image."
msgstr "The second image.  Must have mode RGBA, and the same size as the first image."

#: PIL.Image.blend:1 of
msgid ""
"Creates a new image by interpolating between two input images, using a "
"constant alpha.::"
msgstr "Creates a new image by interpolating between two input images, using a constant alpha.::"

#: PIL.Image.blend:6 PIL.Image.composite:3 of
msgid "The first image."
msgstr "The first image."

#: PIL.Image.blend:7 PIL.Image.composite:4 of
msgid "The second image.  Must have the same mode and size as the first image."
msgstr "The second image.  Must have the same mode and size as the first image."

#: PIL.Image.blend:9 of
msgid ""
"The interpolation alpha factor.  If alpha is 0.0, a copy of the first "
"image is returned. If alpha is 1.0, a copy of the second image is "
"returned. There are no restrictions on the alpha value. If necessary, the"
" result is clipped to fit into the allowed output range."
msgstr ""

#: PIL.Image.composite:1 of
msgid "Create composite image by blending images using a transparency mask."
msgstr "Create composite image by blending images using a transparency mask."

#: PIL.Image.composite:6 of
msgid ""
"A mask image.  This image can have mode \"1\", \"L\", or \"RGBA\", and "
"must have the same size as the other two images."
msgstr "A mask image.  This image can have mode \"1\", \"L\", or \"RGBA\", and must have the same size as the other two images."

#: PIL.Image.eval:1 of
msgid ""
"Applies the function (which should take one argument) to each pixel in "
"the given image. If the image has more than one band, the same function "
"is applied to each band. Note that the function is evaluated once for "
"each possible pixel value, so you cannot use random components or other "
"generators."
msgstr ""

#: PIL.Image.eval:7 of
msgid "The input image."
msgstr "The input image."

#: PIL.Image.eval:8 of
msgid "A function object, taking one integer argument."
msgstr "A function object, taking one integer argument."

#: PIL.Image.merge:1 of
msgid "Merge a set of single band images into a new multiband image."
msgstr "Merge a set of single band images into a new multiband image."

#: PIL.Image.merge:3 of
msgid "The mode to use for the output image. See: :ref:`concept-modes`."
msgstr "The mode to use for the output image. See: :ref:`concept-modes`."

#: PIL.Image.merge:5 of
msgid ""
"A sequence containing one single-band image for each band in the output "
"image.  All bands must have the same size."
msgstr "A sequence containing one single-band image for each band in the output image.  All bands must have the same size."

#: ../../reference/Image.rst:74
msgid "Constructing images"
msgstr "Constructing images"

#: PIL.Image.new:1 of
msgid "Creates a new image with the given mode and size."
msgstr "Creates a new image with the given mode and size."

#: PIL.Image.new:3 of
msgid "The mode to use for the new image. See: :ref:`concept-modes`."
msgstr "The mode to use for the new image. See: :ref:`concept-modes`."

#: PIL.Image.new:5 of
msgid "A 2-tuple, containing (width, height) in pixels."
msgstr "A 2-tuple, containing (width, height) in pixels."

#: PIL.Image.new:6 of
msgid ""
"What color to use for the image.  Default is black. If given, this should"
" be a single integer or floating point value for single-band modes, and a"
" tuple for multi-band modes (one value per band).  When creating RGB "
"images, you can also use color strings as supported by the ImageColor "
"module.  If the color is None, the image is not initialised."
msgstr ""

#: PIL.Image.fromarray:1 of
msgid ""
"Creates an image memory from an object exporting the array interface "
"(using the buffer protocol)."
msgstr "Creates an image memory from an object exporting the array interface (using the buffer protocol)."

#: PIL.Image.fromarray:4 of
msgid ""
"If **obj** is not contiguous, then the tobytes method is called and "
":py:func:`~PIL.Image.frombuffer` is used."
msgstr "If **obj** is not contiguous, then the tobytes method is called and :py:func:`~PIL.Image.frombuffer` is used."

#: PIL.Image.fromarray:7 of
msgid "If you have an image in NumPy::"
msgstr "If you have an image in NumPy::"

#: PIL.Image.fromarray:14 of
msgid "Then this can be used to convert it to a Pillow image::"
msgstr "Then this can be used to convert it to a Pillow image::"

#: PIL.Image.fromarray:18 of
msgid "Object with array interface"
msgstr "Object with array interface"

#: PIL.Image.fromarray:19 of
msgid ""
"Mode to use (will be determined from type if None) See: :ref:`concept-"
"modes`."
msgstr "Mode to use (will be determined from type if None) See: :ref:`concept-modes`."

#: PIL.Image.fromarray:21 PIL.ImageFile.Parser.close:3
#: PIL.ImageSequence.Iterator:8 of
msgid "An image object."
msgstr "An image object."

#: PIL.Image.frombytes:1 of
msgid "Creates a copy of an image memory from pixel data in a buffer."
msgstr "Creates a copy of an image memory from pixel data in a buffer."

#: PIL.Image.frombytes:3 of
msgid ""
"In its simplest form, this function takes three arguments (mode, size, "
"and unpacked pixel data)."
msgstr "In its simplest form, this function takes three arguments (mode, size, and unpacked pixel data)."

#: PIL.Image.frombytes:6 of
msgid ""
"You can also use any pixel decoder supported by PIL.  For more "
"information on available decoders, see the section :ref:`Writing Your Own"
" File Decoder <file-decoders>`."
msgstr ""

#: PIL.Image.frombytes:10 of
msgid ""
"Note that this function decodes pixel data only, not entire images. If "
"you have an entire image in a string, wrap it in a "
":py:class:`~io.BytesIO` object, and use :py:func:`~PIL.Image.open` to "
"load it."
msgstr ""

#: PIL.Image.frombuffer:18 PIL.Image.frombytes:15 of
msgid "The image mode. See: :ref:`concept-modes`."
msgstr "The image mode. See: :ref:`concept-modes`."

#: PIL.Image.frombuffer:19 PIL.Image.frombytes:16 of
msgid "The image size."
msgstr "The image size."

#: PIL.Image.frombytes:17 of
msgid "A byte buffer containing raw data for the given mode."
msgstr "A byte buffer containing raw data for the given mode."

#: PIL.Image.frombuffer:22 PIL.Image.frombytes:18 of
msgid "What decoder to use."
msgstr "What decoder to use."

#: PIL.Image.frombytes:19 of
msgid "Additional parameters for the given decoder."
msgstr "Additional parameters for the given decoder."

#: PIL.Image.frombuffer:1 of
msgid "Creates an image memory referencing pixel data in a byte buffer."
msgstr "Creates an image memory referencing pixel data in a byte buffer."

#: PIL.Image.frombuffer:3 of
msgid ""
"This function is similar to :py:func:`~PIL.Image.frombytes`, but uses "
"data in the byte buffer, where possible.  This means that changes to the "
"original buffer object are reflected in this image).  Not all modes can "
"share memory; supported modes include \"L\", \"RGBX\", \"RGBA\", and "
"\"CMYK\"."
msgstr ""

#: PIL.Image.frombuffer:8 of
msgid ""
"Note that this function decodes pixel data only, not entire images. If "
"you have an entire image file in a string, wrap it in a **BytesIO** "
"object, and use :py:func:`~PIL.Image.open` to load it."
msgstr ""

#: PIL.Image.frombuffer:12 of
msgid ""
"In the current version, the default parameters used for the \"raw\" "
"decoder differs from that used for :py:func:`~PIL.Image.frombytes`.  This"
" is a bug, and will probably be fixed in a future release.  The current "
"release issues a warning if you do this; to disable the warning, you "
"should provide the full set of parameters.  See below for details."
msgstr ""

#: PIL.Image.frombuffer:20 of
msgid "A bytes or other buffer object containing raw data for the given mode."
msgstr "A bytes or other buffer object containing raw data for the given mode."

#: PIL.Image.frombuffer:23 of
msgid ""
"Additional parameters for the given decoder.  For the default encoder "
"(\"raw\"), it's recommended that you provide the full set of parameters::"
"      frombuffer(mode, size, data, \"raw\", mode, 0, 1)"
msgstr ""

#: PIL.Image.frombuffer:23 of
msgid ""
"Additional parameters for the given decoder.  For the default encoder "
"(\"raw\"), it's recommended that you provide the full set of parameters::"
msgstr "Additional parameters for the given decoder.  For the default encoder (\"raw\"), it's recommended that you provide the full set of parameters::"

#: ../../reference/Image.rst:83
msgid "Registering plugins"
msgstr "Registering plugins"

#: ../../reference/Image.rst:87
msgid ""
"These functions are for use by plugin authors. Application authors can "
"ignore them."
msgstr "These functions are for use by plugin authors. Application authors can ignore them."

#: PIL.Image.register_open:1 of
msgid ""
"Register an image file plugin.  This function should not be used in "
"application code."
msgstr "Register an image file plugin.  This function should not be used in application code."

#: PIL.Image.register_extension:4 PIL.Image.register_mime:4
#: PIL.Image.register_open:4 PIL.Image.register_save:4 of
msgid "An image format identifier."
msgstr "An image format identifier."

#: PIL.Image.register_open:5 of
msgid "An image file factory method."
msgstr "An image file factory method."

#: PIL.Image.register_open:6 of
msgid ""
"An optional function that can be used to quickly reject images having "
"another format."
msgstr "An optional function that can be used to quickly reject images having another format."

#: PIL.Image.register_decoder:1 of
msgid ""
"Registers an image decoder.  This function should not be used in "
"application code."
msgstr "Registers an image decoder.  This function should not be used in application code."

#: PIL.Image.register_decoder:4 of
msgid "The name of the decoder"
msgstr "The name of the decoder"

#: PIL.Image.register_decoder:5 of
msgid "A callable(mode, args) that returns an ImageFile.PyDecoder object"
msgstr "A callable(mode, args) that returns an ImageFile.PyDecoder object"

#: PIL.Image.register_mime:1 of
msgid ""
"Registers an image MIME type.  This function should not be used in "
"application code."
msgstr "Registers an image MIME type.  This function should not be used in application code."

#: PIL.Image.register_mime:5 of
msgid "The image MIME type for this format."
msgstr "The image MIME type for this format."

#: PIL.Image.register_save:1 of
msgid ""
"Registers an image save function.  This function should not be used in "
"application code."
msgstr "Registers an image save function.  This function should not be used in application code."

#: PIL.Image.register_save:5 of
msgid "A function to save images in this format."
msgstr "A function to save images in this format."

#: PIL.Image.register_encoder:1 of
msgid ""
"Registers an image encoder.  This function should not be used in "
"application code."
msgstr "Registers an image encoder.  This function should not be used in application code."

#: PIL.Image.register_encoder:4 of
msgid "The name of the encoder"
msgstr "The name of the encoder"

#: PIL.Image.register_encoder:5 of
msgid "A callable(mode, args) that returns an ImageFile.PyEncoder object"
msgstr "A callable(mode, args) that returns an ImageFile.PyEncoder object"

#: PIL.Image.register_extension:1 of
msgid ""
"Registers an image extension.  This function should not be used in "
"application code."
msgstr "Registers an image extension.  This function should not be used in application code."

#: PIL.Image.register_extension:5 of
msgid "An extension used for this format."
msgstr "An extension used for this format."

#: ../../reference/Image.rst:99
msgid "The Image Class"
msgstr "The Image Class"

#: PIL.Image.Image:1 of
msgid ""
"This class represents an image object.  To create "
":py:class:`~PIL.Image.Image` objects, use the appropriate factory "
"functions.  There's hardly ever any reason to call the Image constructor "
"directly."
msgstr ""

#: PIL.Image.Image:6 of
msgid ":py:func:`~PIL.Image.open`"
msgstr ":py:func:`~PIL.Image.open`"

#: PIL.Image.Image:7 of
msgid ":py:func:`~PIL.Image.new`"
msgstr ":py:func:`~PIL.Image.new`"

#: PIL.Image.Image:8 of
msgid ":py:func:`~PIL.Image.frombytes`"
msgstr ":py:func:`~PIL.Image.frombytes`"

#: ../../reference/Image.rst:103
msgid ""
"An instance of the :py:class:`~PIL.Image.Image` class has the following "
"methods. Unless otherwise stated, all methods return a new instance of "
"the :py:class:`~PIL.Image.Image` class, holding the resulting image."
msgstr ""

#: PIL.Image.Image.alpha_composite:1 of
msgid ""
"'In-place' analog of Image.alpha_composite. Composites an image onto this"
" image."
msgstr "'In-place' analog of Image.alpha_composite. Composites an image onto this image."

#: PIL.Image.Image.alpha_composite:4 of
msgid "image to composite over this one"
msgstr "image to composite over this one"

#: PIL.Image.Image.alpha_composite:5 of
msgid ""
"Optional 2 tuple (left, top) specifying the upper left corner in this "
"(destination) image."
msgstr "Optional 2 tuple (left, top) specifying the upper left corner in this (destination) image."

#: PIL.Image.Image.alpha_composite:7 of
msgid ""
"Optional 2 (left, top) tuple for the upper left corner in the overlay "
"source image, or 4 tuple (left, top, right, bottom) for the bounds of the"
" source rectangle"
msgstr ""

#: PIL.Image.Image.alpha_composite:11 of
msgid "Performance Note: Not currently implemented in-place in the core layer."
msgstr "Performance Note: Not currently implemented in-place in the core layer."

#: PIL.Image.Image.convert:1 of
msgid ""
"Returns a converted copy of this image. For the \"P\" mode, this method "
"translates pixels through the palette.  If mode is omitted, a mode is "
"chosen so that all information in the image and the palette can be "
"represented without a palette."
msgstr ""

#: PIL.Image.Image.convert:6 of
msgid ""
"The current version supports all possible conversions between \"L\", "
"\"RGB\" and \"CMYK.\" The **matrix** argument only supports \"L\" and "
"\"RGB\"."
msgstr ""

#: PIL.Image.Image.convert:10 of
msgid ""
"When translating a color image to greyscale (mode \"L\"), the library "
"uses the ITU-R 601-2 luma transform::"
msgstr "When translating a color image to greyscale (mode \"L\"), the library uses the ITU-R 601-2 luma transform::"

#: PIL.Image.Image.convert:15 of
msgid ""
"The default method of converting a greyscale (\"L\") or \"RGB\" image "
"into a bilevel (mode \"1\") image uses Floyd-Steinberg dither to "
"approximate the original image luminosity levels. If dither is NONE, all "
"values larger than 128 are set to 255 (white), all other values to 0 "
"(black). To use other thresholds, use the "
":py:meth:`~PIL.Image.Image.point` method."
msgstr ""

#: PIL.Image.Image.convert:22 of
msgid ""
"When converting from \"RGBA\" to \"P\" without a **matrix** argument, "
"this passes the operation to :py:meth:`~PIL.Image.Image.quantize`, and "
"**dither** and **palette** are ignored."
msgstr ""

#: PIL.Image.Image.convert:26 of
msgid "The requested mode. See: :ref:`concept-modes`."
msgstr "The requested mode. See: :ref:`concept-modes`."

#: PIL.Image.Image.convert:27 of
msgid ""
"An optional conversion matrix.  If given, this should be 4- or 12-tuple "
"containing floating point values."
msgstr "An optional conversion matrix.  If given, this should be 4- or 12-tuple containing floating point values."

#: PIL.Image.Image.convert:29 of
msgid ""
"Dithering method, used when converting from mode \"RGB\" to \"P\" or from"
" \"RGB\" or \"L\" to \"1\". Available methods are NONE or FLOYDSTEINBERG "
"(default). Note that this is not used when **matrix** is supplied."
msgstr ""

#: PIL.Image.Image.convert:33 of
msgid ""
"Palette to use when converting from mode \"RGB\" to \"P\".  Available "
"palettes are WEB or ADAPTIVE."
msgstr "Palette to use when converting from mode \"RGB\" to \"P\".  Available palettes are WEB or ADAPTIVE."

#: PIL.Image.Image.convert:35 of
msgid "Number of colors to use for the ADAPTIVE palette. Defaults to 256."
msgstr "Number of colors to use for the ADAPTIVE palette. Defaults to 256."

#: PIL.Image.Image.convert PIL.Image.Image.copy PIL.Image.Image.crop
#: PIL.Image.Image.getbands PIL.Image.Image.load PIL.Image.Image.tobytes
#: PIL.ImageChops.add PIL.ImageChops.add_modulo PIL.ImageChops.blend
#: PIL.ImageChops.composite PIL.ImageChops.constant PIL.ImageChops.darker
#: PIL.ImageChops.difference PIL.ImageChops.duplicate PIL.ImageChops.invert
#: PIL.ImageChops.lighter PIL.ImageChops.logical_and PIL.ImageChops.logical_or
#: PIL.ImageChops.logical_xor PIL.ImageChops.multiply PIL.ImageChops.screen
#: PIL.ImageChops.subtract PIL.ImageChops.subtract_modulo of
msgid "返回类型"
msgstr "返回类型"

#: PIL.Image.Image.convert:37 PIL.Image.Image.copy:4 PIL.Image.Image.crop:8
#: PIL.ImageChops.add:9 PIL.ImageChops.add_modulo:8 PIL.ImageChops.blend:4
#: PIL.ImageChops.composite:4 PIL.ImageChops.constant:3 PIL.ImageChops.darker:8
#: PIL.ImageChops.difference:8 PIL.ImageChops.duplicate:3
#: PIL.ImageChops.invert:7 PIL.ImageChops.lighter:8
#: PIL.ImageChops.logical_and:8 PIL.ImageChops.logical_or:8
#: PIL.ImageChops.logical_xor:8 PIL.ImageChops.multiply:11
#: PIL.ImageChops.screen:8 PIL.ImageChops.subtract:9
#: PIL.ImageChops.subtract_modulo:8 of
msgid ":py:class:`~PIL.Image.Image`"
msgstr ":py:class:`~PIL.Image.Image`"

#: ../../reference/Image.rst:111
msgid ""
"The following example converts an RGB image (linearly calibrated "
"according to ITU-R 709, using the D65 luminant) to the CIE XYZ color "
"space:"
msgstr ""

#: PIL.Image.Image.copy:1 of
msgid ""
"Copies this image. Use this method if you wish to paste things into an "
"image, but still retain the original."
msgstr "Copies this image. Use this method if you wish to paste things into an image, but still retain the original."

#: PIL.Image.Image.crop:1 of
msgid ""
"Returns a rectangular region from this image. The box is a 4-tuple "
"defining the left, upper, right, and lower pixel coordinate. See :ref"
":`coordinate-system`."
msgstr ""

#: PIL.Image.Image.crop:5 of
msgid "Note: Prior to Pillow 3.4.0, this was a lazy operation."
msgstr "Note: Prior to Pillow 3.4.0, this was a lazy operation."

#: PIL.Image.Image.crop:7 of
msgid "The crop rectangle, as a (left, upper, right, lower)-tuple."
msgstr "The crop rectangle, as a (left, upper, right, lower)-tuple."

#: ../../reference/Image.rst:125
msgid "This crops the input image with the provided coordinates:"
msgstr "This crops the input image with the provided coordinates:"

#: PIL.Image.Image.draft:1 PIL.JpegImagePlugin.JpegImageFile.draft:1 of
msgid ""
"Configures the image file loader so it returns a version of the image "
"that as closely as possible matches the given mode and size. For example,"
" you can use this method to convert a color JPEG to greyscale while "
"loading it."
msgstr ""

#: PIL.Image.Image.draft:6 PIL.JpegImagePlugin.JpegImageFile.draft:6 of
msgid ""
"If any changes are made, returns a tuple with the chosen ``mode`` and "
"``box`` with coordinates of the original image within the altered one."
msgstr "If any changes are made, returns a tuple with the chosen ``mode`` and ``box`` with coordinates of the original image within the altered one."

#: PIL.Image.Image.draft:9 PIL.JpegImagePlugin.JpegImageFile.draft:9 of
msgid ""
"Note that this method modifies the :py:class:`~PIL.Image.Image` object in"
" place. If the image has already been loaded, this method has no effect."
msgstr "Note that this method modifies the :py:class:`~PIL.Image.Image` object in place. If the image has already been loaded, this method has no effect."

#: PIL.Image.Image.draft:13 PIL.JpegImagePlugin.JpegImageFile.draft:13 of
msgid ""
"Note: This method is not implemented for most images. It is currently "
"implemented only for JPEG and MPO images."
msgstr "Note: This method is not implemented for most images. It is currently implemented only for JPEG and MPO images."

#: PIL.Image.Image.draft:16 PIL.JpegImagePlugin.JpegImageFile.draft:16 of
msgid "The requested mode."
msgstr "The requested mode."

#: PIL.Image.Image.draft:17 PIL.JpegImagePlugin.JpegImageFile.draft:17 of
msgid "The requested size."
msgstr "The requested size."

#: PIL.Image.Image.filter:1 of
msgid ""
"Filters this image using the given filter.  For a list of available "
"filters, see the :py:mod:`~PIL.ImageFilter` module."
msgstr "Filters this image using the given filter.  For a list of available filters, see the :py:mod:`~PIL.ImageFilter` module."

#: PIL.Image.Image.filter:4 of
msgid "Filter kernel."
msgstr "Filter kernel."

#: ../../reference/Image.rst:145
msgid "This blurs the input image using a filter from the ``ImageFilter`` module:"
msgstr "This blurs the input image using a filter from the ``ImageFilter`` module:"

#: PIL.Image.Image.getbands:1 of
msgid ""
"Returns a tuple containing the name of each band in this image. For "
"example, **getbands** on an RGB image returns (\"R\", \"G\", \"B\")."
msgstr "Returns a tuple containing the name of each band in this image. For example, **getbands** on an RGB image returns (\"R\", \"G\", \"B\")."

#: PIL.Image.Image.getbands:4 of
msgid "A tuple containing band names."
msgstr "A tuple containing band names."

#: ../../reference/Image.rst:158
msgid "This helps to get the bands of the input image:"
msgstr "This helps to get the bands of the input image:"

#: PIL.Image.Image.getbbox:1 of
msgid "Calculates the bounding box of the non-zero regions in the image."
msgstr "Calculates the bounding box of the non-zero regions in the image."

#: PIL.Image.Image.getbbox:4 of
msgid ""
"The bounding box is returned as a 4-tuple defining the left, upper, "
"right, and lower pixel coordinate. See :ref:`coordinate-system`. If the "
"image is completely empty, this method returns None."
msgstr ""

#: ../../reference/Image.rst:169
msgid "This helps to get the bounding box coordinates of the input image:"
msgstr "This helps to get the bounding box coordinates of the input image:"

#: PIL.Image.Image.getcolors:1 of
msgid "Returns a list of colors used in this image."
msgstr "Returns a list of colors used in this image."

#: PIL.Image.Image.getcolors:3 of
msgid ""
"Maximum number of colors.  If this number is exceeded, this method "
"returns None.  The default limit is 256 colors."
msgstr "Maximum number of colors.  If this number is exceeded, this method returns None.  The default limit is 256 colors."

#: PIL.Image.Image.getcolors:6 of
msgid "An unsorted list of (count, pixel) values."
msgstr "An unsorted list of (count, pixel) values."

#: PIL.Image.Image.getdata:1 of
msgid ""
"Returns the contents of this image as a sequence object containing pixel "
"values.  The sequence object is flattened, so that values for line one "
"follow directly after the values of line zero, and so on."
msgstr ""

#: PIL.Image.Image.getdata:6 of
msgid ""
"Note that the sequence object returned by this method is an internal PIL "
"data type, which only supports certain sequence operations.  To convert "
"it to an ordinary sequence (e.g. for printing), use "
"**list(im.getdata())**."
msgstr ""

#: PIL.Image.Image.getdata:11 of
msgid ""
"What band to return.  The default is to return all bands.  To return a "
"single band, pass in the index value (e.g. 0 to get the \"R\" band from "
"an \"RGB\" image)."
msgstr ""

#: PIL.Image.Image.getdata:14 of
msgid "A sequence-like object."
msgstr "A sequence-like object."

#: PIL.Image.Image.getextrema:1 of
msgid "Gets the the minimum and maximum pixel values for each band in the image."
msgstr "Gets the the minimum and maximum pixel values for each band in the image."

#: PIL.Image.Image.getextrema:4 of
msgid ""
"For a single-band image, a 2-tuple containing the minimum and maximum "
"pixel value.  For a multi-band image, a tuple containing one 2-tuple for "
"each band."
msgstr ""

#: PIL.Image.Image.getpalette:1 of
msgid "Returns the image palette as a list."
msgstr "Returns the image palette as a list."

#: PIL.Image.Image.getpalette:3 of
msgid ""
"A list of color values [r, g, b, ...], or None if the image has no "
"palette."
msgstr "A list of color values [r, g, b, ...], or None if the image has no palette."

#: PIL.Image.Image.getpixel:1 of
msgid "Returns the pixel value at a given position."
msgstr "Returns the pixel value at a given position."

#: PIL.Image.Image.getpixel:3 of
msgid "The coordinate, given as (x, y). See :ref:`coordinate-system`."
msgstr "The coordinate, given as (x, y). See :ref:`coordinate-system`."

#: PIL.Image.Image.getpixel:5 of
msgid ""
"The pixel value.  If the image is a multi-layer image, this method "
"returns a tuple."
msgstr "The pixel value.  If the image is a multi-layer image, this method returns a tuple."

#: PIL.Image.Image.histogram:1 of
msgid ""
"Returns a histogram for the image. The histogram is returned as a list of"
" pixel counts, one for each pixel value in the source image. If the image"
" has more than one band, the histograms for all bands are concatenated "
"(for example, the histogram for an \"RGB\" image contains 768 values)."
msgstr ""

#: PIL.Image.Image.histogram:7 of
msgid ""
"A bilevel image (mode \"1\") is treated as a greyscale (\"L\") image by "
"this method."
msgstr "A bilevel image (mode \"1\") is treated as a greyscale (\"L\") image by this method."

#: PIL.Image.Image.histogram:10 of
msgid ""
"If a mask is provided, the method returns a histogram for those parts of "
"the image where the mask image is non-zero. The mask image must have the "
"same size as the image, and be either a bi-level image (mode \"1\") or a "
"greyscale image (\"L\")."
msgstr ""

#: ../../reference/ImageStat.rst:17 PIL.Image.Image.histogram:15 of
msgid "An optional mask."
msgstr "An optional mask."

#: PIL.Image.Image.histogram:16 of
msgid "An optional tuple of manually-specified extrema."
msgstr "An optional tuple of manually-specified extrema."

#: PIL.Image.Image.histogram:17 of
msgid "A list containing pixel counts."
msgstr "A list containing pixel counts."

#: PIL.Image.Image.paste:1 of
msgid ""
"Pastes another image into this image. The box argument is either a "
"2-tuple giving the upper left corner, a 4-tuple defining the left, upper,"
" right, and lower pixel coordinate, or None (same as (0, 0)). See :ref"
":`coordinate-system`. If a 4-tuple is given, the size of the pasted image"
" must match the size of the region."
msgstr ""

#: PIL.Image.Image.paste:7 of
msgid ""
"If the modes don't match, the pasted image is converted to the mode of "
"this image (see the :py:meth:`~PIL.Image.Image.convert` method for "
"details)."
msgstr ""

#: PIL.Image.Image.paste:11 of
msgid ""
"Instead of an image, the source can be a integer or tuple containing "
"pixel values.  The method then fills the region with the given color.  "
"When creating RGB images, you can also use color strings as supported by "
"the ImageColor module."
msgstr ""

#: PIL.Image.Image.paste:16 of
msgid ""
"If a mask is given, this method updates only the regions indicated by the"
" mask.  You can use either \"1\", \"L\" or \"RGBA\" images (in the latter"
" case, the alpha band is used as mask). Where the mask is 255, the given "
"image is copied as is.  Where the mask is 0, the current value is "
"preserved.  Intermediate values will mix the two images together, "
"including their alpha channels if they have them."
msgstr ""

#: PIL.Image.Image.paste:24 of
msgid ""
"See :py:meth:`~PIL.Image.Image.alpha_composite` if you want to combine "
"images with respect to their alpha channels."
msgstr "See :py:meth:`~PIL.Image.Image.alpha_composite` if you want to combine images with respect to their alpha channels."

#: PIL.Image.Image.paste:27 of
msgid "Source image or pixel value (integer or tuple)."
msgstr "Source image or pixel value (integer or tuple)."

#: PIL.Image.Image.paste:28 of
msgid ""
"An optional 4-tuple giving the region to paste into. If a 2-tuple is used"
" instead, it's treated as the upper left corner.  If omitted or None, the"
" source is pasted into the upper left corner.  If an image is given as "
"the second argument and there is no third, the box defaults to (0, 0), "
"and the second argument is interpreted as a mask image."
msgstr ""

#: PIL.Image.Image.paste:28 of
msgid ""
"An optional 4-tuple giving the region to paste into. If a 2-tuple is used"
" instead, it's treated as the upper left corner.  If omitted or None, the"
" source is pasted into the upper left corner."
msgstr ""

#: PIL.Image.Image.paste:33 of
msgid ""
"If an image is given as the second argument and there is no third, the "
"box defaults to (0, 0), and the second argument is interpreted as a mask "
"image."
msgstr ""

#: PIL.Image.Image.paste:36 of
msgid "An optional mask image."
msgstr "An optional mask image."

#: PIL.Image.Image.point:1 of
msgid "Maps this image through a lookup table or function."
msgstr "Maps this image through a lookup table or function."

#: PIL.Image.Image.point:3 of
msgid ""
"A lookup table, containing 256 (or 65536 if self.mode==\"I\" and mode == "
"\"L\") values per band in the image.  A function can be used instead, it "
"should take a single argument. The function is called once for each "
"possible pixel value, and the resulting table is applied to all bands of "
"the image."
msgstr ""

#: PIL.Image.Image.point:9 of
msgid ""
"Output mode (default is same as input).  In the current version, this can"
" only be used if the source image has mode \"L\" or \"P\", and the output"
" has mode \"1\" or the source image mode is \"I\" and the output mode is "
"\"L\"."
msgstr ""

#: PIL.Image.Image.putalpha:1 of
msgid ""
"Adds or replaces the alpha layer in this image.  If the image does not "
"have an alpha layer, it's converted to \"LA\" or \"RGBA\". The new layer "
"must be either \"L\" or \"1\"."
msgstr ""

#: PIL.Image.Image.putalpha:5 of
msgid ""
"The new alpha layer.  This can either be an \"L\" or \"1\" image having "
"the same size as this image, or an integer or other color value."
msgstr "The new alpha layer.  This can either be an \"L\" or \"1\" image having the same size as this image, or an integer or other color value."

#: PIL.Image.Image.putdata:1 of
msgid ""
"Copies pixel data to this image.  This method copies data from a sequence"
" object into the image, starting at the upper left corner (0, 0), and "
"continuing until either the image or the sequence ends.  The scale and "
"offset values are used to adjust the sequence values: **pixel = "
"value*scale + offset**."
msgstr ""

#: PIL.Image.Image.putdata:7 of
msgid "A sequence object."
msgstr "A sequence object."

#: PIL.Image.Image.putdata:8 of
msgid "An optional scale value.  The default is 1.0."
msgstr "An optional scale value.  The default is 1.0."

#: PIL.Image.Image.putdata:9 of
msgid "An optional offset value.  The default is 0.0."
msgstr "An optional offset value.  The default is 0.0."

#: PIL.Image.Image.putpalette:1 of
msgid ""
"Attaches a palette to this image.  The image must be a \"P\", \"PA\", "
"\"L\" or \"LA\" image, and the palette sequence must contain 768 integer "
"values, where each group of three values represent the red, green, and "
"blue values for the corresponding pixel index. Instead of an integer "
"sequence, you can use an 8-bit string."
msgstr ""

#: PIL.Image.Image.putpalette:8 of
msgid "A palette sequence (either a list or a string)."
msgstr "A palette sequence (either a list or a string)."

#: PIL.Image.Image.putpalette:9 of
msgid "The raw mode of the palette."
msgstr "The raw mode of the palette."

#: PIL.Image.Image.putpixel:1 of
msgid ""
"Modifies the pixel at the given position. The color is given as a single "
"numerical value for single-band images, and a tuple for multi-band "
"images. In addition to this, RGB and RGBA tuples are accepted for P "
"images."
msgstr ""

#: PIL.Image.Image.putpixel:6 of
msgid ""
"Note that this method is relatively slow.  For more extensive changes, "
"use :py:meth:`~PIL.Image.Image.paste` or the :py:mod:`~PIL.ImageDraw` "
"module instead."
msgstr ""

#: PIL.Image.Image.putpixel:10 of
msgid "See:"
msgstr "See:"

#: PIL.Image.Image.putpixel:12 of
msgid ":py:meth:`~PIL.Image.Image.paste`"
msgstr ":py:meth:`~PIL.Image.Image.paste`"

#: PIL.Image.Image.putpixel:13 of
msgid ":py:meth:`~PIL.Image.Image.putdata`"
msgstr ":py:meth:`~PIL.Image.Image.putdata`"

#: PIL.Image.Image.putpixel:14 of
msgid ":py:mod:`~PIL.ImageDraw`"
msgstr ":py:mod:`~PIL.ImageDraw`"

#: PIL.Image.Image.putpixel:16 PIL.PyAccess.PyAccess.getpixel:5
#: PIL.PyAccess.PyAccess.putpixel:5 of
msgid "The pixel coordinate, given as (x, y). See :ref:`coordinate-system`."
msgstr "The pixel coordinate, given as (x, y). See :ref:`coordinate-system`."

#: PIL.Image.Image.putpixel:18 PIL.PyAccess.PyAccess.putpixel:7 of
msgid "The pixel value."
msgstr "The pixel value."

#: PIL.Image.Image.quantize:1 of
msgid "Convert the image to 'P' mode with the specified number of colors."
msgstr "Convert the image to 'P' mode with the specified number of colors."

#: PIL.Image.Image.quantize:4 of
msgid "The desired number of colors, <= 256"
msgstr "The desired number of colors, <= 256"

#: PIL.Image.Image.quantize:5 of
msgid "0 = median cut 1 = maximum coverage 2 = fast octree 3 = libimagequant"
msgstr "0 = median cut 1 = maximum coverage 2 = fast octree 3 = libimagequant"

#: PIL.Image.Image.quantize:9 of
msgid "Integer"
msgstr "Integer"

#: PIL.Image.Image.quantize:10 of
msgid "Quantize to the palette of given :py:class:`PIL.Image.Image`."
msgstr "Quantize to the palette of given :py:class:`PIL.Image.Image`."

#: PIL.Image.Image.quantize:12 of
msgid ""
"Dithering method, used when converting from mode \"RGB\" to \"P\" or from"
" \"RGB\" or \"L\" to \"1\". Available methods are NONE or FLOYDSTEINBERG "
"(default). Default: 1 (legacy setting)"
msgstr ""

#: PIL.Image.Image.quantize:16 of
msgid "A new image"
msgstr "A new image"

#: PIL.Image.Image.resize:1 of
msgid "Returns a resized copy of this image."
msgstr "Returns a resized copy of this image."

#: PIL.Image.Image.resize:3 of
msgid "The requested size in pixels, as a 2-tuple: (width, height)."
msgstr "The requested size in pixels, as a 2-tuple: (width, height)."

#: PIL.Image.Image.resize:5 of
msgid ""
"An optional resampling filter.  This can be one of "
":py:attr:`PIL.Image.NEAREST`, :py:attr:`PIL.Image.BOX`, "
":py:attr:`PIL.Image.BILINEAR`, :py:attr:`PIL.Image.HAMMING`, "
":py:attr:`PIL.Image.BICUBIC` or :py:attr:`PIL.Image.LANCZOS`. Default "
"filter is :py:attr:`PIL.Image.BICUBIC`. If the image has mode \"1\" or "
"\"P\", it is always set to :py:attr:`PIL.Image.NEAREST`. See: :ref"
":`concept-filters`."
msgstr ""

#: PIL.Image.Image.resize:13 of
msgid ""
"An optional 4-tuple of floats providing the source image region to be "
"scaled. The values must be within (0, 0, width, height) rectangle. If "
"omitted or None, the entire source is used."
msgstr ""

#: PIL.Image.Image.resize:17 of
msgid ""
"Apply optimization by resizing the image in two steps. First, reducing "
"the image by integer times using :py:meth:`~PIL.Image.Image.reduce`. "
"Second, resizing using regular resampling. The last step changes size no "
"less than by ``reducing_gap`` times. ``reducing_gap`` may be None (no "
"first step is performed) or should be greater than 1.0. The bigger "
"``reducing_gap``, the closer the result to the fair resampling. The "
"smaller ``reducing_gap``, the faster resizing. With ``reducing_gap`` "
"greater or equal to 3.0, the result is indistinguishable from fair "
"resampling in most cases. The default value is None (no optimization)."
msgstr ""

#: ../../reference/Image.rst:195
msgid ""
"This resizes the given image from ``(width, height)`` to ``(width/2, "
"height/2)``:"
msgstr "This resizes the given image from ``(width, height)`` to ``(width/2, height/2)``:"

#: PIL.Image.Image.remap_palette:1 of
msgid "Rewrites the image to reorder the palette."
msgstr "Rewrites the image to reorder the palette."

#: PIL.Image.Image.remap_palette:3 of
msgid ""
"A list of indexes into the original palette. e.g. [1,0] would swap a two "
"item palette, and list(range(256)) is the identity transform."
msgstr "A list of indexes into the original palette. e.g. [1,0] would swap a two item palette, and list(range(256)) is the identity transform."

#: PIL.Image.Image.remap_palette:6 of
msgid "Bytes or None."
msgstr "Bytes or None."

#: PIL.Image.Image.rotate:1 of
msgid ""
"Returns a rotated copy of this image.  This method returns a copy of this"
" image, rotated the given number of degrees counter clockwise around its "
"centre."
msgstr ""

#: PIL.Image.Image.rotate:5 of
msgid "In degrees counter clockwise."
msgstr "In degrees counter clockwise."

#: PIL.Image.Image.rotate:6 of
msgid ""
"An optional resampling filter.  This can be one of "
":py:attr:`PIL.Image.NEAREST` (use nearest neighbour), "
":py:attr:`PIL.Image.BILINEAR` (linear interpolation in a 2x2 "
"environment), or :py:attr:`PIL.Image.BICUBIC` (cubic spline interpolation"
" in a 4x4 environment). If omitted, or if the image has mode \"1\" or "
"\"P\", it is set to :py:attr:`PIL.Image.NEAREST`. See :ref:`concept-"
"filters`."
msgstr ""

#: PIL.Image.Image.rotate:13 of
msgid ""
"Optional expansion flag.  If true, expands the output image to make it "
"large enough to hold the entire rotated image. If false or omitted, make "
"the output image the same size as the input image.  Note that the expand "
"flag assumes rotation around the center and no translation."
msgstr ""

#: PIL.Image.Image.rotate:18 of
msgid ""
"Optional center of rotation (a 2-tuple).  Origin is the upper left "
"corner.  Default is the center of the image."
msgstr "Optional center of rotation (a 2-tuple).  Origin is the upper left corner.  Default is the center of the image."

#: PIL.Image.Image.rotate:20 of
msgid "An optional post-rotate translation (a 2-tuple)."
msgstr "An optional post-rotate translation (a 2-tuple)."

#: PIL.Image.Image.rotate:21 of
msgid "An optional color for area outside the rotated image."
msgstr "An optional color for area outside the rotated image."

#: ../../reference/Image.rst:210
msgid "This rotates the input image by ``theta`` degrees counter clockwise:"
msgstr "This rotates the input image by ``theta`` degrees counter clockwise:"

#: PIL.Image.Image.save:1 of
msgid ""
"Saves this image under the given filename.  If no format is specified, "
"the format to use is determined from the filename extension, if possible."
msgstr "Saves this image under the given filename.  If no format is specified, the format to use is determined from the filename extension, if possible."

#: PIL.Image.Image.save:5 of
msgid ""
"Keyword options can be used to provide additional instructions to the "
"writer. If a writer doesn't recognise an option, it is silently ignored. "
"The available options are described in the :doc:`image format "
"documentation <../handbook/image-file-formats>` for each writer."
msgstr ""

#: PIL.Image.Image.save:11 of
msgid ""
"You can use a file object instead of a filename. In this case, you must "
"always specify the format. The file object must implement the ``seek``, "
"``tell``, and ``write`` methods, and be opened in binary mode."
msgstr ""

#: PIL.Image.Image.save:16 of
msgid "A filename (string), pathlib.Path object or file object."
msgstr "A filename (string), pathlib.Path object or file object."

#: PIL.Image.Image.save:17 of
msgid ""
"Optional format override.  If omitted, the format to use is determined "
"from the filename extension. If a file object was used instead of a "
"filename, this parameter should always be used."
msgstr ""

#: PIL.Image.Image.save:21 of
msgid "Extra parameters to the image writer."
msgstr "Extra parameters to the image writer."

#: PIL.Image.Image.save:22 PIL.Image.Image.thumbnail:33
#: PIL.ImageFile.PyDecoder.cleanup:3 PIL.ImageFile.PyDecoder.init:4
#: PIL.ImageFile.PyDecoder.set_as_raw:6 PIL.ImageFile.PyDecoder.setfd:4
#: PIL.ImageFile.PyDecoder.setimage:6 of
msgid "None"
msgstr "None"

#: PIL.Image.Image.save:23 of
msgid ""
"If the output format could not be determined from the file name.  Use the"
" format option to solve this."
msgstr "If the output format could not be determined from the file name.  Use the format option to solve this."

#: PIL.Image.Image.save:25 of
msgid ""
"If the file could not be written.  The file may have been created, and "
"may contain partial data."
msgstr "If the file could not be written.  The file may have been created, and may contain partial data."

#: PIL.DcxImagePlugin.DcxImageFile.seek:1
#: PIL.FliImagePlugin.FliImageFile.seek:1
#: PIL.GifImagePlugin.GifImageFile.seek:1 PIL.ImImagePlugin.ImImageFile.seek:1
#: PIL.Image.Image.seek:1 PIL.PsdImagePlugin.PsdImageFile.seek:1
#: PIL.SpiderImagePlugin.SpiderImageFile.seek:1
#: PIL.WebPImagePlugin.WebPImageFile.seek:1 of
msgid ""
"Seeks to the given frame in this sequence file. If you seek beyond the "
"end of the sequence, the method raises an **EOFError** exception. When a "
"sequence file is opened, the library automatically seeks to frame 0."
msgstr ""

#: PIL.DcxImagePlugin.DcxImageFile.seek:6
#: PIL.FliImagePlugin.FliImageFile.seek:6
#: PIL.GifImagePlugin.GifImageFile.seek:6 PIL.ImImagePlugin.ImImageFile.seek:6
#: PIL.Image.Image.seek:6 PIL.PsdImagePlugin.PsdImageFile.seek:6
#: PIL.SpiderImagePlugin.SpiderImageFile.seek:6
#: PIL.WebPImagePlugin.WebPImageFile.seek:6 of
msgid "See :py:meth:`~PIL.Image.Image.tell`."
msgstr "See :py:meth:`~PIL.Image.Image.tell`."

#: PIL.DcxImagePlugin.DcxImageFile.seek:8
#: PIL.FliImagePlugin.FliImageFile.seek:8
#: PIL.GifImagePlugin.GifImageFile.seek:8 PIL.ImImagePlugin.ImImageFile.seek:8
#: PIL.Image.Image.seek:8 PIL.PsdImagePlugin.PsdImageFile.seek:8
#: PIL.SpiderImagePlugin.SpiderImageFile.seek:8
#: PIL.WebPImagePlugin.WebPImageFile.seek:8 of
msgid "Frame number, starting at 0."
msgstr "Frame number, starting at 0."

#: PIL.DcxImagePlugin.DcxImageFile.seek:9
#: PIL.FliImagePlugin.FliImageFile.seek:9
#: PIL.GifImagePlugin.GifImageFile.seek:9 PIL.ImImagePlugin.ImImageFile.seek:9
#: PIL.Image.Image.seek:9 PIL.PsdImagePlugin.PsdImageFile.seek:9
#: PIL.SpiderImagePlugin.SpiderImageFile.seek:9
#: PIL.WebPImagePlugin.WebPImageFile.seek:9 of
msgid "If the call attempts to seek beyond the end of the sequence."
msgstr "If the call attempts to seek beyond the end of the sequence."

#: PIL.Image.Image.show:1 of
msgid ""
"Displays this image. This method is mainly intended for debugging "
"purposes."
msgstr "Displays this image. This method is mainly intended for debugging purposes."

#: PIL.Image.Image.show:4 of
msgid ""
"The image is first saved to a temporary file. By default, it will be in "
"PNG format."
msgstr "The image is first saved to a temporary file. By default, it will be in PNG format."

#: PIL.Image.Image.show:7 of
msgid ""
"On Unix, the image is then opened using the **display**, **eog** or "
"**xv** utility, depending on which one can be found."
msgstr "On Unix, the image is then opened using the **display**, **eog** or **xv** utility, depending on which one can be found."

#: PIL.Image.Image.show:10 of
msgid "On macOS, the image is opened with the native Preview application."
msgstr "On macOS, the image is opened with the native Preview application."

#: PIL.Image.Image.show:12 of
msgid "On Windows, the image is opened with the standard PNG display utility."
msgstr "On Windows, the image is opened with the standard PNG display utility."

#: PIL.Image.Image.show:14 of
msgid "Optional title to use for the image window, where possible."
msgstr "Optional title to use for the image window, where possible."

#: PIL.Image.Image.show:16 of
msgid "command used to show the image"
msgstr "command used to show the image"

#: PIL.Image.Image.split:1 of
msgid ""
"Split this image into individual bands. This method returns a tuple of "
"individual image bands from an image. For example, splitting an \"RGB\" "
"image creates three new images each containing a copy of one of the "
"original bands (red, green, blue)."
msgstr ""

#: PIL.Image.Image.split:7 of
msgid ""
"If you need only one band, :py:meth:`~PIL.Image.Image.getchannel` method "
"can be more convenient and faster."
msgstr "If you need only one band, :py:meth:`~PIL.Image.Image.getchannel` method can be more convenient and faster."

#: PIL.Image.Image.split:10 of
msgid "A tuple containing bands."
msgstr "A tuple containing bands."

#: PIL.Image.Image.getchannel:1 of
msgid "Returns an image containing a single channel of the source image."
msgstr "Returns an image containing a single channel of the source image."

#: PIL.Image.Image.getchannel:3 of
msgid ""
"What channel to return. Could be index (0 for \"R\" channel of \"RGB\") "
"or channel name (\"A\" for alpha channel of \"RGBA\")."
msgstr "What channel to return. Could be index (0 for \"R\" channel of \"RGB\") or channel name (\"A\" for alpha channel of \"RGBA\")."

#: PIL.Image.Image.getchannel:6 of
msgid "An image in \"L\" mode."
msgstr "An image in \"L\" mode."

#: PIL.DcxImagePlugin.DcxImageFile.tell:1
#: PIL.FliImagePlugin.FliImageFile.tell:1
#: PIL.GifImagePlugin.GifImageFile.tell:1 PIL.ImImagePlugin.ImImageFile.tell:1
#: PIL.Image.Image.tell:1 PIL.PsdImagePlugin.PsdImageFile.tell:1
#: PIL.SpiderImagePlugin.SpiderImageFile.tell:1
#: PIL.WebPImagePlugin.WebPImageFile.tell:1 of
msgid "Returns the current frame number. See :py:meth:`~PIL.Image.Image.seek`."
msgstr "Returns the current frame number. See :py:meth:`~PIL.Image.Image.seek`."

#: PIL.DcxImagePlugin.DcxImageFile.tell:3
#: PIL.FliImagePlugin.FliImageFile.tell:3
#: PIL.GifImagePlugin.GifImageFile.tell:3 PIL.ImImagePlugin.ImImageFile.tell:3
#: PIL.Image.Image.tell:3 PIL.PsdImagePlugin.PsdImageFile.tell:3
#: PIL.SpiderImagePlugin.SpiderImageFile.tell:3
#: PIL.WebPImagePlugin.WebPImageFile.tell:3 of
msgid "Frame number, starting with 0."
msgstr "Frame number, starting with 0."

#: PIL.Image.Image.thumbnail:1 of
msgid ""
"Make this image into a thumbnail.  This method modifies the image to "
"contain a thumbnail version of itself, no larger than the given size.  "
"This method calculates an appropriate thumbnail size to preserve the "
"aspect of the image, calls the :py:meth:`~PIL.Image.Image.draft` method "
"to configure the file reader (where applicable), and finally resizes the "
"image."
msgstr ""

#: PIL.Image.Image.thumbnail:8 of
msgid ""
"Note that this function modifies the :py:class:`~PIL.Image.Image` object "
"in place.  If you need to use the full resolution image as well, apply "
"this method to a :py:meth:`~PIL.Image.Image.copy` of the original image."
msgstr ""

#: PIL.Image.Image.thumbnail:13 of
msgid "Requested size."
msgstr "Requested size."

#: PIL.Image.Image.thumbnail:14 of
msgid ""
"Optional resampling filter.  This can be one of "
":py:attr:`PIL.Image.NEAREST`, :py:attr:`PIL.Image.BILINEAR`, "
":py:attr:`PIL.Image.BICUBIC`, or :py:attr:`PIL.Image.LANCZOS`. If "
"omitted, it defaults to :py:attr:`PIL.Image.BICUBIC`. (was "
":py:attr:`PIL.Image.NEAREST` prior to version 2.5.0)."
msgstr ""

#: PIL.Image.Image.thumbnail:19 of
msgid ""
"Apply optimization by resizing the image in two steps. First, reducing "
"the image by integer times using :py:meth:`~PIL.Image.Image.reduce` or "
":py:meth:`~PIL.Image.Image.draft` for JPEG images. Second, resizing using"
" regular resampling. The last step changes size no less than by "
"``reducing_gap`` times. ``reducing_gap`` may be None (no first step is "
"performed) or should be greater than 1.0. The bigger ``reducing_gap``, "
"the closer the result to the fair resampling. The smaller "
"``reducing_gap``, the faster resizing. With ``reducing_gap`` greater or "
"equal to 3.0, the result is indistinguishable from fair resampling in "
"most cases. The default value is 2.0 (very close to fair resampling while"
" still being faster in many cases)."
msgstr ""

#: PIL.Image.Image.tobitmap:1 of
msgid "Returns the image converted to an X11 bitmap."
msgstr "Returns the image converted to an X11 bitmap."

#: PIL.Image.Image.tobitmap:3 of
msgid "This method only works for mode \"1\" images."
msgstr "This method only works for mode \"1\" images."

#: PIL.Image.Image.tobitmap:5 of
msgid "The name prefix to use for the bitmap variables."
msgstr "The name prefix to use for the bitmap variables."

#: PIL.Image.Image.tobitmap:6 of
msgid "A string containing an X11 bitmap."
msgstr "A string containing an X11 bitmap."

#: PIL.Image.Image.tobitmap:7 of
msgid "If the mode is not \"1\""
msgstr "If the mode is not \"1\""

#: PIL.Image.Image.tobytes:1 of
msgid "Return image as a bytes object."
msgstr "Return image as a bytes object."

#: PIL.Image.Image.tobytes:5 of
msgid ""
"This method returns the raw image data from the internal storage.  For "
"compressed image data (e.g. PNG, JPEG) use :meth:`~.save`, with a BytesIO"
" parameter for in-memory data."
msgstr ""

#: PIL.Image.Image.tobytes:10 of
msgid "What encoder to use.  The default is to use the standard \"raw\" encoder."
msgstr "What encoder to use.  The default is to use the standard \"raw\" encoder."

#: PIL.Image.Image.tobytes:12 of
msgid "Extra arguments to the encoder."
msgstr "Extra arguments to the encoder."

#: PIL.Image.Image.transform:1 of
msgid ""
"Transforms this image.  This method creates a new image with the given "
"size, and the same mode as the original, and copies data to the new image"
" using the given transform."
msgstr ""

#: PIL.Image.Image.transform:5 of
msgid "The output size."
msgstr "The output size."

#: PIL.Image.Image.transform:6 of
msgid ""
"The transformation method.  This is one of :py:attr:`PIL.Image.EXTENT` "
"(cut out a rectangular subregion), :py:attr:`PIL.Image.AFFINE` (affine "
"transform), :py:attr:`PIL.Image.PERSPECTIVE` (perspective transform), "
":py:attr:`PIL.Image.QUAD` (map a quadrilateral to a rectangle), or "
":py:attr:`PIL.Image.MESH` (map a number of source quadrilaterals in one "
"operation).  It may also be an "
":py:class:`~PIL.Image.ImageTransformHandler` object::    class "
"Example(Image.ImageTransformHandler):       def transform(size, method, "
"data, resample, fill=1):           # Return result  It may also be an "
"object with a :py:meth:`~method.getdata` method that returns a tuple "
"supplying new **method** and **data** values::    class Example(object):"
"       def getdata(self):           method = Image.EXTENT           data "
"= (0, 0, 100, 100)           return method, data"
msgstr ""

#: PIL.Image.Image.transform:6 of
msgid ""
"The transformation method.  This is one of :py:attr:`PIL.Image.EXTENT` "
"(cut out a rectangular subregion), :py:attr:`PIL.Image.AFFINE` (affine "
"transform), :py:attr:`PIL.Image.PERSPECTIVE` (perspective transform), "
":py:attr:`PIL.Image.QUAD` (map a quadrilateral to a rectangle), or "
":py:attr:`PIL.Image.MESH` (map a number of source quadrilaterals in one "
"operation)."
msgstr ""

#: PIL.Image.Image.transform:14 of
msgid "It may also be an :py:class:`~PIL.Image.ImageTransformHandler` object::"
msgstr "It may also be an :py:class:`~PIL.Image.ImageTransformHandler` object::"

#: PIL.Image.Image.transform:21 of
msgid ""
"It may also be an object with a :py:meth:`~method.getdata` method that "
"returns a tuple supplying new **method** and **data** values::"
msgstr "It may also be an object with a :py:meth:`~method.getdata` method that returns a tuple supplying new **method** and **data** values::"

#: PIL.Image.Image.transform:29 of
msgid "Extra data to the transformation method."
msgstr "Extra data to the transformation method."

#: PIL.Image.Image.transform:30 of
msgid ""
"Optional resampling filter.  It can be one of "
":py:attr:`PIL.Image.NEAREST` (use nearest neighbour), "
":py:attr:`PIL.Image.BILINEAR` (linear interpolation in a 2x2 "
"environment), or :py:attr:`PIL.Image.BICUBIC` (cubic spline interpolation"
" in a 4x4 environment). If omitted, or if the image has mode \"1\" or "
"\"P\", it is set to :py:attr:`PIL.Image.NEAREST`."
msgstr ""

#: PIL.Image.Image.transform:36 of
msgid ""
"If **method** is an :py:class:`~PIL.Image.ImageTransformHandler` object, "
"this is one of the arguments passed to it. Otherwise, it is unused."
msgstr "If **method** is an :py:class:`~PIL.Image.ImageTransformHandler` object, this is one of the arguments passed to it. Otherwise, it is unused."

#: PIL.Image.Image.transform:39 of
msgid ""
"Optional fill color for the area outside the transform in the output "
"image."
msgstr "Optional fill color for the area outside the transform in the output image."

#: PIL.Image.Image.transpose:1 of
msgid "Transpose image (flip or rotate in 90 degree steps)"
msgstr "Transpose image (flip or rotate in 90 degree steps)"

#: PIL.Image.Image.transpose:3 of
msgid ""
"One of :py:attr:`PIL.Image.FLIP_LEFT_RIGHT`, "
":py:attr:`PIL.Image.FLIP_TOP_BOTTOM`, :py:attr:`PIL.Image.ROTATE_90`, "
":py:attr:`PIL.Image.ROTATE_180`, :py:attr:`PIL.Image.ROTATE_270`, "
":py:attr:`PIL.Image.TRANSPOSE` or :py:attr:`PIL.Image.TRANSVERSE`."
msgstr ""

#: PIL.Image.Image.transpose:7 of
msgid "Returns a flipped or rotated copy of this image."
msgstr "Returns a flipped or rotated copy of this image."

#: ../../reference/Image.rst:236
msgid "This flips the input image by using the ``Image.FLIP_LEFT_RIGHT`` method."
msgstr "This flips the input image by using the ``Image.FLIP_LEFT_RIGHT`` method."

#: PIL.Image.Image.verify:1 of
msgid ""
"Verifies the contents of a file. For data read from a file, this method "
"attempts to determine if the file is broken, without actually decoding "
"the image data.  If this method finds any problems, it raises suitable "
"exceptions.  If you need to load the image after using this method, you "
"must reopen the image file."
msgstr ""

#: PIL.Image.Image.load:1 of
msgid ""
"Allocates storage for the image and loads the pixel data.  In normal "
"cases, you don't need to call this method, since the Image class "
"automatically loads an opened image when it is accessed for the first "
"time."
msgstr ""

#: PIL.Image.Image.load:6 of
msgid ""
"If the file associated with the image was opened by Pillow, then this "
"method will close it. The exception to this is if the image has multiple "
"frames, in which case the file will be left open for seek operations. See"
" :ref:`file-handling` for more information."
msgstr ""

#: PIL.Image.Image.load:11 of
msgid "An image access object."
msgstr "An image access object."

#: PIL.Image.Image.load:12 of
msgid ":ref:`PixelAccess` or :py:class:`PIL.PyAccess`"
msgstr ":ref:`PixelAccess` or :py:class:`PIL.PyAccess`"

#: PIL.Image.Image.close:1 of
msgid "Closes the file pointer, if possible."
msgstr "Closes the file pointer, if possible."

#: PIL.Image.Image.close:3 of
msgid ""
"This operation will destroy the image core and release its memory. The "
"image data will be unusable afterward."
msgstr "This operation will destroy the image core and release its memory. The image data will be unusable afterward."

#: PIL.Image.Image.close:6 of
msgid ""
"This function is only required to close images that have not had their "
"file read and closed by the :py:meth:`~PIL.Image.Image.load` method. See "
":ref:`file-handling` for more information."
msgstr ""

#: ../../reference/Image.rst:258
msgid "Attributes"
msgstr "Attributes"

#: ../../reference/Image.rst:260
msgid "Instances of the :py:class:`Image` class have the following attributes:"
msgstr "Instances of the :py:class:`Image` class have the following attributes:"

#: ../../reference/Image.rst:264
msgid ""
"The filename or path of the source file. Only images created with the "
"factory function ``open`` have a filename attribute. If the input is a "
"file like object, the filename attribute is set to an empty string."
msgstr ""

#: ../../reference/Image.rst ../../reference/ImageCms.rst
msgid "type"
msgstr "type"

#: ../../reference/Image.rst:268 ../../reference/Image.rst:284
#: ../../reference/ImageCms.rst:50 ../../reference/ImageCms.rst:62
#: ../../reference/ImageCms.rst:73 ../../reference/ImageCms.rst:89
#: ../../reference/ImageCms.rst:98 ../../reference/ImageCms.rst:356
#: ../../reference/ImageCms.rst:364 ../../reference/ImageCms.rst:371
#: ../../reference/ImageCms.rst:378 ../../reference/ImageCms.rst:385
#: ../../reference/ImageCms.rst:392 ../../reference/ImageCms.rst:404
msgid ":py:class:`string`"
msgstr ":py:class:`string`"

#: ../../reference/Image.rst:272
msgid ""
"The file format of the source file. For images created by the library "
"itself (via a factory function, or by running a method on an existing "
"image), this attribute is set to ``None``."
msgstr ""

#: ../../reference/Image.rst:276 ../../reference/ImageCms.rst:228
#: ../../reference/ImageCms.rst:236 ../../reference/ImageCms.rst:244
#: ../../reference/ImageCms.rst:251
msgid ":py:class:`string` or ``None``"
msgstr ":py:class:`string` or ``None``"

#: ../../reference/Image.rst:280
msgid ""
"Image mode. This is a string specifying the pixel format used by the "
"image. Typical values are “1”, “L”, “RGB”, or “CMYK.” See :ref:`concept-"
"modes` for a full list."
msgstr ""

#: ../../reference/Image.rst:288
msgid "Image size, in pixels. The size is given as a 2-tuple (width, height)."
msgstr "Image size, in pixels. The size is given as a 2-tuple (width, height)."

#: ../../reference/Image.rst:290
msgid "``(width, height)``"
msgstr "``(width, height)``"

#: ../../reference/Image.rst:294
msgid "Image width, in pixels."
msgstr "Image width, in pixels."

#: ../../reference/Image.rst:296 ../../reference/Image.rst:302
#: ../../reference/ImageCms.rst:80 ../../reference/ImageCms.rst:106
#: ../../reference/ImageCms.rst:117
msgid ":py:class:`int`"
msgstr ":py:class:`int`"

#: ../../reference/Image.rst:300
msgid "Image height, in pixels."
msgstr "Image height, in pixels."

#: ../../reference/Image.rst:306
msgid ""
"Colour palette table, if any. If mode is \"P\" or \"PA\", this should be "
"an instance of the :py:class:`~PIL.ImagePalette.ImagePalette` class. "
"Otherwise, it should be set to ``None``."
msgstr ""

#: ../../reference/Image.rst:310
msgid ":py:class:`~PIL.ImagePalette.ImagePalette` or ``None``"
msgstr ":py:class:`~PIL.ImagePalette.ImagePalette` or ``None``"

#: ../../reference/Image.rst:314
msgid ""
"A dictionary holding data associated with the image. This dictionary is "
"used by file handlers to pass on various non-image information read from "
"the file. See documentation for the various file handlers for details."
msgstr ""

#: ../../reference/Image.rst:318
msgid ""
"Most methods ignore the dictionary when returning new images; since the "
"keys are not standardized, it’s not possible for a method to know if the "
"operation affects the dictionary. If you need the information later on, "
"keep a reference to the info dictionary returned from the open method."
msgstr ""

#: ../../reference/Image.rst:323
msgid "Unless noted elsewhere, this dictionary does not affect saving files."
msgstr "Unless noted elsewhere, this dictionary does not affect saving files."

#: ../../reference/Image.rst:325
msgid ":py:class:`dict`"
msgstr ":py:class:`dict`"

#: ../../reference/ImageChops.rst:5
msgid ":py:mod:`ImageChops` (\"Channel Operations\") Module"
msgstr ":py:mod:`ImageChops` (\"Channel Operations\") Module"

#: ../../reference/ImageChops.rst:7
msgid ""
"The :py:mod:`ImageChops` module contains a number of arithmetical image "
"operations, called channel operations (“chops”). These can be used for "
"various purposes, including special effects, image compositions, "
"algorithmic painting, and more."
msgstr ""

#: ../../reference/ImageChops.rst:12
msgid "For more pre-made operations, see :py:mod:`ImageOps`."
msgstr "For more pre-made operations, see :py:mod:`ImageOps`."

#: ../../reference/ImageChops.rst:14
msgid ""
"At this time, most channel operations are only implemented for 8-bit "
"images (e.g. “L” and “RGB”)."
msgstr "At this time, most channel operations are only implemented for 8-bit images (e.g. “L” and “RGB”)."

#: ../../reference/ImageChops.rst:20
msgid ""
"Most channel operations take one or two image arguments and returns a new"
" image. Unless otherwise noted, the result of a channel operation is "
"always clipped to the range 0 to MAX (which is 255 for all modes "
"supported by the operations in this module)."
msgstr ""

#: PIL.ImageChops.add:1 of
msgid ""
"Adds two images, dividing the result by scale and adding the offset. If "
"omitted, scale defaults to 1.0, and offset to 0.0. At least one of the "
"images must have mode \"1\"."
msgstr ""

#: PIL.ImageChops.add_modulo:1 of
msgid ""
"Add two images, without clipping the result. At least one of the images "
"must have mode \"1\"."
msgstr "Add two images, without clipping the result. At least one of the images must have mode \"1\"."

#: PIL.ImageChops.blend:1 of
msgid ""
"Blend images using constant transparency weight. Alias for "
":py:meth:`PIL.Image.Image.blend`."
msgstr "Blend images using constant transparency weight. Alias for :py:meth:`PIL.Image.Image.blend`."

#: PIL.ImageChops.composite:1 of
msgid ""
"Create composite using transparency mask. Alias for "
":py:meth:`PIL.Image.Image.composite`."
msgstr "Create composite using transparency mask. Alias for :py:meth:`PIL.Image.Image.composite`."

#: PIL.ImageChops.constant:1 of
msgid "Fill a channel with a given grey level."
msgstr "Fill a channel with a given grey level."

#: PIL.ImageChops.darker:1 of
msgid ""
"Compares the two images, pixel by pixel, and returns a new image "
"containing the darker values. At least one of the images must have mode "
"\"1\"."
msgstr ""

#: PIL.ImageChops.difference:1 of
msgid ""
"Returns the absolute value of the pixel-by-pixel difference between the "
"two images. At least one of the images must have mode \"1\"."
msgstr "Returns the absolute value of the pixel-by-pixel difference between the two images. At least one of the images must have mode \"1\"."

#: PIL.ImageChops.duplicate:1 of
msgid "Copy a channel. Alias for :py:meth:`PIL.Image.Image.copy`."
msgstr "Copy a channel. Alias for :py:meth:`PIL.Image.Image.copy`."

#: PIL.ImageChops.invert:1 of
msgid "Invert an image (channel)."
msgstr "Invert an image (channel)."

#: PIL.ImageChops.lighter:1 of
msgid ""
"Compares the two images, pixel by pixel, and returns a new image "
"containing the lighter values. At least one of the images must have mode "
"\"1\"."
msgstr ""

#: PIL.ImageChops.logical_and:1 of
msgid ""
"Logical AND between two images. At least one of the images must have mode"
" \"1\"."
msgstr "Logical AND between two images. At least one of the images must have mode \"1\"."

#: PIL.ImageChops.logical_or:1 of
msgid ""
"Logical OR between two images. At least one of the images must have mode "
"\"1\"."
msgstr "Logical OR between two images. At least one of the images must have mode \"1\"."

#: PIL.ImageChops.logical_xor:1 of
msgid ""
"Logical XOR between two images. At least one of the images must have mode"
" \"1\"."
msgstr "Logical XOR between two images. At least one of the images must have mode \"1\"."

#: PIL.ImageChops.multiply:1 of
msgid "Superimposes two images on top of each other."
msgstr "Superimposes two images on top of each other."

#: PIL.ImageChops.multiply:3 of
msgid ""
"If you multiply an image with a solid black image, the result is black. "
"If you multiply with a solid white image, the image is unaffected. At "
"least one of the images must have mode \"1\"."
msgstr ""

#: ../../reference/ImageChops.rst:41
msgid ""
"Returns a copy of the image where data has been offset by the given "
"distances. Data wraps around the edges. If **yoffset** is omitted, it is "
"assumed to be equal to **xoffset**."
msgstr ""

#: PIL.ImageChops.screen:1 of
msgid ""
"Superimposes two inverted images on top of each other. At least one of "
"the images must have mode \"1\"."
msgstr "Superimposes two inverted images on top of each other. At least one of the images must have mode \"1\"."

#: PIL.ImageChops.subtract:1 of
msgid ""
"Subtracts two images, dividing the result by scale and adding the offset."
" If omitted, scale defaults to 1.0, and offset to 0.0. At least one of "
"the images must have mode \"1\"."
msgstr ""

#: PIL.ImageChops.subtract_modulo:1 of
msgid ""
"Subtract two images, without clipping the result. At least one of the "
"images must have mode \"1\"."
msgstr "Subtract two images, without clipping the result. At least one of the images must have mode \"1\"."

#: ../../reference/ImageCms.rst:5
msgid ":py:mod:`ImageCms` Module"
msgstr ":py:mod:`ImageCms` Module"

#: ../../reference/ImageCms.rst:7
msgid ""
"The :py:mod:`ImageCms` module provides color profile management support "
"using the LittleCMS2 color management engine, based on Kevin Cazabon's "
"PyCMS library."
msgstr ""

#: PIL.ImageCms.ImageCmsTransform:1 of
msgid ""
"Transform.  This can be used with the procedural API, or with the "
"standard Image.point() method."
msgstr "Transform.  This can be used with the procedural API, or with the standard Image.point() method."

#: PIL.ImageCms.ImageCmsTransform:4 of
msgid "Will return the output profile in the output.info['icc_profile']."
msgstr "Will return the output profile in the output.info['icc_profile']."

#: PIL.ImageCms.PyCMSError:1 of
msgid "(pyCMS) Exception class. This is used for all errors in the pyCMS API."
msgstr "(pyCMS) Exception class. This is used for all errors in the pyCMS API."

#: PIL.ImageCms.applyTransform:1 of
msgid "(pyCMS) Applies a transform to a given image."
msgstr "(pyCMS) Applies a transform to a given image."

#: PIL.ImageCms.applyTransform:3 of
msgid "If im.mode != transform.inMode, a PyCMSError is raised."
msgstr "If im.mode != transform.inMode, a PyCMSError is raised."

#: PIL.ImageCms.applyTransform:5 of
msgid ""
"If inPlace is True and transform.inMode != transform.outMode, a "
"PyCMSError is raised."
msgstr "If inPlace is True and transform.inMode != transform.outMode, a PyCMSError is raised."

#: PIL.ImageCms.applyTransform:8 of
msgid ""
"If im.mode, transform.inMode, or transform.outMode is not supported by "
"pyCMSdll or the profiles you used for the transform, a PyCMSError is "
"raised."
msgstr ""

#: PIL.ImageCms.applyTransform:12 of
msgid ""
"If an error occurs while the transform is being applied, a PyCMSError is "
"raised."
msgstr "If an error occurs while the transform is being applied, a PyCMSError is raised."

#: PIL.ImageCms.applyTransform:15 of
msgid ""
"This function applies a pre-calculated transform (from "
"ImageCms.buildTransform() or ImageCms.buildTransformFromOpenProfiles()) "
"to an image.  The transform can be used for multiple images, saving "
"considerable calculation time if doing the same conversion multiple "
"times."
msgstr ""

#: PIL.ImageCms.applyTransform:20 of
msgid ""
"If you want to modify im in-place instead of receiving a new image as the"
" return value, set inPlace to True.  This can only be done if "
"transform.inMode and transform.outMode are the same, because we can't "
"change the mode in-place (the buffer sizes for some modes are different)."
"  The  default behavior is to return a new Image object of the same "
"dimensions in mode transform.outMode."
msgstr ""

#: PIL.ImageCms.applyTransform:27 of
msgid ""
"A PIL Image object, and im.mode must be the same as the inMode supported "
"by the transform."
msgstr "A PIL Image object, and im.mode must be the same as the inMode supported by the transform."

#: PIL.ImageCms.applyTransform:29 of
msgid "A valid CmsTransform class object"
msgstr "A valid CmsTransform class object"

#: PIL.ImageCms.applyTransform:30 of
msgid ""
"Bool.  If True, im is modified in place and None is returned, if False, a"
" new Image object with the transform applied is returned (and im is not "
"changed). The default is False."
msgstr ""

#: PIL.ImageCms.applyTransform:33 of
msgid ""
"Either None, or a new PIL Image object, depending on the value of "
"inPlace. The profile will be returned in the image's info['icc_profile']."
msgstr "Either None, or a new PIL Image object, depending on the value of inPlace. The profile will be returned in the image's info['icc_profile']."

#: PIL.ImageCms.buildProofTransform:1
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:1 of
msgid ""
"(pyCMS) Builds an ICC transform mapping from the inputProfile to the "
"outputProfile, but tries to simulate the result that would be obtained on"
" the proofProfile device."
msgstr ""

#: PIL.ImageCms.buildProofTransform:5
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:5 of
msgid ""
"If the input, output, or proof profiles specified are not valid "
"filenames, a PyCMSError will be raised."
msgstr "If the input, output, or proof profiles specified are not valid filenames, a PyCMSError will be raised."

#: PIL.ImageCms.buildProofTransform:8
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:8 of
msgid ""
"If an error occurs during creation of the transform, a PyCMSError will be"
" raised."
msgstr "If an error occurs during creation of the transform, a PyCMSError will be raised."

#: PIL.ImageCms.buildProofTransform:11
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:11
#: PIL.ImageCms.buildTransform:9 PIL.ImageCms.buildTransformFromOpenProfiles:9
#: of
msgid ""
"If inMode or outMode are not a mode supported by the outputProfile (or by"
" pyCMS), a PyCMSError will be raised."
msgstr "If inMode or outMode are not a mode supported by the outputProfile (or by pyCMS), a PyCMSError will be raised."

#: PIL.ImageCms.buildProofTransform:14
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:14 of
msgid ""
"This function builds and returns an ICC transform from the inputProfile "
"to the outputProfile, but tries to simulate the result that would be "
"obtained on the proofProfile device using renderingIntent and "
"proofRenderingIntent to determine what to do with out-of-gamut colors.  "
"This is known as \"soft-proofing\".  It will ONLY work for converting "
"images that are in inMode to images that are in outMode color format (PIL"
" mode, i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.)."
msgstr ""

#: PIL.ImageCms.buildProofTransform:22
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:22 of
msgid ""
"Usage of the resulting transform object is exactly the same as with "
"ImageCms.buildTransform()."
msgstr "Usage of the resulting transform object is exactly the same as with ImageCms.buildTransform()."

#: PIL.ImageCms.buildProofTransform:25
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:25 of
msgid ""
"Proof profiling is generally used when using an output device to get a "
"good idea of what the final printed/displayed image would look like on "
"the proofProfile device when it's quicker and easier to use the output "
"device for judging color.  Generally, this means that the output device "
"is a monitor, or a dye-sub printer (etc.), and the simulated device is "
"something more expensive, complicated, or time consuming (making it "
"difficult to make a real print for color judgement purposes)."
msgstr ""

#: PIL.ImageCms.buildProofTransform:33
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:33 of
msgid ""
"Soft-proofing basically functions by adjusting the colors on the output "
"device to match the colors of the device being simulated. However, when "
"the simulated device has a much wider gamut than the output device, you "
"may obtain marginal results."
msgstr ""

#: PIL.ImageCms.buildProofTransform:38
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:38
#: PIL.ImageCms.buildTransform:32
#: PIL.ImageCms.buildTransformFromOpenProfiles:32 of
msgid ""
"String, as a valid filename path to the ICC input profile you wish to use"
" for this transform, or a profile object"
msgstr "String, as a valid filename path to the ICC input profile you wish to use for this transform, or a profile object"

#: PIL.ImageCms.buildProofTransform:40
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:40 of
msgid ""
"String, as a valid filename path to the ICC output (monitor, usually) "
"profile you wish to use for this transform, or a profile object"
msgstr "String, as a valid filename path to the ICC output (monitor, usually) profile you wish to use for this transform, or a profile object"

#: PIL.ImageCms.buildProofTransform:43
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:43 of
msgid ""
"String, as a valid filename path to the ICC proof profile you wish to use"
" for this transform, or a profile object"
msgstr "String, as a valid filename path to the ICC proof profile you wish to use for this transform, or a profile object"

#: PIL.ImageCms.buildProofTransform:45 PIL.ImageCms.buildProofTransform:47
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:45
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:47
#: PIL.ImageCms.buildTransform:36 PIL.ImageCms.buildTransform:38
#: PIL.ImageCms.buildTransformFromOpenProfiles:36
#: PIL.ImageCms.buildTransformFromOpenProfiles:38 of
msgid ""
"String, as a valid PIL mode that the appropriate profile also supports "
"(i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.)"
msgstr "String, as a valid PIL mode that the appropriate profile also supports (i.e. \"RGB\", \"RGBA\", \"CMYK\", etc.)"

#: PIL.ImageCms.buildProofTransform:49
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:49 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use for the "
"input->proof (simulated) transform      ImageCms.INTENT_PERCEPTUAL"
"            = 0 (DEFAULT)     ImageCms.INTENT_RELATIVE_COLORIMETRIC = 1"
"     ImageCms.INTENT_SATURATION            = 2     "
"ImageCms.INTENT_ABSOLUTE_COLORIMETRIC = 3  see the pyCMS documentation "
"for details on rendering intents and what they do."
msgstr ""

#: PIL.ImageCms.buildProofTransform:49
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:49 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use for the "
"input->proof (simulated) transform"
msgstr "Integer (0-3) specifying the rendering intent you wish to use for the input->proof (simulated) transform"

#: PIL.ImageCms.buildProofTransform:52 PIL.ImageCms.buildProofTransform:62
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:52
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:62
#: PIL.ImageCms.buildTransform:43
#: PIL.ImageCms.buildTransformFromOpenProfiles:43
#: PIL.ImageCms.getDefaultIntent:20 PIL.ImageCms.isIntentSupported:19
#: PIL.ImageCms.profileToProfile:30 of
msgid ""
"ImageCms.INTENT_PERCEPTUAL            = 0 (DEFAULT) "
"ImageCms.INTENT_RELATIVE_COLORIMETRIC = 1 ImageCms.INTENT_SATURATION"
"            = 2 ImageCms.INTENT_ABSOLUTE_COLORIMETRIC = 3"
msgstr ""

#: PIL.ImageCms.buildProofTransform:57 PIL.ImageCms.buildProofTransform:67
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:57
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:67
#: PIL.ImageCms.buildTransform:48
#: PIL.ImageCms.buildTransformFromOpenProfiles:48
#: PIL.ImageCms.profileToProfile:35 of
msgid ""
"see the pyCMS documentation for details on rendering intents and what "
"they do."
msgstr "see the pyCMS documentation for details on rendering intents and what they do."

#: PIL.ImageCms.buildProofTransform:59
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:59 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use for "
"proof->output transform      ImageCms.INTENT_PERCEPTUAL            = 0 "
"(DEFAULT)     ImageCms.INTENT_RELATIVE_COLORIMETRIC = 1     "
"ImageCms.INTENT_SATURATION            = 2     "
"ImageCms.INTENT_ABSOLUTE_COLORIMETRIC = 3  see the pyCMS documentation "
"for details on rendering intents and what they do."
msgstr ""

#: PIL.ImageCms.buildProofTransform:59
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:59 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use for "
"proof->output transform"
msgstr "Integer (0-3) specifying the rendering intent you wish to use for proof->output transform"

#: PIL.ImageCms.buildProofTransform:69
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:69
#: PIL.ImageCms.buildTransform:50
#: PIL.ImageCms.buildTransformFromOpenProfiles:50
#: PIL.ImageCms.profileToProfile:45 of
msgid "Integer (0-...) specifying additional flags"
msgstr "Integer (0-...) specifying additional flags"

#: PIL.ImageCms.buildProofTransform:70
#: PIL.ImageCms.buildProofTransformFromOpenProfiles:70
#: PIL.ImageCms.buildTransform:51
#: PIL.ImageCms.buildTransformFromOpenProfiles:51 of
msgid "A CmsTransform class object."
msgstr "A CmsTransform class object."

#: PIL.ImageCms.buildTransform:1 PIL.ImageCms.buildTransformFromOpenProfiles:1
#: of
msgid ""
"(pyCMS) Builds an ICC transform mapping from the inputProfile to the "
"outputProfile.  Use applyTransform to apply the transform to a given "
"image."
msgstr ""

#: PIL.ImageCms.buildTransform:5 PIL.ImageCms.buildTransformFromOpenProfiles:5
#: of
msgid ""
"If the input or output profiles specified are not valid filenames, a "
"PyCMSError will be raised.  If an error occurs during creation of the "
"transform, a PyCMSError will be raised."
msgstr ""

#: PIL.ImageCms.buildTransform:12
#: PIL.ImageCms.buildTransformFromOpenProfiles:12 of
msgid ""
"This function builds and returns an ICC transform from the inputProfile "
"to the outputProfile using the renderingIntent to determine what to do "
"with out-of-gamut colors.  It will ONLY work for converting images that "
"are in inMode to images that are in outMode color format (PIL mode, i.e. "
"\"RGB\", \"RGBA\", \"CMYK\", etc.)."
msgstr ""

#: PIL.ImageCms.buildTransform:18
#: PIL.ImageCms.buildTransformFromOpenProfiles:18 of
msgid ""
"Building the transform is a fair part of the overhead in "
"ImageCms.profileToProfile(), so if you're planning on converting multiple"
" images using the same input/output settings, this can save you time. "
"Once you have a transform object, it can be used with "
"ImageCms.applyProfile() to convert images without the need to re-compute "
"the lookup table for the transform."
msgstr ""

#: PIL.ImageCms.buildTransform:25
#: PIL.ImageCms.buildTransformFromOpenProfiles:25 of
msgid ""
"The reason pyCMS returns a class object rather than a handle directly to "
"the transform is that it needs to keep track of the PIL input/output "
"modes that the transform is meant for.  These attributes are stored in "
"the \"inMode\" and \"outMode\" attributes of the object (which can be "
"manually overridden if you really want to, but I don't know of any time "
"that would be of use, or would even work)."
msgstr ""

#: PIL.ImageCms.buildTransform:34
#: PIL.ImageCms.buildTransformFromOpenProfiles:34 of
msgid ""
"String, as a valid filename path to the ICC output profile you wish to "
"use for this transform, or a profile object"
msgstr "String, as a valid filename path to the ICC output profile you wish to use for this transform, or a profile object"

#: PIL.ImageCms.buildTransform:40
#: PIL.ImageCms.buildTransformFromOpenProfiles:40
#: PIL.ImageCms.profileToProfile:27 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use for the "
"transform      ImageCms.INTENT_PERCEPTUAL            = 0 (DEFAULT)     "
"ImageCms.INTENT_RELATIVE_COLORIMETRIC = 1     ImageCms.INTENT_SATURATION"
"            = 2     ImageCms.INTENT_ABSOLUTE_COLORIMETRIC = 3  see the "
"pyCMS documentation for details on rendering intents and what they do."
msgstr ""

#: PIL.ImageCms.buildTransform:40
#: PIL.ImageCms.buildTransformFromOpenProfiles:40
#: PIL.ImageCms.profileToProfile:27 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use for the "
"transform"
msgstr "Integer (0-3) specifying the rendering intent you wish to use for the transform"

#: PIL.ImageCms.createProfile:1 of
msgid "(pyCMS) Creates a profile."
msgstr "(pyCMS) Creates a profile."

#: PIL.ImageCms.createProfile:3 of
msgid "If colorSpace not in [\"LAB\", \"XYZ\", \"sRGB\"], a PyCMSError is raised"
msgstr "If colorSpace not in [\"LAB\", \"XYZ\", \"sRGB\"], a PyCMSError is raised"

#: PIL.ImageCms.createProfile:5 of
msgid "If using LAB and colorTemp != a positive integer, a PyCMSError is raised."
msgstr "If using LAB and colorTemp != a positive integer, a PyCMSError is raised."

#: PIL.ImageCms.createProfile:7 of
msgid "If an error occurs while creating the profile, a PyCMSError is raised."
msgstr "If an error occurs while creating the profile, a PyCMSError is raised."

#: PIL.ImageCms.createProfile:9 of
msgid ""
"Use this function to create common profiles on-the-fly instead of having "
"to supply a profile on disk and knowing the path to it.  It returns a "
"normal CmsProfile object that can be passed to "
"ImageCms.buildTransformFromOpenProfiles() to create a transform to apply "
"to images."
msgstr ""

#: PIL.ImageCms.createProfile:15 of
msgid ""
"String, the color space of the profile you wish to create. Currently only"
" \"LAB\", \"XYZ\", and \"sRGB\" are supported."
msgstr "String, the color space of the profile you wish to create. Currently only \"LAB\", \"XYZ\", and \"sRGB\" are supported."

#: PIL.ImageCms.createProfile:18 of
msgid ""
"Positive integer for the white point for the profile, in degrees Kelvin "
"(i.e. 5000, 6500, 9600, etc.).  The default is for D50 illuminant if "
"omitted (5000k).  colorTemp is ONLY applied to LAB profiles, and is "
"ignored for XYZ and sRGB."
msgstr ""

#: PIL.ImageCms.createProfile:22 of
msgid "A CmsProfile class object"
msgstr "A CmsProfile class object"

#: PIL.ImageCms.getDefaultIntent:1 of
msgid "(pyCMS) Gets the default intent name for the given profile."
msgstr "(pyCMS) Gets the default intent name for the given profile."

#: PIL.ImageCms.getDefaultIntent:3 PIL.ImageCms.getProfileCopyright:3
#: PIL.ImageCms.getProfileDescription:3 PIL.ImageCms.getProfileInfo:3
#: PIL.ImageCms.getProfileManufacturer:3 PIL.ImageCms.getProfileModel:3 of
msgid ""
"If profile isn't a valid CmsProfile object or filename to a profile, a "
"PyCMSError is raised."
msgstr "If profile isn't a valid CmsProfile object or filename to a profile, a PyCMSError is raised."

#: PIL.ImageCms.getDefaultIntent:6 of
msgid ""
"If an error occurs while trying to obtain the default intent, a "
"PyCMSError is raised."
msgstr "If an error occurs while trying to obtain the default intent, a PyCMSError is raised."

#: PIL.ImageCms.getDefaultIntent:9 of
msgid ""
"Use this function to determine the default (and usually best optimized) "
"rendering intent for this profile.  Most profiles support multiple "
"rendering intents, but are intended mostly for one type of conversion. If"
" you wish to use a different intent than returned, use "
"ImageCms.isIntentSupported() to verify it will work first."
msgstr ""

#: PIL.ImageCms.getDefaultIntent:15 PIL.ImageCms.getProfileCopyright:12
#: PIL.ImageCms.getProfileDescription:12 PIL.ImageCms.getProfileInfo:13
#: PIL.ImageCms.getProfileManufacturer:12 PIL.ImageCms.getProfileModel:12
#: PIL.ImageCms.getProfileName:12 PIL.ImageCms.isIntentSupported:14 of
msgid ""
"EITHER a valid CmsProfile object, OR a string of the filename of an ICC "
"profile."
msgstr "EITHER a valid CmsProfile object, OR a string of the filename of an ICC profile."

#: PIL.ImageCms.getDefaultIntent:17 of
msgid ""
"Integer 0-3 specifying the default rendering intent for this profile."
"      ImageCms.INTENT_PERCEPTUAL            = 0 (DEFAULT)     "
"ImageCms.INTENT_RELATIVE_COLORIMETRIC = 1     ImageCms.INTENT_SATURATION"
"            = 2     ImageCms.INTENT_ABSOLUTE_COLORIMETRIC = 3  see the "
"pyCMS documentation for details on rendering intents and what     they "
"do."
msgstr ""

#: PIL.ImageCms.getDefaultIntent:17 of
msgid "Integer 0-3 specifying the default rendering intent for this profile."
msgstr "Integer 0-3 specifying the default rendering intent for this profile."

#: PIL.ImageCms.getDefaultIntent:25 PIL.ImageCms.isIntentSupported:24 of
msgid "see the pyCMS documentation for details on rendering intents and what"
msgstr "see the pyCMS documentation for details on rendering intents and what"

#: PIL.ImageCms.getDefaultIntent:26 PIL.ImageCms.isIntentSupported:25 of
msgid "they do."
msgstr "they do."

#: PIL.ImageCms.getOpenProfile:1 of
msgid "(pyCMS) Opens an ICC profile file."
msgstr "(pyCMS) Opens an ICC profile file."

#: PIL.ImageCms.getOpenProfile:3 of
msgid ""
"The PyCMSProfile object can be passed back into pyCMS for use in creating"
" transforms and such (as in ImageCms.buildTransformFromOpenProfiles())."
msgstr "The PyCMSProfile object can be passed back into pyCMS for use in creating transforms and such (as in ImageCms.buildTransformFromOpenProfiles())."

#: PIL.ImageCms.getOpenProfile:6 of
msgid ""
"If profileFilename is not a valid filename for an ICC profile, a "
"PyCMSError will be raised."
msgstr "If profileFilename is not a valid filename for an ICC profile, a PyCMSError will be raised."

#: PIL.ImageCms.getOpenProfile:9 of
msgid ""
"String, as a valid filename path to the ICC profile you wish to open, or "
"a file-like object."
msgstr "String, as a valid filename path to the ICC profile you wish to open, or a file-like object."

#: PIL.ImageCms.getOpenProfile:11 of
msgid "A CmsProfile class object."
msgstr "A CmsProfile class object."

#: PIL.ImageCms.getProfileCopyright:1 of
msgid "(pyCMS) Gets the copyright for the given profile."
msgstr "(pyCMS) Gets the copyright for the given profile."

#: PIL.ImageCms.getProfileCopyright:6 of
msgid ""
"If an error occurs while trying to obtain the copyright tag, a PyCMSError"
" is raised"
msgstr "If an error occurs while trying to obtain the copyright tag, a PyCMSError is raised"

#: PIL.ImageCms.getProfileCopyright:9 of
msgid ""
"Use this function to obtain the information stored in the profile's "
"copyright tag."
msgstr "Use this function to obtain the information stored in the profile's copyright tag."

#: PIL.ImageCms.getProfileCopyright:14 PIL.ImageCms.getProfileDescription:14
#: PIL.ImageCms.getProfileInfo:15 PIL.ImageCms.getProfileManufacturer:14
#: PIL.ImageCms.getProfileModel:14 of
msgid "A string containing the internal profile information stored in an ICC tag."
msgstr "A string containing the internal profile information stored in an ICC tag."

#: PIL.ImageCms.getProfileDescription:1 of
msgid "(pyCMS) Gets the description for the given profile."
msgstr "(pyCMS) Gets the description for the given profile."

#: PIL.ImageCms.getProfileDescription:6 of
msgid ""
"If an error occurs while trying to obtain the description tag, a "
"PyCMSError is raised"
msgstr "If an error occurs while trying to obtain the description tag, a PyCMSError is raised"

#: PIL.ImageCms.getProfileDescription:9 of
msgid ""
"Use this function to obtain the information stored in the profile's "
"description tag."
msgstr "Use this function to obtain the information stored in the profile's description tag."

#: PIL.ImageCms.getProfileInfo:1 of
msgid "(pyCMS) Gets the internal product information for the given profile."
msgstr "(pyCMS) Gets the internal product information for the given profile."

#: PIL.ImageCms.getProfileInfo:6 of
msgid ""
"If an error occurs while trying to obtain the info tag, a PyCMSError is "
"raised"
msgstr "If an error occurs while trying to obtain the info tag, a PyCMSError is raised"

#: PIL.ImageCms.getProfileInfo:9 of
msgid ""
"Use this function to obtain the information stored in the profile's info "
"tag.  This often contains details about the profile, and how it was "
"created, as supplied by the creator."
msgstr ""

#: PIL.ImageCms.getProfileManufacturer:1 of
msgid "(pyCMS) Gets the manufacturer for the given profile."
msgstr "(pyCMS) Gets the manufacturer for the given profile."

#: PIL.ImageCms.getProfileManufacturer:6 of
msgid ""
"If an error occurs while trying to obtain the manufacturer tag, a "
"PyCMSError is raised"
msgstr "If an error occurs while trying to obtain the manufacturer tag, a PyCMSError is raised"

#: PIL.ImageCms.getProfileManufacturer:9 of
msgid ""
"Use this function to obtain the information stored in the profile's "
"manufacturer tag."
msgstr "Use this function to obtain the information stored in the profile's manufacturer tag."

#: PIL.ImageCms.getProfileModel:1 of
msgid "(pyCMS) Gets the model for the given profile."
msgstr "(pyCMS) Gets the model for the given profile."

#: PIL.ImageCms.getProfileModel:6 of
msgid ""
"If an error occurs while trying to obtain the model tag, a PyCMSError is "
"raised"
msgstr "If an error occurs while trying to obtain the model tag, a PyCMSError is raised"

#: PIL.ImageCms.getProfileModel:9 of
msgid ""
"Use this function to obtain the information stored in the profile's model"
" tag."
msgstr "Use this function to obtain the information stored in the profile's model tag."

#: PIL.ImageCms.getProfileName:1 of
msgid "(pyCMS) Gets the internal product name for the given profile."
msgstr "(pyCMS) Gets the internal product name for the given profile."

#: PIL.ImageCms.getProfileName:3 of
msgid ""
"If profile isn't a valid CmsProfile object or filename to a profile, a "
"PyCMSError is raised If an error occurs while trying to obtain the name "
"tag, a PyCMSError is raised."
msgstr ""

#: PIL.ImageCms.getProfileName:7 of
msgid ""
"Use this function to obtain the INTERNAL name of the profile (stored in "
"an ICC tag in the profile itself), usually the one used when the profile "
"was originally created.  Sometimes this tag also contains additional "
"information supplied by the creator."
msgstr ""

#: PIL.ImageCms.getProfileName:14 of
msgid ""
"A string containing the internal name of the profile as stored in an ICC "
"tag."
msgstr "A string containing the internal name of the profile as stored in an ICC tag."

#: PIL.ImageCms.get_display_profile:1 of
msgid ""
"(experimental) Fetches the profile for the current display device. "
":returns: None if the profile is not known."
msgstr "(experimental) Fetches the profile for the current display device. :returns: None if the profile is not known."

#: PIL.ImageCms.isIntentSupported:1 of
msgid "(pyCMS) Checks if a given intent is supported."
msgstr "(pyCMS) Checks if a given intent is supported."

#: PIL.ImageCms.isIntentSupported:3 of
msgid ""
"Use this function to verify that you can use your desired renderingIntent"
" with profile, and that profile can be used for the input/output/proof "
"profile as you desire."
msgstr ""

#: PIL.ImageCms.isIntentSupported:7 of
msgid ""
"Some profiles are created specifically for one \"direction\", can cannot "
"be used for others.  Some profiles can only be used for certain rendering"
" intents... so it's best to either verify this before trying to create a "
"transform with them (using this function), or catch the potential "
"PyCMSError that will occur if they don't support the modes you select."
msgstr ""

#: PIL.ImageCms.isIntentSupported:16 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use with this "
"profile      ImageCms.INTENT_PERCEPTUAL            = 0 (DEFAULT)     "
"ImageCms.INTENT_RELATIVE_COLORIMETRIC = 1     ImageCms.INTENT_SATURATION"
"            = 2     ImageCms.INTENT_ABSOLUTE_COLORIMETRIC = 3  see the "
"pyCMS documentation for details on rendering intents and what     they "
"do."
msgstr ""

#: PIL.ImageCms.isIntentSupported:16 of
msgid ""
"Integer (0-3) specifying the rendering intent you wish to use with this "
"profile"
msgstr "Integer (0-3) specifying the rendering intent you wish to use with this profile"

#: PIL.ImageCms.isIntentSupported:26 of
msgid ""
"Integer specifying if the profile is to be used for input, output, or "
"proof      INPUT  = 0 (or use ImageCms.DIRECTION_INPUT)     OUTPUT = 1 "
"(or use ImageCms.DIRECTION_OUTPUT)     PROOF  = 2 (or use "
"ImageCms.DIRECTION_PROOF)"
msgstr ""

#: PIL.ImageCms.isIntentSupported:26 of
msgid ""
"Integer specifying if the profile is to be used for input, output, or "
"proof"
msgstr "Integer specifying if the profile is to be used for input, output, or proof"

#: PIL.ImageCms.isIntentSupported:29 of
msgid ""
"INPUT  = 0 (or use ImageCms.DIRECTION_INPUT) OUTPUT = 1 (or use "
"ImageCms.DIRECTION_OUTPUT) PROOF  = 2 (or use ImageCms.DIRECTION_PROOF)"
msgstr "INPUT  = 0 (or use ImageCms.DIRECTION_INPUT) OUTPUT = 1 (or use ImageCms.DIRECTION_OUTPUT) PROOF  = 2 (or use ImageCms.DIRECTION_PROOF)"

#: PIL.ImageCms.isIntentSupported:33 of
msgid "1 if the intent/direction are supported, -1 if they are not."
msgstr "1 if the intent/direction are supported, -1 if they are not."

#: PIL.ImageCms.profileToProfile:1 of
msgid ""
"(pyCMS) Applies an ICC transformation to a given image, mapping from "
"inputProfile to outputProfile."
msgstr "(pyCMS) Applies an ICC transformation to a given image, mapping from inputProfile to outputProfile."

#: PIL.ImageCms.profileToProfile:4 of
msgid ""
"If the input or output profiles specified are not valid filenames, a "
"PyCMSError will be raised.  If inPlace is True and outputMode != im.mode,"
" a PyCMSError will be raised.  If an error occurs during application of "
"the profiles, a PyCMSError will be raised.  If outputMode is not a mode "
"supported by the outputProfile (or by pyCMS), a PyCMSError will be "
"raised."
msgstr ""

#: PIL.ImageCms.profileToProfile:11 of
msgid ""
"This function applies an ICC transformation to im from inputProfile's "
"color space to outputProfile's color space using the specified rendering "
"intent to decide how to handle out-of-gamut colors."
msgstr ""

#: PIL.ImageCms.profileToProfile:15 of
msgid ""
"OutputMode can be used to specify that a color mode conversion is to be "
"done using these profiles, but the specified profiles must be able to "
"handle that mode.  I.e., if converting im from RGB to CMYK using "
"profiles, the input profile must handle RGB data, and the output profile "
"must handle CMYK data."
msgstr ""

#: PIL.ImageCms.profileToProfile:21 of
msgid "An open PIL image object (i.e. Image.new(...) or Image.open(...), etc.)"
msgstr "An open PIL image object (i.e. Image.new(...) or Image.open(...), etc.)"

#: PIL.ImageCms.profileToProfile:23 of
msgid ""
"String, as a valid filename path to the ICC input profile you wish to use"
" for this image, or a profile object"
msgstr "String, as a valid filename path to the ICC input profile you wish to use for this image, or a profile object"

#: PIL.ImageCms.profileToProfile:25 of
msgid ""
"String, as a valid filename path to the ICC output profile you wish to "
"use for this image, or a profile object"
msgstr "String, as a valid filename path to the ICC output profile you wish to use for this image, or a profile object"

#: PIL.ImageCms.profileToProfile:37 of
msgid ""
"A valid PIL mode for the output image (i.e. \"RGB\", \"CMYK\", etc.).  "
"Note: if rendering the image \"inPlace\", outputMode MUST be the same "
"mode as the input, or omitted completely.  If omitted, the outputMode "
"will be the same as the mode of the input image (im.mode)"
msgstr ""

#: PIL.ImageCms.profileToProfile:42 of
msgid ""
"Boolean.  If True, the original image is modified in-place, and None is "
"returned.  If False (default), a new Image object is returned with the "
"transform applied."
msgstr ""

#: PIL.ImageCms.profileToProfile:46 of
msgid "Either None or a new PIL image object, depending on value of inPlace"
msgstr "Either None or a new PIL image object, depending on value of inPlace"

#: PIL.ImageCms.versions:1 of
msgid "(pyCMS) Fetches versions."
msgstr "(pyCMS) Fetches versions."

#: ../../reference/ImageCms.rst:16
msgid "CmsProfile"
msgstr "CmsProfile"

#: ../../reference/ImageCms.rst:18
msgid ""
"The ICC color profiles are wrapped in an instance of the class "
":py:class:`CmsProfile`.  The specification ICC.1:2010 contains more "
"information about the meaning of the values in ICC profiles."
msgstr ""

#: ../../reference/ImageCms.rst:22
msgid ""
"For convenience, all XYZ-values are also given as xyY-values (so they can"
" be easily displayed in a chromaticity diagram, for example)."
msgstr "For convenience, all XYZ-values are also given as xyY-values (so they can be easily displayed in a chromaticity diagram, for example)."

#: ../../reference/ImageCms.rst:29
msgid "Date and time this profile was first created (see 7.2.1 of ICC.1:2010)."
msgstr "Date and time this profile was first created (see 7.2.1 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:31
msgid ":py:class:`datetime.datetime` or ``None``"
msgstr ":py:class:`datetime.datetime` or ``None``"

#: ../../reference/ImageCms.rst:35
msgid ""
"The version number of the ICC standard that this profile follows (e.g. "
"``2.0``)."
msgstr "The version number of the ICC standard that this profile follows (e.g. ``2.0``)."

#: ../../reference/ImageCms.rst:38
msgid ":py:class:`float`"
msgstr ":py:class:`float`"

#: ../../reference/ImageCms.rst:42
msgid "Same as ``version``, but in encoded format (see 7.2.4 of ICC.1:2010)."
msgstr "Same as ``version``, but in encoded format (see 7.2.4 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:46
msgid ""
"4-character string identifying the profile class.  One of ``scnr``, "
"``mntr``, ``prtr``, ``link``, ``spac``, ``abst``, ``nmcl`` (see 7.2.5 of "
"ICC.1:2010 for details)."
msgstr ""

#: ../../reference/ImageCms.rst:54
msgid ""
"4-character string (padded with whitespace) identifying the color space, "
"e.g. ``XYZ␣``, ``RGB␣`` or ``CMYK`` (see 7.2.6 of ICC.1:2010 for "
"details)."
msgstr ""

#: ../../reference/ImageCms.rst:58
msgid ""
"Note that the deprecated attribute ``color_space`` contains an "
"interpreted (non-padded) variant of this (but can be empty on unknown "
"input)."
msgstr ""

#: ../../reference/ImageCms.rst:66
msgid ""
"4-character string (padded with whitespace) identifying the color space "
"on the B-side of the transform (see 7.2.7 of ICC.1:2010 for details)."
msgstr "4-character string (padded with whitespace) identifying the color space on the B-side of the transform (see 7.2.7 of ICC.1:2010 for details)."

#: ../../reference/ImageCms.rst:70
msgid ""
"Note that the deprecated attribute ``pcs`` contains an interpreted (non-"
"padded) variant of this (but can be empty on unknown input)."
msgstr "Note that the deprecated attribute ``pcs`` contains an interpreted (non-padded) variant of this (but can be empty on unknown input)."

#: ../../reference/ImageCms.rst:77
msgid ""
"The encoded header flags of the profile (see 7.2.11 of ICC.1:2010 for "
"details)."
msgstr "The encoded header flags of the profile (see 7.2.11 of ICC.1:2010 for details)."

#: ../../reference/ImageCms.rst:84
msgid ""
"4-character string (padded with whitespace) identifying the device "
"manufacturer, which shall match the signature contained in the "
"appropriate section of the ICC signature registry found at www.color.org "
"(see 7.2.12 of ICC.1:2010)."
msgstr ""

#: ../../reference/ImageCms.rst:93
msgid ""
"4-character string (padded with whitespace) identifying the device model,"
" which shall match the signature contained in the appropriate section of "
"the ICC signature registry found at www.color.org (see 7.2.13 of "
"ICC.1:2010)."
msgstr ""

#: ../../reference/ImageCms.rst:102
msgid ""
"Flags used to identify attributes unique to the particular device setup "
"for which the profile is applicable (see 7.2.14 of ICC.1:2010 for "
"details)."
msgstr ""

#: ../../reference/ImageCms.rst:110
msgid ""
"The rendering intent to use when combining this profile with another "
"profile (usually overridden at run-time, but provided here for DeviceLink"
" and embedded source profiles, see 7.2.15 of ICC.1:2010)."
msgstr ""

#: ../../reference/ImageCms.rst:114 ../../reference/ImageCms.rst:415
msgid ""
"One of ``ImageCms.INTENT_ABSOLUTE_COLORIMETRIC``, "
"``ImageCms.INTENT_PERCEPTUAL``, ``ImageCms.INTENT_RELATIVE_COLORIMETRIC``"
" and ``ImageCms.INTENT_SATURATION``."
msgstr ""

#: ../../reference/ImageCms.rst:121
msgid ""
"A sequence of 16 bytes identifying the profile (via a specially "
"constructed MD5 sum), or 16 binary zeroes if the profile ID has not been "
"calculated (see 7.2.18 of ICC.1:2010)."
msgstr ""

#: ../../reference/ImageCms.rst:125
msgid ":py:class:`bytes`"
msgstr ":py:class:`bytes`"

#: ../../reference/ImageCms.rst:129
msgid "The text copyright information for the profile (see 9.2.21 of ICC.1:2010)."
msgstr "The text copyright information for the profile (see 9.2.21 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:131 ../../reference/ImageCms.rst:138
#: ../../reference/ImageCms.rst:145 ../../reference/ImageCms.rst:152
#: ../../reference/ImageCms.rst:160 ../../reference/ImageCms.rst:275
#: ../../reference/ImageCms.rst:284
msgid ":py:class:`unicode` or ``None``"
msgstr ":py:class:`unicode` or ``None``"

#: ../../reference/ImageCms.rst:135
msgid ""
"The (English) display string for the device manufacturer (see 9.2.22 of "
"ICC.1:2010)."
msgstr "The (English) display string for the device manufacturer (see 9.2.22 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:142
msgid ""
"The (English) display string for the device model of the device for which"
" this profile is created (see 9.2.23 of ICC.1:2010)."
msgstr "The (English) display string for the device model of the device for which this profile is created (see 9.2.23 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:149
msgid ""
"The (English) display string for the profile description (see 9.2.41 of "
"ICC.1:2010)."
msgstr "The (English) display string for the profile description (see 9.2.41 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:156
msgid ""
"The name of the registered characterization data set, or the measurement "
"data for a characterization target (see 9.2.14 of ICC.1:2010)."
msgstr "The name of the registered characterization data set, or the measurement data for a characterization target (see 9.2.14 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:164
msgid ""
"The first column in the matrix used in matrix/TRC transforms (see 9.2.44 "
"of ICC.1:2010)."
msgstr "The first column in the matrix used in matrix/TRC transforms (see 9.2.44 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:166 ../../reference/ImageCms.rst:172
#: ../../reference/ImageCms.rst:178 ../../reference/ImageCms.rst:185
#: ../../reference/ImageCms.rst:261 ../../reference/ImageCms.rst:290
#: ../../reference/ImageCms.rst:296 ../../reference/ImageCms.rst:302
msgid "``((X, Y, Z), (x, y, Y))`` or ``None``"
msgstr "``((X, Y, Z), (x, y, Y))`` or ``None``"

#: ../../reference/ImageCms.rst:170
msgid ""
"The second column in the matrix used in matrix/TRC transforms (see 9.2.30"
" of ICC.1:2010)."
msgstr "The second column in the matrix used in matrix/TRC transforms (see 9.2.30 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:176
msgid ""
"The third column in the matrix used in matrix/TRC transforms (see 9.2.4 "
"of ICC.1:2010)."
msgstr "The third column in the matrix used in matrix/TRC transforms (see 9.2.4 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:182
msgid ""
"The absolute luminance of emissive devices in candelas per square metre "
"as described by the Y channel (see 9.2.32 of ICC.1:2010)."
msgstr "The absolute luminance of emissive devices in candelas per square metre as described by the Y channel (see 9.2.32 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:189
msgid ""
"The data of the phosphor/colorant chromaticity set used (red, green and "
"blue channels, see 9.2.16 of ICC.1:2010)."
msgstr "The data of the phosphor/colorant chromaticity set used (red, green and blue channels, see 9.2.16 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:192
msgid "``((x, y, Y), (x, y, Y), (x, y, Y))`` or ``None``"
msgstr "``((x, y, Y), (x, y, Y), (x, y, Y))`` or ``None``"

#: ../../reference/ImageCms.rst:196
msgid ""
"The chromatic adaption matrix converts a color measured using the actual "
"illumination conditions and relative to the actual adopted white, to an "
"color relative to the PCS adopted white, with complete adaptation from "
"the actual adopted white chromaticity to the PCS adopted white "
"chromaticity (see 9.2.15 of ICC.1:2010)."
msgstr ""

#: ../../reference/ImageCms.rst:202
msgid ""
"Two matrices are returned, one in (X, Y, Z) space and one in (x, y, Y) "
"space."
msgstr "Two matrices are returned, one in (X, Y, Z) space and one in (x, y, Y) space."

#: ../../reference/ImageCms.rst:204
msgid ""
"2-tuple of 3-tuple, the first with (X, Y, Z) and the second with (x, y, "
"Y) values"
msgstr "2-tuple of 3-tuple, the first with (X, Y, Z) and the second with (x, y, Y) values"

#: ../../reference/ImageCms.rst:208
msgid ""
"This tag identifies the colorants used in the profile by a unique name "
"and set of PCSXYZ or PCSLAB values (see 9.2.19 of ICC.1:2010)."
msgstr "This tag identifies the colorants used in the profile by a unique name and set of PCSXYZ or PCSLAB values (see 9.2.19 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:212 ../../reference/ImageCms.rst:220
msgid "list of strings"
msgstr "list of strings"

#: ../../reference/ImageCms.rst:216
msgid ""
"This tag identifies the colorants used in the profile by a unique name "
"and set of PCSLAB values (for DeviceLink profiles only, see 9.2.19 of "
"ICC.1:2010)."
msgstr ""

#: ../../reference/ImageCms.rst:224
msgid ""
"4-character string (padded with whitespace) identifying the image state "
"of PCS colorimetry produced using the colorimetric intent transforms (see"
" 9.2.20 of ICC.1:2010 for details)."
msgstr ""

#: ../../reference/ImageCms.rst:232 ../../reference/ImageCms.rst:240
msgid ""
"4-character string (padded with whitespace) identifying the (one) "
"standard reference medium gamut (see 9.2.37 of ICC.1:2010 for details)."
msgstr "4-character string (padded with whitespace) identifying the (one) standard reference medium gamut (see 9.2.37 of ICC.1:2010 for details)."

#: ../../reference/ImageCms.rst:248
msgid ""
"4-character string (padded with whitespace) identifying the device "
"technology (see 9.2.47 of ICC.1:2010 for details)."
msgstr "4-character string (padded with whitespace) identifying the device technology (see 9.2.47 of ICC.1:2010 for details)."

#: ../../reference/ImageCms.rst:255
msgid ""
"This tag specifies the media black point and is used for generating "
"absolute colorimetry."
msgstr "This tag specifies the media black point and is used for generating absolute colorimetry."

#: ../../reference/ImageCms.rst:258 ../../reference/ImageCms.rst:281
msgid "This tag was available in ICC 3.2, but it is removed from version 4."
msgstr "This tag was available in ICC 3.2, but it is removed from version 4."

#: ../../reference/ImageCms.rst:265
msgid ""
"Calculates the white point temperature (see the LCMS documentation for "
"more information)."
msgstr "Calculates the white point temperature (see the LCMS documentation for more information)."

#: ../../reference/ImageCms.rst:268
msgid ":py:class:`float` or ``None``"
msgstr ":py:class:`float` or ``None``"

#: ../../reference/ImageCms.rst:272
msgid ""
"The (English) display string for the viewing conditions (see 9.2.48 of "
"ICC.1:2010)."
msgstr "The (English) display string for the viewing conditions (see 9.2.48 of ICC.1:2010)."

#: ../../reference/ImageCms.rst:279
msgid "The (English) display string for the screening conditions."
msgstr "The (English) display string for the screening conditions."

#: ../../reference/ImageCms.rst:288
msgid "The XYZ-transformed of the RGB primary color red (1, 0, 0)."
msgstr "The XYZ-transformed of the RGB primary color red (1, 0, 0)."

#: ../../reference/ImageCms.rst:294
msgid "The XYZ-transformed of the RGB primary color green (0, 1, 0)."
msgstr "The XYZ-transformed of the RGB primary color green (0, 1, 0)."

#: ../../reference/ImageCms.rst:300
msgid "The XYZ-transformed of the RGB primary color blue (0, 0, 1)."
msgstr "The XYZ-transformed of the RGB primary color blue (0, 0, 1)."

#: ../../reference/ImageCms.rst:306
msgid ""
"True if this profile is implemented as a matrix shaper (see documentation"
" on LCMS)."
msgstr "True if this profile is implemented as a matrix shaper (see documentation on LCMS)."

#: ../../reference/ImageCms.rst:309
msgid ":py:class:`bool`"
msgstr ":py:class:`bool`"

#: ../../reference/ImageCms.rst:313
msgid ""
"Returns a dictionary of all supported intents and directions for the CLUT"
" model."
msgstr "Returns a dictionary of all supported intents and directions for the CLUT model."

#: ../../reference/ImageCms.rst:316 ../../reference/ImageCms.rst:335
msgid ""
"The dictionary is indexed by intents "
"(``ImageCms.INTENT_ABSOLUTE_COLORIMETRIC``, "
"``ImageCms.INTENT_PERCEPTUAL``, ``ImageCms.INTENT_RELATIVE_COLORIMETRIC``"
" and ``ImageCms.INTENT_SATURATION``)."
msgstr ""

#: ../../reference/ImageCms.rst:322 ../../reference/ImageCms.rst:341
msgid ""
"The values are 3-tuples indexed by directions "
"(``ImageCms.DIRECTION_INPUT``, ``ImageCms.DIRECTION_OUTPUT``, "
"``ImageCms.DIRECTION_PROOF``)."
msgstr ""

#: ../../reference/ImageCms.rst:326 ../../reference/ImageCms.rst:345
msgid ""
"The elements of the tuple are booleans.  If the value is ``True``, that "
"intent is supported for that direction."
msgstr "The elements of the tuple are booleans.  If the value is ``True``, that intent is supported for that direction."

#: ../../reference/ImageCms.rst:329 ../../reference/ImageCms.rst:348
msgid ":py:class:`dict` of boolean 3-tuples"
msgstr ":py:class:`dict` of boolean 3-tuples"

#: ../../reference/ImageCms.rst:333
msgid "Returns a dictionary of all supported intents and directions."
msgstr "Returns a dictionary of all supported intents and directions."

#: ../../reference/ImageCms.rst:352
msgid ""
"Deprecated but retained for backwards compatibility. Interpreted value of"
" :py:attr:`.xcolor_space`.  May be the empty string if value could not be"
" decoded."
msgstr ""

#: ../../reference/ImageCms.rst:360
msgid ""
"Deprecated but retained for backwards compatibility. Interpreted value of"
" :py:attr:`.connection_space`.  May be the empty string if value could "
"not be decoded."
msgstr ""

#: ../../reference/ImageCms.rst:368
msgid ""
"Deprecated but retained for backwards compatibility. ASCII-encoded value "
"of :py:attr:`.model`."
msgstr "Deprecated but retained for backwards compatibility. ASCII-encoded value of :py:attr:`.model`."

#: ../../reference/ImageCms.rst:375
msgid ""
"Deprecated but retained for backwards compatibility. ASCII-encoded value "
"of :py:attr:`.manufacturer`."
msgstr "Deprecated but retained for backwards compatibility. ASCII-encoded value of :py:attr:`.manufacturer`."

#: ../../reference/ImageCms.rst:382
msgid ""
"Deprecated but retained for backwards compatibility. ASCII-encoded value "
"of :py:attr:`.copyright`."
msgstr "Deprecated but retained for backwards compatibility. ASCII-encoded value of :py:attr:`.copyright`."

#: ../../reference/ImageCms.rst:389 ../../reference/ImageCms.rst:396
msgid ""
"Deprecated but retained for backwards compatibility. ASCII-encoded value "
"of :py:attr:`.profile_description`."
msgstr "Deprecated but retained for backwards compatibility. ASCII-encoded value of :py:attr:`.profile_description`."

#: ../../reference/ImageCms.rst:399
msgid ""
"This alias of :py:attr:`.product_description` used to contain a derived "
"informative string about the profile, depending on the value of the "
"description, copyright, manufacturer and model fields)."
msgstr ""

#: ../../reference/ImageCms.rst:406
msgid "There is one function defined on the class:"
msgstr "There is one function defined on the class:"

#: ../../reference/ImageCms.rst:410
msgid "Returns if the intent is supported for the given direction."
msgstr "Returns if the intent is supported for the given direction."

#: ../../reference/ImageCms.rst:412
msgid ""
"Note that you can also get this information for all intents and "
"directions with :py:attr:`.intent_supported`."
msgstr "Note that you can also get this information for all intents and directions with :py:attr:`.intent_supported`."

#: ../../reference/ImageCms.rst:419
msgid ""
"One of ``ImageCms.DIRECTION_INPUT``, ``ImageCms.DIRECTION_OUTPUT`` and "
"``ImageCms.DIRECTION_PROOF``"
msgstr "One of ``ImageCms.DIRECTION_INPUT``, ``ImageCms.DIRECTION_OUTPUT`` and ``ImageCms.DIRECTION_PROOF``"

#: ../../reference/ImageCms.rst:422
msgid "Boolean if the intent and direction is supported."
msgstr "Boolean if the intent and direction is supported."

#: ../../reference/ImageColor.rst:5
msgid ":py:mod:`ImageColor` Module"
msgstr ":py:mod:`ImageColor` Module"

#: ../../reference/ImageColor.rst:7
msgid ""
"The :py:mod:`ImageColor` module contains color tables and converters from"
" CSS3-style color specifiers to RGB tuples. This module is used by "
":py:meth:`PIL.Image.new` and the :py:mod:`~PIL.ImageDraw` module, among "
"others."
msgstr ""

#: ../../reference/ImageColor.rst:15 ../../reference/ImageDraw.rst:57
msgid "Color Names"
msgstr "Color Names"

#: ../../reference/ImageColor.rst:17
msgid "The ImageColor module supports the following string formats:"
msgstr "The ImageColor module supports the following string formats:"

#: ../../reference/ImageColor.rst:19
msgid ""
"Hexadecimal color specifiers, given as ``#rgb`` or ``#rrggbb``. For "
"example, ``#ff0000`` specifies pure red."
msgstr "Hexadecimal color specifiers, given as ``#rgb`` or ``#rrggbb``. For example, ``#ff0000`` specifies pure red."

#: ../../reference/ImageColor.rst:22
msgid ""
"RGB functions, given as ``rgb(red, green, blue)`` where the color values "
"are integers in the range 0 to 255. Alternatively, the color values can "
"be given as three percentages (0% to 100%). For example, ``rgb(255,0,0)``"
" and ``rgb(100%,0%,0%)`` both specify pure red."
msgstr ""

#: ../../reference/ImageColor.rst:27
msgid ""
"Hue-Saturation-Lightness (HSL) functions, given as ``hsl(hue, "
"saturation%, lightness%)`` where hue is the color given as an angle "
"between 0 and 360 (red=0, green=120, blue=240), saturation is a value "
"between 0% and 100% (gray=0%, full color=100%), and lightness is a value "
"between 0% and 100% (black=0%, normal=50%, white=100%). For example, "
"``hsl(0,100%,50%)`` is pure red."
msgstr ""

#: ../../reference/ImageColor.rst:34
msgid ""
"Hue-Saturation-Value (HSV) functions, given as ``hsv(hue, saturation%, "
"value%)`` where hue and saturation are the same as HSL, and value is "
"between 0% and 100% (black=0%, normal=100%). For example, "
"``hsv(0,100%,100%)`` is pure red. This format is also known as Hue-"
"Saturation-Brightness (HSB), and can be given as ``hsb(hue, saturation%, "
"brightness%)``, where each of the values are used as they are in HSV."
msgstr ""

#: ../../reference/ImageColor.rst:41
msgid ""
"Common HTML color names. The :py:mod:`~PIL.ImageColor` module provides "
"some 140 standard color names, based on the colors supported by the X "
"Window system and most web browsers. color names are case insensitive. "
"For example, ``red`` and ``Red`` both specify pure red."
msgstr ""

#: ../../reference/ImageColor.rst:51
msgid ""
"Convert a color string to an RGB tuple. If the string cannot be parsed, "
"this function raises a :py:exc:`ValueError` exception."
msgstr "Convert a color string to an RGB tuple. If the string cannot be parsed, this function raises a :py:exc:`ValueError` exception."

#: ../../reference/ImageColor.rst:58
msgid ""
"Same as :py:func:`~PIL.ImageColor.getrgb`, but converts the RGB value to "
"a greyscale value if the mode is not color or a palette image. If the "
"string cannot be parsed, this function raises a :py:exc:`ValueError` "
"exception."
msgstr ""

#: ../../reference/ImageDraw.rst:5
msgid ":py:mod:`ImageDraw` Module"
msgstr ":py:mod:`ImageDraw` Module"

#: ../../reference/ImageDraw.rst:7
msgid ""
"The :py:mod:`ImageDraw` module provides simple 2D graphics for "
":py:class:`~PIL.Image.Image` objects.  You can use this module to create "
"new images, annotate or retouch existing images, and to generate graphics"
" on the fly for web use."
msgstr ""

#: ../../reference/ImageDraw.rst:12
msgid "For a more advanced drawing library for PIL, see the `aggdraw module`_."
msgstr "For a more advanced drawing library for PIL, see the `aggdraw module`_."

#: ../../reference/ImageDraw.rst:17
msgid "Example: Draw a gray cross over an image"
msgstr "Example: Draw a gray cross over an image"

#: ../../reference/ImageDraw.rst:34
msgid "Concepts"
msgstr "Concepts"

#: ../../reference/ImageDraw.rst:37
msgid "Coordinates"
msgstr "Coordinates"

#: ../../reference/ImageDraw.rst:39
msgid ""
"The graphics interface uses the same coordinate system as PIL itself, "
"with (0, 0) in the upper left corner. Any pixels drawn outside of the "
"image bounds will be discarded."
msgstr ""

#: ../../reference/ImageDraw.rst:44
msgid "Colors"
msgstr "Colors"

#: ../../reference/ImageDraw.rst:46
msgid ""
"To specify colors, you can use numbers or tuples just as you would use "
"with :py:meth:`PIL.Image.new` or :py:meth:`PIL.Image.Image.putpixel`. For"
" “1”, “L”, and “I” images, use integers. For “RGB” images, use a 3-tuple "
"containing integer values. For “F” images, use integer or floating point "
"values."
msgstr ""

#: ../../reference/ImageDraw.rst:51
msgid ""
"For palette images (mode “P”), use integers as color indexes. In 1.1.4 "
"and later, you can also use RGB 3-tuples or color names (see below). The "
"drawing layer will automatically assign color indexes, as long as you "
"don’t draw with more than 256 colors."
msgstr ""

#: ../../reference/ImageDraw.rst:59
msgid "See :ref:`color-names` for the color names supported by Pillow."
msgstr "See :ref:`color-names` for the color names supported by Pillow."

#: ../../reference/ImageDraw.rst:62
msgid "Fonts"
msgstr "Fonts"

#: ../../reference/ImageDraw.rst:64
msgid "PIL can use bitmap fonts or OpenType/TrueType fonts."
msgstr "PIL can use bitmap fonts or OpenType/TrueType fonts."

#: ../../reference/ImageDraw.rst:66
msgid ""
"Bitmap fonts are stored in PIL’s own format, where each font typically "
"consists of two files, one named .pil and the other usually named .pbm. "
"The former contains font metrics, the latter raster data."
msgstr ""

#: ../../reference/ImageDraw.rst:70
msgid ""
"To load a bitmap font, use the load functions in the "
":py:mod:`~PIL.ImageFont` module."
msgstr "To load a bitmap font, use the load functions in the :py:mod:`~PIL.ImageFont` module."

#: ../../reference/ImageDraw.rst:73
msgid ""
"To load a OpenType/TrueType font, use the truetype function in the "
":py:mod:`~PIL.ImageFont` module. Note that this function depends on "
"third-party libraries, and may not available in all PIL builds."
msgstr ""

#: ../../reference/ImageDraw.rst:78
msgid "Example: Draw Partial Opacity Text"
msgstr "Example: Draw Partial Opacity Text"

#: ../../reference/ImageDraw.rst:110
msgid "Creates an object that can be used to draw in the given image."
msgstr "Creates an object that can be used to draw in the given image."

#: ../../reference/ImageDraw.rst:112
msgid "Note that the image will be modified in place."
msgstr "Note that the image will be modified in place."

#: ../../reference/ImageDraw.rst:114 ../../reference/ImageDraw.rst:435
msgid "The image to draw in."
msgstr "The image to draw in."

#: ../../reference/ImageDraw.rst:115
msgid ""
"Optional mode to use for color values.  For RGB images, this argument can"
" be RGB or RGBA (to blend the drawing into the image).  For all other "
"modes, this argument must be the same as the image mode.  If omitted, the"
" mode defaults to the mode of the image."
msgstr ""

#: ../../reference/ImageDraw.rst:122 ../../reference/ImageFont.rst:48
msgid "Methods"
msgstr "Methods"

#: ../../reference/ImageDraw.rst:126
msgid "Get the current default font."
msgstr "Get the current default font."

#: ../../reference/ImageDraw.rst:128
msgid "An image font."
msgstr "An image font."

#: ../../reference/ImageDraw.rst:132
msgid ""
"Draws an arc (a portion of a circle outline) between the start and end "
"angles, inside the given bounding box."
msgstr "Draws an arc (a portion of a circle outline) between the start and end angles, inside the given bounding box."

#: ../../reference/ImageDraw.rst:135 ../../reference/ImageDraw.rst:162
#: ../../reference/ImageDraw.rst:206
msgid ""
"Two points to define the bounding box. Sequence of ``[(x0, y0), (x1, "
"y1)]`` or ``[x0, y0, x1, y1]``, where ``x1 >= x0`` and ``y1 >= y0``."
msgstr "Two points to define the bounding box. Sequence of ``[(x0, y0), (x1, y1)]`` or ``[x0, y0, x1, y1]``, where ``x1 >= x0`` and ``y1 >= y0``."

#: ../../reference/ImageDraw.rst:138 ../../reference/ImageDraw.rst:209
msgid ""
"Starting angle, in degrees. Angles are measured from 3 o'clock, "
"increasing clockwise."
msgstr "Starting angle, in degrees. Angles are measured from 3 o'clock, increasing clockwise."

#: ../../reference/ImageDraw.rst:140 ../../reference/ImageDraw.rst:211
msgid "Ending angle, in degrees."
msgstr "Ending angle, in degrees."

#: ../../reference/ImageDraw.rst:141
msgid "Color to use for the arc."
msgstr "Color to use for the arc."

#: ../../reference/ImageDraw.rst:142 ../../reference/ImageDraw.rst:167
#: ../../reference/ImageDraw.rst:180 ../../reference/ImageDraw.rst:214
#: ../../reference/ImageDraw.rst:248
msgid "The line width, in pixels.  .. versionadded:: 5.3.0"
msgstr "The line width, in pixels.  .. versionadded:: 5.3.0"

#: ../../reference/ImageDraw.rst:142 ../../reference/ImageDraw.rst:167
#: ../../reference/ImageDraw.rst:180 ../../reference/ImageDraw.rst:191
#: ../../reference/ImageDraw.rst:214 ../../reference/ImageDraw.rst:248
msgid "The line width, in pixels."
msgstr "The line width, in pixels."

#: ../../reference/ImageDraw.rst:148
msgid ""
"Draws a bitmap (mask) at the given position, using the current fill color"
" for the non-zero portions. The bitmap should be a valid transparency "
"mask (mode “1”) or matte (mode “L” or “RGBA”)."
msgstr ""

#: ../../reference/ImageDraw.rst:152
msgid "This is equivalent to doing ``image.paste(xy, color, bitmap)``."
msgstr "This is equivalent to doing ``image.paste(xy, color, bitmap)``."

#: ../../reference/ImageDraw.rst:154
msgid ""
"To paste pixel data into an image, use the "
":py:meth:`~PIL.Image.Image.paste` method on the image itself."
msgstr "To paste pixel data into an image, use the :py:meth:`~PIL.Image.Image.paste` method on the image itself."

#: ../../reference/ImageDraw.rst:159
msgid ""
"Same as :py:meth:`~PIL.ImageDraw.ImageDraw.arc`, but connects the end "
"points with a straight line."
msgstr "Same as :py:meth:`~PIL.ImageDraw.ImageDraw.arc`, but connects the end points with a straight line."

#: ../../reference/ImageDraw.rst:165 ../../reference/ImageDraw.rst:178
#: ../../reference/ImageDraw.rst:213 ../../reference/ImageDraw.rst:236
#: ../../reference/ImageDraw.rst:246
msgid "Color to use for the outline."
msgstr "Color to use for the outline."

#: ../../reference/ImageDraw.rst:166 ../../reference/ImageDraw.rst:179
#: ../../reference/ImageDraw.rst:212 ../../reference/ImageDraw.rst:237
#: ../../reference/ImageDraw.rst:247
msgid "Color to use for the fill."
msgstr "Color to use for the fill."

#: ../../reference/ImageDraw.rst:173
msgid "Draws an ellipse inside the given bounding box."
msgstr "Draws an ellipse inside the given bounding box."

#: ../../reference/ImageDraw.rst:175
msgid ""
"Two points to define the bounding box. Sequence of either ``[(x0, y0), "
"(x1, y1)]`` or ``[x0, y0, x1, y1]``, where ``x1 >= x0`` and ``y1 >= y0``."
msgstr "Two points to define the bounding box. Sequence of either ``[(x0, y0), (x1, y1)]`` or ``[x0, y0, x1, y1]``, where ``x1 >= x0`` and ``y1 >= y0``."

#: ../../reference/ImageDraw.rst:186
msgid "Draws a line between the coordinates in the **xy** list."
msgstr "Draws a line between the coordinates in the **xy** list."

#: ../../reference/ImageDraw.rst:188 ../../reference/ImageDraw.rst:222
#: ../../reference/ImageDraw.rst:234
msgid ""
"Sequence of either 2-tuples like ``[(x, y), (x, y), ...]`` or numeric "
"values like ``[x, y, x, y, ...]``."
msgstr "Sequence of either 2-tuples like ``[(x, y), (x, y), ...]`` or numeric values like ``[x, y, x, y, ...]``."

#: ../../reference/ImageDraw.rst:190
msgid "Color to use for the line."
msgstr "Color to use for the line."

#: ../../reference/ImageDraw.rst:191
msgid ""
"The line width, in pixels.  .. versionadded:: 1.1.5  .. note:: This "
"option was broken until version 1.1.6."
msgstr "The line width, in pixels.  .. versionadded:: 1.1.5  .. note:: This option was broken until version 1.1.6."

#: ../../reference/ImageDraw.rst:195
msgid "This option was broken until version 1.1.6."
msgstr "This option was broken until version 1.1.6."

#: ../../reference/ImageDraw.rst:196
msgid ""
"Joint type between a sequence of lines. It can be \"curve\",           "
"for rounded edges, or None.  .. versionadded:: 5.3.0"
msgstr "Joint type between a sequence of lines. It can be \"curve\",           for rounded edges, or None.  .. versionadded:: 5.3.0"

#: ../../reference/ImageDraw.rst:197
msgid "Joint type between a sequence of lines. It can be \"curve\","
msgstr "Joint type between a sequence of lines. It can be \"curve\","

#: ../../reference/ImageDraw.rst:197
msgid "for rounded edges, or None."
msgstr "for rounded edges, or None."

#: ../../reference/ImageDraw.rst:203
msgid ""
"Same as arc, but also draws straight lines between the end points and the"
" center of the bounding box."
msgstr "Same as arc, but also draws straight lines between the end points and the center of the bounding box."

#: ../../reference/ImageDraw.rst:220
msgid "Draws points (individual pixels) at the given coordinates."
msgstr "Draws points (individual pixels) at the given coordinates."

#: ../../reference/ImageDraw.rst:224
msgid "Color to use for the point."
msgstr "Color to use for the point."

#: ../../reference/ImageDraw.rst:228
msgid "Draws a polygon."
msgstr "Draws a polygon."

#: ../../reference/ImageDraw.rst:230
msgid ""
"The polygon outline consists of straight lines between the given "
"coordinates, plus a straight line between the last and the first "
"coordinate."
msgstr ""

#: ../../reference/ImageDraw.rst:241 PIL.PSDraw.PSDraw.rectangle:1 of
msgid "Draws a rectangle."
msgstr "Draws a rectangle."

#: ../../reference/ImageDraw.rst:243
msgid ""
"Two points to define the bounding box. Sequence of either ``[(x0, y0), "
"(x1, y1)]`` or ``[x0, y0, x1, y1]``. The second point is just outside the"
" drawn rectangle."
msgstr ""

#: ../../reference/ImageDraw.rst:254 ../../reference/ImageDraw.rst:430
#: ../../reference/ImageDraw.rst:441 PIL.ImagePalette.ImagePalette.getcolor:3
#: PIL.ImagePalette.ImagePalette.getdata:4 PIL.ImagePalette.ImagePalette.save:3
#: PIL.ImagePalette.ImagePalette.tobytes:3
#: PIL.ImagePalette.ImagePalette.tostring:3 of
msgid "This method is experimental."
msgstr "This method is experimental."

#: ../../reference/ImageDraw.rst:256
msgid "Draw a shape."
msgstr "Draw a shape."

#: ../../reference/ImageDraw.rst:260 ../../reference/ImageDraw.rst:311
msgid "Draws the string at the given position."
msgstr "Draws the string at the given position."

#: ../../reference/ImageDraw.rst:262 ../../reference/ImageDraw.rst:313
msgid "Top left corner of the text."
msgstr "Top left corner of the text."

#: ../../reference/ImageDraw.rst:263
msgid ""
"Text to be drawn. If it contains any newline characters, the text is "
"passed on to multiline_text()"
msgstr "Text to be drawn. If it contains any newline characters, the text is passed on to multiline_text()"

#: ../../reference/ImageDraw.rst:265 ../../reference/ImageDraw.rst:315
msgid "Color to use for the text."
msgstr "Color to use for the text."

#: ../../reference/ImageDraw.rst:266 ../../reference/ImageDraw.rst:316
#: ../../reference/ImageDraw.rst:354 ../../reference/ImageDraw.rst:393
msgid "An :py:class:`~PIL.ImageFont.ImageFont` instance."
msgstr "An :py:class:`~PIL.ImageFont.ImageFont` instance."

#: ../../reference/ImageDraw.rst:267
msgid ""
"If the text is passed on to multiline_text(), the number of pixels "
"between lines."
msgstr "If the text is passed on to multiline_text(), the number of pixels between lines."

#: ../../reference/ImageDraw.rst:269
msgid ""
"If the text is passed on to multiline_text(), \"left\", \"center\" or "
"\"right\"."
msgstr "If the text is passed on to multiline_text(), \"left\", \"center\" or \"right\"."

#: ../../reference/ImageDraw.rst:271 ../../reference/ImageDraw.rst:319
#: ../../reference/ImageDraw.rst:357 ../../reference/ImageDraw.rst:395
#: PIL.ImageFont.FreeTypeFont.getmask:14 PIL.ImageFont.FreeTypeFont.getmask2:14
#: PIL.ImageFont.FreeTypeFont.getsize:6 of
msgid ""
"Direction of the text. It can be 'rtl' (right to left), 'ltr' (left to "
"right) or 'ttb' (top to bottom). Requires libraqm.  .. versionadded:: "
"4.2.0"
msgstr ""

#: ../../reference/ImageDraw.rst:271 ../../reference/ImageDraw.rst:319
#: ../../reference/ImageDraw.rst:357 ../../reference/ImageDraw.rst:395
#: PIL.ImageFont.FreeTypeFont.getmask:14 PIL.ImageFont.FreeTypeFont.getmask2:14
#: PIL.ImageFont.FreeTypeFont.getsize:6
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:7 of
msgid ""
"Direction of the text. It can be 'rtl' (right to left), 'ltr' (left to "
"right) or 'ttb' (top to bottom). Requires libraqm."
msgstr "Direction of the text. It can be 'rtl' (right to left), 'ltr' (left to right) or 'ttb' (top to bottom). Requires libraqm."

#: ../../reference/ImageDraw.rst:277 ../../reference/ImageDraw.rst:325
#: ../../reference/ImageDraw.rst:362 ../../reference/ImageDraw.rst:401
#: PIL.ImageFont.FreeTypeFont.getmask:20 PIL.ImageFont.FreeTypeFont.getmask2:20
#: PIL.ImageFont.FreeTypeFont.getsize:12 of
msgid ""
"A list of OpenType font features to be used during text layout. This is "
"usually used to turn on optional font features that are not enabled by "
"default, for example 'dlig' or 'ss01', but can be also used to turn off "
"default font features for example '-liga' to disable ligatures or '-kern'"
" to disable kerning.  To get all supported features, see "
"https://docs.microsoft.com/en-us/typography/opentype/spec/featurelist "
"Requires libraqm.  .. versionadded:: 4.2.0"
msgstr ""

#: ../../reference/ImageDraw.rst:277 ../../reference/ImageDraw.rst:325
#: ../../reference/ImageDraw.rst:362 ../../reference/ImageDraw.rst:401
#: PIL.ImageFont.FreeTypeFont.getmask:20 PIL.ImageFont.FreeTypeFont.getmask2:20
#: PIL.ImageFont.FreeTypeFont.getsize:12
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:13 of
msgid ""
"A list of OpenType font features to be used during text layout. This is "
"usually used to turn on optional font features that are not enabled by "
"default, for example 'dlig' or 'ss01', but can be also used to turn off "
"default font features for example '-liga' to disable ligatures or '-kern'"
" to disable kerning.  To get all supported features, see "
"https://docs.microsoft.com/en-us/typography/opentype/spec/featurelist "
"Requires libraqm."
msgstr ""

#: ../../reference/ImageDraw.rst:290 ../../reference/ImageDraw.rst:338
#: ../../reference/ImageDraw.rst:374 ../../reference/ImageDraw.rst:414
#: PIL.ImageFont.FreeTypeFont.getmask:33 PIL.ImageFont.FreeTypeFont.getmask2:33
#: PIL.ImageFont.FreeTypeFont.getsize:25
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:24 of
msgid ""
"Language of the text. Different languages may use different glyph shapes "
"or ligatures. This parameter tells the font which language the text is "
"in, and to apply the correct substitutions as appropriate, if available. "
"It should be a `BCP 47 language code "
"<https://www.w3.org/International/articles/language-tags/>` Requires "
"libraqm.  .. versionadded:: 6.0.0"
msgstr ""

#: ../../reference/ImageDraw.rst:290 ../../reference/ImageDraw.rst:338
#: ../../reference/ImageDraw.rst:374 ../../reference/ImageDraw.rst:414
#: PIL.ImageFont.FreeTypeFont.getmask:33 PIL.ImageFont.FreeTypeFont.getmask2:33
#: PIL.ImageFont.FreeTypeFont.getsize:25
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:24 of
msgid ""
"Language of the text. Different languages may use different glyph shapes "
"or ligatures. This parameter tells the font which language the text is "
"in, and to apply the correct substitutions as appropriate, if available. "
"It should be a `BCP 47 language code "
"<https://www.w3.org/International/articles/language-tags/>` Requires "
"libraqm."
msgstr ""

#: ../../reference/ImageDraw.rst:300 ../../reference/ImageDraw.rst:384
#: ../../reference/ImageDraw.rst:424 PIL.ImageFont.FreeTypeFont.getmask:43
#: PIL.ImageFont.FreeTypeFont.getmask2:43 PIL.ImageFont.FreeTypeFont.getsize:35
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:34 of
msgid "The width of the text stroke.  .. versionadded:: 6.2.0"
msgstr "The width of the text stroke.  .. versionadded:: 6.2.0"

#: ../../reference/ImageDraw.rst:300 ../../reference/ImageDraw.rst:384
#: ../../reference/ImageDraw.rst:424 PIL.ImageFont.FreeTypeFont.getmask:43
#: PIL.ImageFont.FreeTypeFont.getmask2:43 PIL.ImageFont.FreeTypeFont.getsize:35
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:34 of
msgid "The width of the text stroke."
msgstr "The width of the text stroke."

#: ../../reference/ImageDraw.rst:304
msgid ""
"Color to use for the text stroke. If not given, will default to    the "
"``fill`` parameter.  .. versionadded:: 6.2.0"
msgstr "Color to use for the text stroke. If not given, will default to    the ``fill`` parameter.  .. versionadded:: 6.2.0"

#: ../../reference/ImageDraw.rst:305
msgid "Color to use for the text stroke. If not given, will default to"
msgstr "Color to use for the text stroke. If not given, will default to"

#: ../../reference/ImageDraw.rst:305
msgid "the ``fill`` parameter."
msgstr "the ``fill`` parameter."

#: ../../reference/ImageDraw.rst:314
msgid "Text to be drawn."
msgstr "Text to be drawn."

#: ../../reference/ImageDraw.rst:317 ../../reference/ImageDraw.rst:394
msgid "The number of pixels between lines."
msgstr "The number of pixels between lines."

#: ../../reference/ImageDraw.rst:318
msgid "\"left\", \"center\" or \"right\"."
msgstr "\"left\", \"center\" or \"right\"."

#: ../../reference/ImageDraw.rst:350 ../../reference/ImageDraw.rst:390
msgid "Return the size of the given string, in pixels."
msgstr "Return the size of the given string, in pixels."

#: ../../reference/ImageDraw.rst:352
msgid ""
"Text to be measured. If it contains any newline characters, the text is "
"passed on to multiline_textsize()"
msgstr "Text to be measured. If it contains any newline characters, the text is passed on to multiline_textsize()"

#: ../../reference/ImageDraw.rst:355
msgid ""
"If the text is passed on to multiline_textsize(), the number of pixels "
"between lines."
msgstr "If the text is passed on to multiline_textsize(), the number of pixels between lines."

#: ../../reference/ImageDraw.rst:392
msgid "Text to be measured."
msgstr "Text to be measured."

#: ../../reference/ImageDraw.rst:432
msgid ""
"A more advanced 2D drawing interface for PIL images, based on the WCK "
"interface."
msgstr "A more advanced 2D drawing interface for PIL images, based on the WCK interface."

#: ../../reference/ImageDraw.rst:436
msgid "An optional list of hints."
msgstr "An optional list of hints."

#: ../../reference/ImageDraw.rst:437
msgid "A (drawing context, drawing resource factory) tuple."
msgstr "A (drawing context, drawing resource factory) tuple."

#: ../../reference/ImageDraw.rst:443
msgid "Fills a bounded region with a given color."
msgstr "Fills a bounded region with a given color."

#: ../../reference/ImageDraw.rst:445
msgid "Target image."
msgstr "Target image."

#: ../../reference/ImageDraw.rst:446
msgid "Seed position (a 2-item coordinate tuple)."
msgstr "Seed position (a 2-item coordinate tuple)."

#: ../../reference/ImageDraw.rst:447
msgid "Fill color."
msgstr "Fill color."

#: ../../reference/ImageDraw.rst:448
msgid ""
"Optional border value.  If given, the region consists of pixels with a "
"color different from the border color.  If not given, the region consists"
" of pixels having the same color as the seed pixel."
msgstr ""

#: ../../reference/ImageDraw.rst:452
msgid ""
"Optional threshold value which specifies a maximum tolerable difference "
"of a pixel value from the 'background' in order for it to be replaced. "
"Useful for filling regions of non- homogeneous, but similar, colors."
msgstr ""

#: ../../reference/ImageEnhance.rst:5
msgid ":py:mod:`ImageEnhance` Module"
msgstr ":py:mod:`ImageEnhance` Module"

#: ../../reference/ImageEnhance.rst:7
msgid ""
"The :py:mod:`ImageEnhance` module contains a number of classes that can "
"be used for image enhancement."
msgstr "The :py:mod:`ImageEnhance` module contains a number of classes that can be used for image enhancement."

#: ../../reference/ImageEnhance.rst:11
msgid "Example: Vary the sharpness of an image"
msgstr "Example: Vary the sharpness of an image"

#: ../../reference/ImageEnhance.rst:23
msgid ""
"Also see the :file:`enhancer.py` demo program in the :file:`Scripts/` "
"directory."
msgstr "Also see the :file:`enhancer.py` demo program in the :file:`Scripts/` directory."

#: ../../reference/ImageEnhance.rst:27
msgid "Classes"
msgstr "Classes"

#: ../../reference/ImageEnhance.rst:29
msgid ""
"All enhancement classes implement a common interface, containing a single"
" method:"
msgstr "All enhancement classes implement a common interface, containing a single method:"

#: ../../reference/ImageEnhance.rst:35
msgid "Returns an enhanced image."
msgstr "Returns an enhanced image."

#: ../../reference/ImageEnhance.rst
msgid "param factor"
msgstr "param factor"

#: ../../reference/ImageEnhance.rst:37
msgid ""
"A floating point value controlling the enhancement. Factor 1.0 always "
"returns a copy of the original image, lower factors mean less color "
"(brightness, contrast, etc), and higher values more. There are no "
"restrictions on this value."
msgstr ""

#: ../../reference/ImageEnhance.rst:45
msgid "Adjust image color balance."
msgstr "Adjust image color balance."

#: ../../reference/ImageEnhance.rst:47
msgid ""
"This class can be used to adjust the colour balance of an image, in a "
"manner similar to the controls on a colour TV set. An enhancement factor "
"of 0.0 gives a black and white image. A factor of 1.0 gives the original "
"image."
msgstr ""

#: ../../reference/ImageEnhance.rst:54
msgid "Adjust image contrast."
msgstr "Adjust image contrast."

#: ../../reference/ImageEnhance.rst:56
msgid ""
"This class can be used to control the contrast of an image, similar to "
"the contrast control on a TV set. An enhancement factor of 0.0 gives a "
"solid grey image. A factor of 1.0 gives the original image."
msgstr ""

#: ../../reference/ImageEnhance.rst:62
msgid "Adjust image brightness."
msgstr "Adjust image brightness."

#: ../../reference/ImageEnhance.rst:64
msgid ""
"This class can be used to control the brightness of an image.  An "
"enhancement factor of 0.0 gives a black image. A factor of 1.0 gives the "
"original image."
msgstr ""

#: ../../reference/ImageEnhance.rst:70
msgid "Adjust image sharpness."
msgstr "Adjust image sharpness."

#: ../../reference/ImageEnhance.rst:72
msgid ""
"This class can be used to adjust the sharpness of an image. An "
"enhancement factor of 0.0 gives a blurred image, a factor of 1.0 gives "
"the original image, and a factor of 2.0 gives a sharpened image."
msgstr ""

#: ../../reference/ImageFile.rst:5
msgid ":py:mod:`ImageFile` Module"
msgstr ":py:mod:`ImageFile` Module"

#: ../../reference/ImageFile.rst:7
msgid ""
"The :py:mod:`ImageFile` module provides support functions for the image "
"open and save functions."
msgstr "The :py:mod:`ImageFile` module provides support functions for the image open and save functions."

#: ../../reference/ImageFile.rst:10
msgid ""
"In addition, it provides a :py:class:`Parser` class which can be used to "
"decode an image piece by piece (e.g. while receiving it over a network "
"connection). This class implements the same consumer interface as the "
"standard **sgmllib** and **xmllib** modules."
msgstr ""

#: ../../reference/ImageFile.rst:16
msgid "Example: Parse an image"
msgstr "Example: Parse an image"

#: ../../reference/ImageFile.rst:38
msgid ":py:class:`~PIL.ImageFile.Parser`"
msgstr ":py:class:`~PIL.ImageFile.Parser`"

#: PIL.ImageFile.Parser:1 of
msgid ""
"Incremental image parser.  This class implements the standard feed/close "
"consumer interface."
msgstr "Incremental image parser.  This class implements the standard feed/close consumer interface."

#: PIL.ImageFile.Parser.close:1 of
msgid "(Consumer) Close the stream."
msgstr "(Consumer) Close the stream."

#: PIL.ImageFile.Parser.close:4 of
msgid ""
"If the parser failed to parse the image file either because it cannot be "
"identified or cannot be decoded."
msgstr "If the parser failed to parse the image file either because it cannot be identified or cannot be decoded."

#: PIL.ImageFile.Parser.feed:1 of
msgid "(Consumer) Feed data to the parser."
msgstr "(Consumer) Feed data to the parser."

#: PIL.ImageFile.Parser.feed:3 of
msgid "A string buffer."
msgstr "A string buffer."

#: PIL.ImageFile.Parser.feed:4 of
msgid "If the parser failed to parse the image file."
msgstr "If the parser failed to parse the image file."

#: PIL.ImageFile.Parser.reset:1 of
msgid ""
"(Consumer) Reset the parser.  Note that you can only call this method "
"immediately after you've created a parser; parser instances cannot be "
"reused."
msgstr ""

#: ../../reference/ImageFile.rst:44
msgid ":py:class:`~PIL.ImageFile.PyDecoder`"
msgstr ":py:class:`~PIL.ImageFile.PyDecoder`"

#: PIL.ImageFile.PyDecoder:1 of
msgid ""
"Python implementation of a format decoder. Override this class and add "
"the decoding logic in the `decode` method."
msgstr "Python implementation of a format decoder. Override this class and add the decoding logic in the `decode` method."

#: PIL.ImageFile.PyDecoder:4 of
msgid "See :ref:`Writing Your Own File Decoder in Python<file-decoders-py>`"
msgstr "See :ref:`Writing Your Own File Decoder in Python<file-decoders-py>`"

#: PIL.ImageFile.PyDecoder.cleanup:1 of
msgid "Override to perform decoder specific cleanup"
msgstr "Override to perform decoder specific cleanup"

#: PIL.ImageFile.PyDecoder.decode:1 PIL.MspImagePlugin.MspDecoder.decode:1
#: PIL.SgiImagePlugin.SGI16Decoder.decode:1 of
msgid "Override to perform the decoding process."
msgstr "Override to perform the decoding process."

#: PIL.ImageFile.PyDecoder.decode:3 PIL.MspImagePlugin.MspDecoder.decode:3
#: PIL.SgiImagePlugin.SGI16Decoder.decode:3 of
msgid "A bytes object with the data to be decoded."
msgstr "A bytes object with the data to be decoded."

#: PIL.ImageFile.PyDecoder.decode:4 PIL.MspImagePlugin.MspDecoder.decode:4
#: PIL.SgiImagePlugin.SGI16Decoder.decode:4 of
msgid ""
"A tuple of (bytes consumed, errcode). If finished with decoding return <0"
" for the bytes consumed. Err codes are from `ERRORS`"
msgstr "A tuple of (bytes consumed, errcode). If finished with decoding return <0 for the bytes consumed. Err codes are from `ERRORS`"

#: PIL.ImageFile.PyDecoder.init:1 of
msgid "Override to perform decoder specific initialization"
msgstr "Override to perform decoder specific initialization"

#: PIL.ImageFile.PyDecoder.init:3 of
msgid "Array of args items from the tile entry"
msgstr "Array of args items from the tile entry"

#: PIL.ImageFile.PyDecoder.set_as_raw:1 of
msgid "Convenience method to set the internal image from a stream of raw data"
msgstr "Convenience method to set the internal image from a stream of raw data"

#: PIL.ImageFile.PyDecoder.set_as_raw:3 of
msgid "Bytes to be set"
msgstr "Bytes to be set"

#: PIL.ImageFile.PyDecoder.set_as_raw:4 of
msgid ""
"The rawmode to be used for the decoder. If not specified, it will default"
" to the mode of the image"
msgstr "The rawmode to be used for the decoder. If not specified, it will default to the mode of the image"

#: PIL.ImageFile.PyDecoder.setfd:1 of
msgid "Called from ImageFile to set the python file-like object"
msgstr "Called from ImageFile to set the python file-like object"

#: PIL.ImageFile.PyDecoder.setfd:3 of
msgid "A python file-like object"
msgstr "A python file-like object"

#: PIL.ImageFile.PyDecoder.setimage:1 of
msgid "Called from ImageFile to set the core output image for the decoder"
msgstr "Called from ImageFile to set the core output image for the decoder"

#: PIL.ImageFile.PyDecoder.setimage:3 of
msgid "A core image object"
msgstr "A core image object"

#: PIL.ImageFile.PyDecoder.setimage:4 of
msgid "a 4 tuple of (x0, y0, x1, y1) defining the rectangle for this tile"
msgstr "a 4 tuple of (x0, y0, x1, y1) defining the rectangle for this tile"

#: ../../reference/ImageFilter.rst:5
msgid ":py:mod:`ImageFilter` Module"
msgstr ":py:mod:`ImageFilter` Module"

#: ../../reference/ImageFilter.rst:7
msgid ""
"The :py:mod:`ImageFilter` module contains definitions for a pre-defined "
"set of filters, which can be be used with the :py:meth:`Image.filter() "
"<PIL.Image.Image.filter>` method."
msgstr ""

#: ../../reference/ImageFilter.rst:12
msgid "Example: Filter an image"
msgstr "Example: Filter an image"

#: ../../reference/ImageFilter.rst:24
msgid "Filters"
msgstr "Filters"

#: ../../reference/ImageFilter.rst:26
msgid ""
"The current version of the library provides the following set of "
"predefined image enhancement filters:"
msgstr "The current version of the library provides the following set of predefined image enhancement filters:"

#: ../../reference/ImageFilter.rst:29
msgid "**BLUR**"
msgstr "**BLUR**"

#: ../../reference/ImageFilter.rst:30
msgid "**CONTOUR**"
msgstr "**CONTOUR**"

#: ../../reference/ImageFilter.rst:31
msgid "**DETAIL**"
msgstr "**DETAIL**"

#: ../../reference/ImageFilter.rst:32
msgid "**EDGE_ENHANCE**"
msgstr "**EDGE_ENHANCE**"

#: ../../reference/ImageFilter.rst:33
msgid "**EDGE_ENHANCE_MORE**"
msgstr "**EDGE_ENHANCE_MORE**"

#: ../../reference/ImageFilter.rst:34
msgid "**EMBOSS**"
msgstr "**EMBOSS**"

#: ../../reference/ImageFilter.rst:35
msgid "**FIND_EDGES**"
msgstr "**FIND_EDGES**"

#: ../../reference/ImageFilter.rst:36
msgid "**SHARPEN**"
msgstr "**SHARPEN**"

#: ../../reference/ImageFilter.rst:37
msgid "**SMOOTH**"
msgstr "**SMOOTH**"

#: ../../reference/ImageFilter.rst:38
msgid "**SMOOTH_MORE**"
msgstr "**SMOOTH_MORE**"

#: PIL.ImageFilter.Color3DLUT:1 of
msgid "Three-dimensional color lookup table."
msgstr "Three-dimensional color lookup table."

#: PIL.ImageFilter.Color3DLUT:3 of
msgid ""
"Transforms 3-channel pixels using the values of the channels as "
"coordinates in the 3D lookup table and interpolating the nearest "
"elements."
msgstr ""

#: PIL.ImageFilter.Color3DLUT:6 of
msgid ""
"This method allows you to apply almost any color transformation in "
"constant time by using pre-calculated decimated tables."
msgstr "This method allows you to apply almost any color transformation in constant time by using pre-calculated decimated tables."

#: PIL.ImageFilter.Color3DLUT:11 of
msgid ""
"Size of the table. One int or tuple of (int, int, int). Minimal size in "
"any dimension is 2, maximum is 65."
msgstr "Size of the table. One int or tuple of (int, int, int). Minimal size in any dimension is 2, maximum is 65."

#: PIL.ImageFilter.Color3DLUT:13 of
msgid ""
"Flat lookup table. A list of ``channels * size**3`` float elements or a "
"list of ``size**3`` channels-sized tuples with floats. Channels are "
"changed first, then first dimension, then second, then third. Value 0.0 "
"corresponds lowest value of output, 1.0 highest."
msgstr ""

#: PIL.ImageFilter.Color3DLUT:18 of
msgid "Number of channels in the table. Could be 3 or 4. Default is 3."
msgstr "Number of channels in the table. Could be 3 or 4. Default is 3."

#: PIL.ImageFilter.Color3DLUT:20 of
msgid ""
"A mode for the result image. Should have not less than ``channels`` "
"channels. Default is ``None``, which means that mode wouldn't be changed."
msgstr "A mode for the result image. Should have not less than ``channels`` channels. Default is ``None``, which means that mode wouldn't be changed."

#: PIL.ImageFilter.Color3DLUT.generate:1 of
msgid "Generates new LUT using provided callback."
msgstr "Generates new LUT using provided callback."

#: PIL.ImageFilter.Color3DLUT.generate:3 of
msgid "Size of the table. Passed to the constructor."
msgstr "Size of the table. Passed to the constructor."

#: PIL.ImageFilter.Color3DLUT.generate:4 of
msgid ""
"Function with three parameters which correspond three color channels. "
"Will be called ``size**3`` times with values from 0.0 to 1.0 and should "
"return a tuple with ``channels`` elements."
msgstr ""

#: PIL.ImageFilter.Color3DLUT.generate:8 of
msgid "The number of channels which should return callback."
msgstr "The number of channels which should return callback."

#: PIL.ImageFilter.Color3DLUT.generate:9
#: PIL.ImageFilter.Color3DLUT.transform:16 of
msgid "Passed to the constructor of the resulting lookup table."
msgstr "Passed to the constructor of the resulting lookup table."

#: PIL.ImageFilter.Color3DLUT.transform:1 of
msgid ""
"Transforms the table values using provided callback and returns a new LUT"
" with altered values."
msgstr "Transforms the table values using provided callback and returns a new LUT with altered values."

#: PIL.ImageFilter.Color3DLUT.transform:4 of
msgid ""
"A function which takes old lookup table values and returns a new set of "
"values. The number of arguments which function should take is "
"``self.channels`` or ``3 + self.channels`` if ``with_normals`` flag is "
"set. Should return a tuple of ``self.channels`` or ``channels`` elements "
"if it is set."
msgstr ""

#: PIL.ImageFilter.Color3DLUT.transform:11 of
msgid ""
"If true, ``callback`` will be called with coordinates in the color cube "
"as the first three arguments. Otherwise, ``callback`` will be called only"
" with actual color values."
msgstr ""

#: PIL.ImageFilter.Color3DLUT.transform:15 of
msgid "The number of channels in the resulting lookup table."
msgstr "The number of channels in the resulting lookup table."

#: PIL.ImageFilter.BoxBlur:1 of
msgid ""
"Blurs the image by setting each pixel to the average value of the pixels "
"in a square box extending radius pixels in each direction. Supports float"
" radius of arbitrary size. Uses an optimized implementation which runs in"
" linear time relative to the size of the image for any radius value."
msgstr ""

#: PIL.ImageFilter.BoxBlur:7 of
msgid ""
"Size of the box in one direction. Radius 0 does not blur, returns an "
"identical image. Radius 1 takes 1 pixel in each direction, i.e. 9 pixels "
"in total."
msgstr ""

#: PIL.ImageFilter.GaussianBlur:1 of
msgid "Gaussian blur filter."
msgstr "Gaussian blur filter."

#: PIL.ImageFilter.GaussianBlur:3 of
msgid "Blur radius."
msgstr "Blur radius."

#: PIL.ImageFilter.UnsharpMask:1 of
msgid "Unsharp mask filter."
msgstr "Unsharp mask filter."

#: PIL.ImageFilter.UnsharpMask:3 of
msgid ""
"See Wikipedia's entry on `digital unsharp masking`_ for an explanation of"
" the parameters."
msgstr "See Wikipedia's entry on `digital unsharp masking`_ for an explanation of the parameters."

#: PIL.ImageFilter.UnsharpMask:6 of
msgid "Blur Radius"
msgstr "Blur Radius"

#: PIL.ImageFilter.UnsharpMask:7 of
msgid "Unsharp strength, in percent"
msgstr "Unsharp strength, in percent"

#: PIL.ImageFilter.UnsharpMask:8 of
msgid "Threshold controls the minimum brightness change that will be sharpened"
msgstr "Threshold controls the minimum brightness change that will be sharpened"

#: PIL.ImageFilter.Kernel:1 of
msgid ""
"Create a convolution kernel.  The current version only supports 3x3 and "
"5x5 integer and floating point kernels."
msgstr "Create a convolution kernel.  The current version only supports 3x3 and 5x5 integer and floating point kernels."

#: PIL.ImageFilter.Kernel:4 of
msgid ""
"In the current version, kernels can only be applied to \"L\" and \"RGB\" "
"images."
msgstr "In the current version, kernels can only be applied to \"L\" and \"RGB\" images."

#: PIL.ImageFilter.Kernel:7 of
msgid ""
"Kernel size, given as (width, height). In the current version, this must "
"be (3,3) or (5,5)."
msgstr "Kernel size, given as (width, height). In the current version, this must be (3,3) or (5,5)."

#: PIL.ImageFilter.Kernel:9 of
msgid "A sequence containing kernel weights."
msgstr "A sequence containing kernel weights."

#: PIL.ImageFilter.Kernel:10 of
msgid ""
"Scale factor. If given, the result for each pixel is divided by this "
"value.  the default is the sum of the kernel weights."
msgstr "Scale factor. If given, the result for each pixel is divided by this value.  the default is the sum of the kernel weights."

#: PIL.ImageFilter.Kernel:13 of
msgid ""
"Offset. If given, this value is added to the result, after it has been "
"divided by the scale factor."
msgstr "Offset. If given, this value is added to the result, after it has been divided by the scale factor."

#: PIL.ImageFilter.RankFilter:1 of
msgid ""
"Create a rank filter.  The rank filter sorts all pixels in a window of "
"the given size, and returns the **rank**'th value."
msgstr "Create a rank filter.  The rank filter sorts all pixels in a window of the given size, and returns the **rank**'th value."

#: PIL.ImageFilter.MaxFilter:4 PIL.ImageFilter.MedianFilter:4
#: PIL.ImageFilter.MinFilter:4 PIL.ImageFilter.ModeFilter:5
#: PIL.ImageFilter.RankFilter:4 of
msgid "The kernel size, in pixels."
msgstr "The kernel size, in pixels."

#: PIL.ImageFilter.RankFilter:5 of
msgid ""
"What pixel value to pick.  Use 0 for a min filter, ``size * size / 2`` "
"for a median filter, ``size * size - 1`` for a max filter, etc."
msgstr "What pixel value to pick.  Use 0 for a min filter, ``size * size / 2`` for a median filter, ``size * size - 1`` for a max filter, etc."

#: PIL.ImageFilter.MedianFilter:1 of
msgid ""
"Create a median filter. Picks the median pixel value in a window with the"
" given size."
msgstr "Create a median filter. Picks the median pixel value in a window with the given size."

#: PIL.ImageFilter.MinFilter:1 of
msgid ""
"Create a min filter.  Picks the lowest pixel value in a window with the "
"given size."
msgstr "Create a min filter.  Picks the lowest pixel value in a window with the given size."

#: PIL.ImageFilter.MaxFilter:1 of
msgid ""
"Create a max filter.  Picks the largest pixel value in a window with the "
"given size."
msgstr "Create a max filter.  Picks the largest pixel value in a window with the given size."

#: PIL.ImageFilter.ModeFilter:1 of
msgid ""
"Create a mode filter. Picks the most frequent pixel value in a box with "
"the given size.  Pixel values that occur only once or twice are ignored; "
"if no pixel value occurs more than twice, the original pixel value is "
"preserved."
msgstr ""

#: ../../reference/ImageFont.rst:5
msgid ":py:mod:`ImageFont` Module"
msgstr ":py:mod:`ImageFont` Module"

#: ../../reference/ImageFont.rst:7
msgid ""
"The :py:mod:`ImageFont` module defines a class with the same name. "
"Instances of this class store bitmap fonts, and are used with the "
":py:meth:`PIL.ImageDraw.Draw.text` method."
msgstr ""

#: ../../reference/ImageFont.rst:11
msgid ""
"PIL uses its own font file format to store bitmap fonts. You can use the "
":command:`pilfont` utility to convert BDF and PCF font descriptors (X "
"window font formats) to this format."
msgstr ""

#: ../../reference/ImageFont.rst:15
msgid ""
"Starting with version 1.1.4, PIL can be configured to support TrueType "
"and OpenType fonts (as well as other font formats supported by the "
"FreeType library). For earlier versions, TrueType support is only "
"available as part of the imToolkit package"
msgstr ""

#: ../../reference/ImageFont.rst:21 ../../reference/PixelAccess.rst:12
#: ../../reference/PyAccess.rst:14
msgid "Example"
msgstr "Example"

#: PIL.ImageFont.load:1 of
msgid ""
"Load a font file.  This function loads a font object from the given "
"bitmap font file, and returns the corresponding font object."
msgstr "Load a font file.  This function loads a font object from the given bitmap font file, and returns the corresponding font object."

#: PIL.ImageFont.load:4 PIL.ImageFont.load_path:4 of
msgid "Name of font file."
msgstr "Name of font file."

#: PIL.ImageFont.load:5 PIL.ImageFont.load_default:5 PIL.ImageFont.load_path:5
#: PIL.ImageFont.truetype:43 of
msgid "A font object."
msgstr "A font object."

#: PIL.ImageFont.load:6 PIL.ImageFont.load_path:6 PIL.ImageFont.truetype:44 of
msgid "If the file could not be read."
msgstr "If the file could not be read."

#: PIL.ImageFont.load_path:1 of
msgid ""
"Load font file. Same as :py:func:`~PIL.ImageFont.load`, but searches for "
"a bitmap font along the Python path."
msgstr "Load font file. Same as :py:func:`~PIL.ImageFont.load`, but searches for a bitmap font along the Python path."

#: PIL.ImageFont.truetype:1 of
msgid ""
"Load a TrueType or OpenType font from a file or file-like object, and "
"create a font object. This function loads a font object from the given "
"file or file-like object, and creates a font object for a font of the "
"given size."
msgstr ""

#: PIL.ImageFont.truetype:6 of
msgid ""
"Pillow uses FreeType to open font files. If you are opening many fonts "
"simultaneously on Windows, be aware that Windows limits the number of "
"files that can be open in C at once to 512. If you approach that limit, "
"an ``OSError`` may be thrown, reporting that FreeType \"cannot open "
"resource\"."
msgstr ""

#: PIL.ImageFont.truetype:11 of
msgid "This function requires the _imagingft service."
msgstr "This function requires the _imagingft service."

#: PIL.ImageFont.truetype:13 of
msgid ""
"A filename or file-like object containing a TrueType font. If the file is"
" not found in this filename, the loader may also search in other "
"directories, such as the :file:`fonts/` directory on Windows or "
":file:`/Library/Fonts/`, :file:`/System/Library/Fonts/` and "
":file:`~/Library/Fonts/` on macOS."
msgstr ""

#: PIL.ImageFont.truetype:20 of
msgid "The requested size, in points."
msgstr "The requested size, in points."

#: PIL.ImageFont.truetype:21 of
msgid "Which font face to load (default is first available face)."
msgstr "Which font face to load (default is first available face)."

#: PIL.ImageFont.truetype:22 of
msgid ""
"Which font encoding to use (default is Unicode). Possible encodings "
"include (see the FreeType documentation for more information):  * "
"\"unic\" (Unicode) * \"symb\" (Microsoft Symbol) * \"ADOB\" (Adobe "
"Standard) * \"ADBE\" (Adobe Expert) * \"ADBC\" (Adobe Custom) * \"armn\" "
"(Apple Roman) * \"sjis\" (Shift JIS) * \"gb  \" (PRC) * \"big5\" * "
"\"wans\" (Extended Wansung) * \"joha\" (Johab) * \"lat1\" (Latin-1)  This"
" specifies the character set to use. It does not alter the encoding of "
"any text provided in subsequent operations."
msgstr ""

#: PIL.ImageFont.truetype:22 of
msgid ""
"Which font encoding to use (default is Unicode). Possible encodings "
"include (see the FreeType documentation for more information):"
msgstr "Which font encoding to use (default is Unicode). Possible encodings include (see the FreeType documentation for more information):"

#: PIL.ImageFont.truetype:26 of
msgid "\"unic\" (Unicode)"
msgstr "\"unic\" (Unicode)"

#: PIL.ImageFont.truetype:27 of
msgid "\"symb\" (Microsoft Symbol)"
msgstr "\"symb\" (Microsoft Symbol)"

#: PIL.ImageFont.truetype:28 of
msgid "\"ADOB\" (Adobe Standard)"
msgstr "\"ADOB\" (Adobe Standard)"

#: PIL.ImageFont.truetype:29 of
msgid "\"ADBE\" (Adobe Expert)"
msgstr "\"ADBE\" (Adobe Expert)"

#: PIL.ImageFont.truetype:30 of
msgid "\"ADBC\" (Adobe Custom)"
msgstr "\"ADBC\" (Adobe Custom)"

#: PIL.ImageFont.truetype:31 of
msgid "\"armn\" (Apple Roman)"
msgstr "\"armn\" (Apple Roman)"

#: PIL.ImageFont.truetype:32 of
msgid "\"sjis\" (Shift JIS)"
msgstr "\"sjis\" (Shift JIS)"

#: PIL.ImageFont.truetype:33 of
msgid "\"gb  \" (PRC)"
msgstr "\"gb  \" (PRC)"

#: PIL.ImageFont.truetype:34 of
msgid "\"big5\""
msgstr "\"big5\""

#: PIL.ImageFont.truetype:35 of
msgid "\"wans\" (Extended Wansung)"
msgstr "\"wans\" (Extended Wansung)"

#: PIL.ImageFont.truetype:36 of
msgid "\"joha\" (Johab)"
msgstr "\"joha\" (Johab)"

#: PIL.ImageFont.truetype:37 of
msgid "\"lat1\" (Latin-1)"
msgstr "\"lat1\" (Latin-1)"

#: PIL.ImageFont.truetype:39 of
msgid ""
"This specifies the character set to use. It does not alter the encoding "
"of any text provided in subsequent operations."
msgstr "This specifies the character set to use. It does not alter the encoding of any text provided in subsequent operations."

#: PIL.ImageFont.truetype:41 of
msgid ""
"Which layout engine to use, if available: `ImageFont.LAYOUT_BASIC` or "
"`ImageFont.LAYOUT_RAQM`."
msgstr "Which layout engine to use, if available: `ImageFont.LAYOUT_BASIC` or `ImageFont.LAYOUT_RAQM`."

#: PIL.ImageFont.load_default:1 of
msgid "Load a \"better than nothing\" default font."
msgstr "Load a \"better than nothing\" default font."

#: PIL.ImageFont.ImageFont:1 of
msgid "PIL font wrapper"
msgstr "PIL font wrapper"

#: PIL.ImageFont.FreeTypeFont.getmask:1 PIL.ImageFont.FreeTypeFont.getmask2:1
#: PIL.ImageFont.ImageFont.getmask:1 of
msgid "Create a bitmap for the text."
msgstr "Create a bitmap for the text."

#: PIL.ImageFont.FreeTypeFont.getmask:3 PIL.ImageFont.FreeTypeFont.getmask2:3
#: PIL.ImageFont.ImageFont.getmask:3 of
msgid ""
"If the font uses antialiasing, the bitmap should have mode ``L`` and use "
"a maximum value of 255. Otherwise, it should have mode ``1``."
msgstr "If the font uses antialiasing, the bitmap should have mode ``L`` and use a maximum value of 255. Otherwise, it should have mode ``1``."

#: PIL.ImageFont.FreeTypeFont.getmask:6 PIL.ImageFont.FreeTypeFont.getmask2:6
#: PIL.ImageFont.ImageFont.getmask:6 of
msgid "Text to render."
msgstr "Text to render."

#: PIL.ImageFont.FreeTypeFont.getmask:7 PIL.ImageFont.FreeTypeFont.getmask2:7
#: PIL.ImageFont.ImageFont.getmask:7 of
msgid ""
"Used by some graphics drivers to indicate what mode the driver prefers; "
"if empty, the renderer may return either mode. Note that the mode is "
"always a string, to simplify C-level implementations.  .. versionadded:: "
"1.1.5"
msgstr ""

#: PIL.ImageFont.FreeTypeFont.getmask:7 PIL.ImageFont.FreeTypeFont.getmask2:7
#: PIL.ImageFont.ImageFont.getmask:7 of
msgid ""
"Used by some graphics drivers to indicate what mode the driver prefers; "
"if empty, the renderer may return either mode. Note that the mode is "
"always a string, to simplify C-level implementations."
msgstr ""

#: PIL.ImageFont.FreeTypeFont.getmask:47 PIL.ImageFont.ImageFont.getmask:14 of
msgid ""
"An internal PIL storage memory instance as defined by the "
":py:mod:`PIL.Image.core` interface module."
msgstr "An internal PIL storage memory instance as defined by the :py:mod:`PIL.Image.core` interface module."

#: PIL.ImageFont.ImageFont.getsize:1 of
msgid "Returns width and height (in pixels) of given text."
msgstr "Returns width and height (in pixels) of given text."

#: PIL.ImageFont.FreeTypeFont.getoffset:5 PIL.ImageFont.FreeTypeFont.getsize:4
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:5
#: PIL.ImageFont.ImageFont.getsize:3 of
msgid "Text to measure."
msgstr "Text to measure."

#: PIL.ImageFont.FreeTypeFont.getsize:39
#: PIL.ImageFont.FreeTypeFont.getsize_multiline:38
#: PIL.ImageFont.ImageFont.getsize:5 of
msgid "(width, height)"
msgstr "(width, height)"

#: PIL.ImageFont.FreeTypeFont:1 of
msgid "FreeType font wrapper (requires _imagingft service)"
msgstr "FreeType font wrapper (requires _imagingft service)"

#: PIL.ImageFont.FreeTypeFont.font_variant:1 of
msgid ""
"Create a copy of this FreeTypeFont object, using any specified arguments "
"to override the settings."
msgstr "Create a copy of this FreeTypeFont object, using any specified arguments to override the settings."

#: PIL.ImageFont.FreeTypeFont.font_variant:4 of
msgid "Parameters are identical to the parameters used to initialize this object."
msgstr "Parameters are identical to the parameters used to initialize this object."

#: PIL.ImageFont.FreeTypeFont.font_variant:7 of
msgid "A FreeTypeFont object."
msgstr "A FreeTypeFont object."

#: PIL.ImageFont.FreeTypeFont.get_variation_axes:1 of
msgid "A list of the axes in a variation font."
msgstr "A list of the axes in a variation font."

#: PIL.ImageFont.FreeTypeFont.get_variation_axes:2
#: PIL.ImageFont.FreeTypeFont.get_variation_names:2
#: PIL.ImageFont.FreeTypeFont.set_variation_by_axes:2
#: PIL.ImageFont.FreeTypeFont.set_variation_by_name:2 of
msgid "If the font is not a variation font."
msgstr "If the font is not a variation font."

#: PIL.ImageFont.FreeTypeFont.get_variation_names:1 of
msgid "A list of the named styles in a variation font."
msgstr "A list of the named styles in a variation font."

#: PIL.ImageFont.FreeTypeFont.getmask2:47 of
msgid ""
"A tuple of an internal PIL storage memory instance as defined by the "
":py:mod:`PIL.Image.core` interface module, and the text offset, the gap "
"between the starting coordinate and the first marking"
msgstr ""

#: PIL.ImageFont.FreeTypeFont.getmetrics:1 of
msgid ""
"A tuple of the font ascent (the distance from the baseline to the highest"
" outline point) and descent (the distance from the baseline to the lowest"
" outline point, a negative value)"
msgstr ""

#: PIL.ImageFont.FreeTypeFont.getname:1 of
msgid "A tuple of the font family (e.g. Helvetica) and the font style (e.g. Bold)"
msgstr "A tuple of the font family (e.g. Helvetica) and the font style (e.g. Bold)"

#: PIL.ImageFont.FreeTypeFont.getoffset:1 of
msgid ""
"Returns the offset of given text. This is the gap between the starting "
"coordinate and the first marking. Note that this gap is included in the "
"result of :py:func:`~PIL.ImageFont.FreeTypeFont.getsize`."
msgstr ""

#: PIL.ImageFont.FreeTypeFont.getoffset:7 of
msgid "A tuple of the x and y offset"
msgstr "A tuple of the x and y offset"

#: PIL.ImageFont.FreeTypeFont.getsize:1 of
msgid ""
"Returns width and height (in pixels) of given text if rendered in font "
"with provided direction, features, and language."
msgstr "Returns width and height (in pixels) of given text if rendered in font with provided direction, features, and language."

#: PIL.ImageFont.FreeTypeFont.getsize_multiline:1 of
msgid ""
"Returns width and height (in pixels) of given text if rendered in font "
"with provided direction, features, and language, while respecting newline"
" characters."
msgstr ""

#: PIL.ImageFont.FreeTypeFont.getsize_multiline:11 of
msgid "The vertical gap between lines, defaulting to 4 pixels."
msgstr "The vertical gap between lines, defaulting to 4 pixels."

#: PIL.ImageFont.FreeTypeFont.set_variation_by_axes:1 of
msgid "A list of values for each axis."
msgstr "A list of values for each axis."

#: PIL.ImageFont.FreeTypeFont.set_variation_by_name:1 of
msgid "The name of the style."
msgstr "The name of the style."

#: PIL.ImageFont.TransposedFont:1 of
msgid "Wrapper for writing rotated or mirrored text"
msgstr "Wrapper for writing rotated or mirrored text"

#: ../../reference/ImageGrab.rst:5
msgid ":py:mod:`ImageGrab` Module (macOS and Windows only)"
msgstr ":py:mod:`ImageGrab` Module (macOS and Windows only)"

#: ../../reference/ImageGrab.rst:7
msgid ""
"The :py:mod:`ImageGrab` module can be used to copy the contents of the "
"screen or the clipboard to a PIL image memory."
msgstr "The :py:mod:`ImageGrab` module can be used to copy the contents of the screen or the clipboard to a PIL image memory."

#: ../../reference/ImageGrab.rst:10
msgid "The current version works on macOS and Windows only."
msgstr "The current version works on macOS and Windows only."

#: ../../reference/ImageGrab.rst:16
msgid ""
"Take a snapshot of the screen. The pixels inside the bounding box are "
"returned as an \"RGB\" image on Windows or \"RGBA\" on macOS. If the "
"bounding box is omitted, the entire screen is copied."
msgstr ""

#: ../../reference/ImageGrab.rst:20
msgid "(Windows), 3.0.0 (macOS)"
msgstr "(Windows), 3.0.0 (macOS)"

#: ../../reference/ImageGrab.rst:22
msgid ""
"What region to copy. Default is the entire screen. Note that on Windows "
"OS, the top-left point may be negative if ``all_screens=True`` is used."
msgstr "What region to copy. Default is the entire screen. Note that on Windows OS, the top-left point may be negative if ``all_screens=True`` is used."

#: ../../reference/ImageGrab.rst:24
msgid "Includes layered windows. Windows OS only.  .. versionadded:: 6.1.0"
msgstr "Includes layered windows. Windows OS only.  .. versionadded:: 6.1.0"

#: ../../reference/ImageGrab.rst:24
msgid "Includes layered windows. Windows OS only."
msgstr "Includes layered windows. Windows OS only."

#: ../../reference/ImageGrab.rst:27
msgid "Capture all monitors. Windows OS only.  .. versionadded:: 6.2.0"
msgstr "Capture all monitors. Windows OS only.  .. versionadded:: 6.2.0"

#: ../../reference/ImageGrab.rst:27
msgid "Capture all monitors. Windows OS only."
msgstr "Capture all monitors. Windows OS only."

#: ../../reference/ImageGrab.rst:30
msgid "An image"
msgstr "An image"

#: ../../reference/ImageGrab.rst:34
msgid "Take a snapshot of the clipboard image, if any."
msgstr "Take a snapshot of the clipboard image, if any."

#: ../../reference/ImageGrab.rst:36
msgid "(Windows), 3.3.0 (macOS)"
msgstr "(Windows), 3.3.0 (macOS)"

#: ../../reference/ImageGrab.rst:38
msgid ""
"On Windows, an image, a list of filenames, or None if the clipboard does "
"not contain image data or filenames. Note that if a list is returned, the"
" filenames may not represent image files.  On Mac, an image, or None if "
"the clipboard does not contain image data."
msgstr ""

#: ../../reference/ImageGrab.rst:38
msgid ""
"On Windows, an image, a list of filenames, or None if the clipboard does "
"not contain image data or filenames. Note that if a list is returned, the"
" filenames may not represent image files."
msgstr ""

#: ../../reference/ImageGrab.rst:42
msgid "On Mac, an image, or None if the clipboard does not contain image data."
msgstr "On Mac, an image, or None if the clipboard does not contain image data."

#: ../../reference/ImageMath.rst:5
msgid ":py:mod:`ImageMath` Module"
msgstr ":py:mod:`ImageMath` Module"

#: ../../reference/ImageMath.rst:7
msgid ""
"The :py:mod:`ImageMath` module can be used to evaluate “image "
"expressions”. The module provides a single :py:meth:`~PIL.ImageMath.eval`"
" function, which takes an expression string and one or more images."
msgstr ""

#: ../../reference/ImageMath.rst:12
msgid "Example: Using the :py:mod:`~PIL.ImageMath` module"
msgstr "Example: Using the :py:mod:`~PIL.ImageMath` module"

#: ../../reference/ImageMath.rst:26
msgid "Evaluate expression in the given environment."
msgstr "Evaluate expression in the given environment."

#: ../../reference/ImageMath.rst:28
msgid ""
"In the current version, :py:mod:`~PIL.ImageMath` only supports single-"
"layer images. To process multi-band images, use the "
":py:meth:`~PIL.Image.Image.split` method or :py:func:`~PIL.Image.merge` "
"function."
msgstr ""

#: ../../reference/ImageMath.rst:33
msgid ""
"A string which uses the standard Python expression syntax. In addition to"
" the standard operators, you can also use the functions described below."
msgstr "A string which uses the standard Python expression syntax. In addition to the standard operators, you can also use the functions described below."

#: ../../reference/ImageMath.rst:36
msgid ""
"A dictionary that maps image names to Image instances. You can use one or"
" more keyword arguments instead of a dictionary, as shown in the above "
"example. Note that the names must be valid Python identifiers."
msgstr ""

#: ../../reference/ImageMath.rst:40
msgid ""
"An image, an integer value, a floating point value, or a pixel tuple, "
"depending on the expression."
msgstr "An image, an integer value, a floating point value, or a pixel tuple, depending on the expression."

#: ../../reference/ImageMath.rst:44
msgid "Expression syntax"
msgstr "Expression syntax"

#: ../../reference/ImageMath.rst:46
msgid ""
"Expressions are standard Python expressions, but they’re evaluated in a "
"non-standard environment. You can use PIL methods as usual, plus the "
"following set of operators and functions:"
msgstr ""

#: ../../reference/ImageMath.rst:51
msgid "Standard Operators"
msgstr "Standard Operators"

#: ../../reference/ImageMath.rst:53
msgid ""
"You can use standard arithmetical operators for addition (+), subtraction"
" (-), multiplication (*), and division (/)."
msgstr "You can use standard arithmetical operators for addition (+), subtraction (-), multiplication (*), and division (/)."

#: ../../reference/ImageMath.rst:56
msgid ""
"The module also supports unary minus (-), modulo (%), and power (**) "
"operators."
msgstr "The module also supports unary minus (-), modulo (%), and power (**) operators."

#: ../../reference/ImageMath.rst:58
msgid ""
"Note that all operations are done with 32-bit integers or 32-bit floating"
" point values, as necessary. For example, if you add two 8-bit images, "
"the result will be a 32-bit integer image. If you add a floating point "
"constant to an 8-bit image, the result will be a 32-bit floating point "
"image."
msgstr ""

#: ../../reference/ImageMath.rst:63
msgid ""
"You can force conversion using the :py:func:`~PIL.ImageMath.convert`, "
":py:func:`~PIL.ImageMath.float`, and :py:func:`~PIL.ImageMath.int` "
"functions described below."
msgstr ""

#: ../../reference/ImageMath.rst:68
msgid "Bitwise Operators"
msgstr "Bitwise Operators"

#: ../../reference/ImageMath.rst:70
msgid ""
"The module also provides operations that operate on individual bits. This"
" includes and (&), or (|), and exclusive or (^). You can also invert (~) "
"all pixel bits."
msgstr ""

#: ../../reference/ImageMath.rst:74
msgid ""
"Note that the operands are converted to 32-bit signed integers before the"
" bitwise operation is applied. This means that you’ll get negative values"
" if you invert an ordinary greyscale image. You can use the and (&) "
"operator to mask off unwanted bits."
msgstr ""

#: ../../reference/ImageMath.rst:79
msgid "Bitwise operators don’t work on floating point images."
msgstr "Bitwise operators don’t work on floating point images."

#: ../../reference/ImageMath.rst:82
msgid "Logical Operators"
msgstr "Logical Operators"

#: ../../reference/ImageMath.rst:84
msgid ""
"Logical operators like ``and``, ``or``, and ``not`` work on entire "
"images, rather than individual pixels."
msgstr "Logical operators like ``and``, ``or``, and ``not`` work on entire images, rather than individual pixels."

#: ../../reference/ImageMath.rst:87
msgid ""
"An empty image (all pixels zero) is treated as false. All other images "
"are treated as true."
msgstr "An empty image (all pixels zero) is treated as false. All other images are treated as true."

#: ../../reference/ImageMath.rst:90
msgid ""
"Note that ``and`` and ``or`` return the last evaluated operand, while not"
" always returns a boolean value."
msgstr "Note that ``and`` and ``or`` return the last evaluated operand, while not always returns a boolean value."

#: ../../reference/ImageMath.rst:94
msgid "Built-in Functions"
msgstr "Built-in Functions"

#: ../../reference/ImageMath.rst:96
msgid "These functions are applied to each individual pixel."
msgstr "These functions are applied to each individual pixel."

#: ../../reference/ImageMath.rst:102
msgid "Absolute value."
msgstr "Absolute value."

#: ../../reference/ImageMath.rst:106
msgid ""
"Convert image to the given mode. The mode must be given as a string "
"constant."
msgstr "Convert image to the given mode. The mode must be given as a string constant."

#: ../../reference/ImageMath.rst:111
msgid ""
"Convert image to 32-bit floating point. This is equivalent to "
"convert(image, “F”)."
msgstr "Convert image to 32-bit floating point. This is equivalent to convert(image, “F”)."

#: ../../reference/ImageMath.rst:116
msgid ""
"Convert image to 32-bit integer. This is equivalent to convert(image, "
"“I”)."
msgstr "Convert image to 32-bit integer. This is equivalent to convert(image, “I”)."

#: ../../reference/ImageMath.rst:118
msgid ""
"Note that 1-bit and 8-bit images are automatically converted to 32-bit "
"integers if necessary to get a correct result."
msgstr "Note that 1-bit and 8-bit images are automatically converted to 32-bit integers if necessary to get a correct result."

#: ../../reference/ImageMath.rst:123
msgid "Maximum value."
msgstr "Maximum value."

#: ../../reference/ImageMath.rst:127
msgid "Minimum value."
msgstr "Minimum value."

#: ../../reference/ImageMorph.rst:5
msgid ":py:mod:`ImageMorph` Module"
msgstr ":py:mod:`ImageMorph` Module"

#: ../../reference/ImageMorph.rst:7
msgid "The :py:mod:`ImageMorph` module provides morphology operations on images."
msgstr "The :py:mod:`ImageMorph` module provides morphology operations on images."

#: PIL.EpsImagePlugin.PSFile:1 PIL.IcnsImagePlugin.IcnsFile:1
#: PIL.IcoImagePlugin.IcoFile:1 PIL.ImageMorph.LutBuilder:1
#: PIL.ImageMorph.MorphOp:1 PIL.MpegImagePlugin.BitStream:1
#: PIL.PngImagePlugin.ChunkStream:1 PIL.TiffImagePlugin.AppendingTiffWriter:1
#: of
msgid "基类：:class:`object`"
msgstr "基类：:class:`object`"

#: PIL.ImageMorph.LutBuilder:1 of
msgid "A class for building a MorphLut from a descriptive language"
msgstr "A class for building a MorphLut from a descriptive language"

#: PIL.ImageMorph.LutBuilder:3 of
msgid "The input patterns is a list of a strings sequences like these::"
msgstr "The input patterns is a list of a strings sequences like these::"

#: PIL.ImageMorph.LutBuilder:9 of
msgid ""
"(whitespaces including linebreaks are ignored). The option 4 describes a "
"series of symmetry operations (in this case a 4-rotation), the pattern is"
" described by:"
msgstr ""

#: PIL.ImageMorph.LutBuilder:13 of
msgid ". or X - Ignore"
msgstr ". or X - Ignore"

#: PIL.ImageMorph.LutBuilder:14 of
msgid "1 - Pixel is on"
msgstr "1 - Pixel is on"

#: PIL.ImageMorph.LutBuilder:15 of
msgid "0 - Pixel is off"
msgstr "0 - Pixel is off"

#: PIL.ImageMorph.LutBuilder:17 of
msgid "The result of the operation is described after \"->\" string."
msgstr "The result of the operation is described after \"->\" string."

#: PIL.ImageMorph.LutBuilder:19 of
msgid ""
"The default is to return the current pixel value, which is returned if no"
" other match is found."
msgstr "The default is to return the current pixel value, which is returned if no other match is found."

#: PIL.ImageMorph.LutBuilder:22 of
msgid "Operations:"
msgstr "Operations:"

#: PIL.ImageMorph.LutBuilder:24 of
msgid "4 - 4 way rotation"
msgstr "4 - 4 way rotation"

#: PIL.ImageMorph.LutBuilder:25 of
msgid "N - Negate"
msgstr "N - Negate"

#: PIL.ImageMorph.LutBuilder:26 of
msgid "1 - Dummy op for no other operation (an op must always be given)"
msgstr "1 - Dummy op for no other operation (an op must always be given)"

#: PIL.ImageMorph.LutBuilder:27 of
msgid "M - Mirroring"
msgstr "M - Mirroring"

#: PIL.ImageMorph.LutBuilder:29 of
msgid "Example::"
msgstr "Example::"

#: PIL.ImageMorph.LutBuilder.build_lut:1 of
msgid "Compile all patterns into a morphology lut."
msgstr "Compile all patterns into a morphology lut."

#: PIL.ImageMorph.LutBuilder.build_lut:3 of
msgid "TBD :Build based on (file) morphlut:modify_lut"
msgstr "TBD :Build based on (file) morphlut:modify_lut"

#: PIL.ImageMorph.MorphOp:1 of
msgid "A class for binary morphological operators"
msgstr "A class for binary morphological operators"

#: PIL.ImageMorph.MorphOp.apply:1 of
msgid "Run a single morphological operation on an image"
msgstr "Run a single morphological operation on an image"

#: PIL.ImageMorph.MorphOp.apply:3 of
msgid "Returns a tuple of the number of changed pixels and the morphed image"
msgstr "Returns a tuple of the number of changed pixels and the morphed image"

#: PIL.ImageMorph.MorphOp.get_on_pixels:1 of
msgid "Get a list of all turned on pixels in a binary image"
msgstr "Get a list of all turned on pixels in a binary image"

#: PIL.ImageMorph.MorphOp.get_on_pixels:3 PIL.ImageMorph.MorphOp.match:4 of
msgid ""
"Returns a list of tuples of (x,y) coordinates of all matching pixels. See"
" :ref:`coordinate-system`."
msgstr "Returns a list of tuples of (x,y) coordinates of all matching pixels. See :ref:`coordinate-system`."

#: PIL.ImageMorph.MorphOp.load_lut:1 of
msgid "Load an operator from an mrl file"
msgstr "Load an operator from an mrl file"

#: PIL.ImageMorph.MorphOp.match:1 of
msgid ""
"Get a list of coordinates matching the morphological operation on an "
"image."
msgstr "Get a list of coordinates matching the morphological operation on an image."

#: PIL.ImageMorph.MorphOp.save_lut:1 of
msgid "Save an operator to an mrl file"
msgstr "Save an operator to an mrl file"

#: PIL.ImageMorph.MorphOp.set_lut:1 of
msgid "Set the lut from an external source"
msgstr "Set the lut from an external source"

#: ../../reference/ImageOps.rst:5
msgid ":py:mod:`ImageOps` Module"
msgstr ":py:mod:`ImageOps` Module"

#: ../../reference/ImageOps.rst:7
msgid ""
"The :py:mod:`ImageOps` module contains a number of ‘ready-made’ image "
"processing operations. This module is somewhat experimental, and most "
"operators only work on L and RGB images."
msgstr ""

#: PIL.ImageOps.autocontrast:1 of
msgid ""
"Maximize (normalize) image contrast. This function calculates a histogram"
" of the input image, removes **cutoff** percent of the lightest and "
"darkest pixels from the histogram, and remaps the image so that the "
"darkest pixel becomes black (0), and the lightest becomes white (255)."
msgstr ""

#: PIL.ImageOps.autocontrast:7 of
msgid "The image to process."
msgstr "The image to process."

#: PIL.ImageOps.autocontrast:8 of
msgid "How many percent to cut off from the histogram."
msgstr "How many percent to cut off from the histogram."

#: PIL.ImageOps.autocontrast:9 of
msgid "The background pixel value (use None for no background)."
msgstr "The background pixel value (use None for no background)."

#: PIL.ImageOps.autocontrast:10 PIL.ImageOps.colorize:20 PIL.ImageOps.crop:8
#: PIL.ImageOps.deform:8 PIL.ImageOps.equalize:8 PIL.ImageOps.exif_transpose:5
#: PIL.ImageOps.expand:6 PIL.ImageOps.fit:25 PIL.ImageOps.flip:4
#: PIL.ImageOps.grayscale:4 PIL.ImageOps.invert:4 PIL.ImageOps.mirror:4
#: PIL.ImageOps.pad:17 PIL.ImageOps.posterize:5 PIL.ImageOps.solarize:5 of
msgid "An image."
msgstr "An image."

#: PIL.ImageOps.colorize:1 of
msgid ""
"Colorize grayscale image. This function calculates a color wedge which "
"maps all black pixels in the source image to the first color and all "
"white pixels to the second color. If **mid** is specified, it uses three-"
"color mapping. The **black** and **white** arguments should be RGB tuples"
" or color names; optionally you can use three-color mapping by also "
"specifying **mid**. Mapping positions for any of the colors can be "
"specified (e.g. **blackpoint**), where these parameters are the integer "
"value corresponding to where the corresponding color should be mapped. "
"These parameters must have logical order, such that **blackpoint** <= "
"**midpoint** <= **whitepoint** (if **mid** is specified)."
msgstr ""

#: PIL.ImageOps.colorize:13 of
msgid "The image to colorize."
msgstr "The image to colorize."

#: PIL.ImageOps.colorize:14 of
msgid "The color to use for black input pixels."
msgstr "The color to use for black input pixels."

#: PIL.ImageOps.colorize:15 of
msgid "The color to use for white input pixels."
msgstr "The color to use for white input pixels."

#: PIL.ImageOps.colorize:16 of
msgid "The color to use for midtone input pixels."
msgstr "The color to use for midtone input pixels."

#: PIL.ImageOps.colorize:17 of
msgid "an int value [0, 255] for the black mapping."
msgstr "an int value [0, 255] for the black mapping."

#: PIL.ImageOps.colorize:18 of
msgid "an int value [0, 255] for the white mapping."
msgstr "an int value [0, 255] for the white mapping."

#: PIL.ImageOps.colorize:19 of
msgid "an int value [0, 255] for the midtone mapping."
msgstr "an int value [0, 255] for the midtone mapping."

#: PIL.ImageOps.pad:1 of
msgid ""
"Returns a sized and padded version of the image, expanded to fill the "
"requested aspect ratio and size."
msgstr "Returns a sized and padded version of the image, expanded to fill the requested aspect ratio and size."

#: PIL.ImageOps.fit:6 PIL.ImageOps.pad:4 of
msgid "The image to size and crop."
msgstr "The image to size and crop."

#: PIL.ImageOps.fit:7 PIL.ImageOps.pad:5 of
msgid "The requested output size in pixels, given as a (width, height) tuple."
msgstr "The requested output size in pixels, given as a (width, height) tuple."

#: PIL.ImageOps.fit:9 PIL.ImageOps.pad:7 PIL.ImageOps.scale:7 of
msgid ""
"What resampling method to use. Default is :py:attr:`PIL.Image.BICUBIC`. "
"See :ref:`concept-filters`."
msgstr "What resampling method to use. Default is :py:attr:`PIL.Image.BICUBIC`. See :ref:`concept-filters`."

#: PIL.ImageOps.pad:9 of
msgid "The background color of the padded image."
msgstr "The background color of the padded image."

#: PIL.ImageOps.pad:10 of
msgid ""
"Control the position of the original image within the padded version."
"      (0.5, 0.5) will keep the image centered     (0, 0) will keep the "
"image aligned to the top left     (1, 1) will keep the image aligned to "
"the bottom     right"
msgstr ""

#: PIL.ImageOps.pad:10 of
msgid "Control the position of the original image within the padded version."
msgstr "Control the position of the original image within the padded version."

#: PIL.ImageOps.pad:13 of
msgid ""
"(0.5, 0.5) will keep the image centered (0, 0) will keep the image "
"aligned to the top left (1, 1) will keep the image aligned to the bottom "
"right"
msgstr ""

#: PIL.ImageOps.crop:1 of
msgid ""
"Remove border from image.  The same amount of pixels are removed from all"
" four sides.  This function works on all image modes."
msgstr "Remove border from image.  The same amount of pixels are removed from all four sides.  This function works on all image modes."

#: PIL.ImageOps.crop:4 of
msgid ":py:meth:`~PIL.Image.Image.crop`"
msgstr ":py:meth:`~PIL.Image.Image.crop`"

#: PIL.ImageOps.crop:6 of
msgid "The image to crop."
msgstr "The image to crop."

#: PIL.ImageOps.crop:7 of
msgid "The number of pixels to remove."
msgstr "The number of pixels to remove."

#: PIL.ImageOps.scale:1 of
msgid ""
"Returns a rescaled image by a specific factor given in parameter. A "
"factor greater than 1 expands the image, between 0 and 1 contracts the "
"image."
msgstr ""

#: PIL.ImageOps.scale:5 of
msgid "The image to rescale."
msgstr "The image to rescale."

#: PIL.ImageOps.scale:6 of
msgid "The expansion factor, as a float."
msgstr "The expansion factor, as a float."

#: PIL.ImageOps.deform:1 of
msgid "Deform the image."
msgstr "Deform the image."

#: PIL.ImageOps.deform:3 of
msgid "The image to deform."
msgstr "The image to deform."

#: PIL.ImageOps.deform:4 of
msgid ""
"A deformer object.  Any object that implements a **getmesh** method can "
"be used."
msgstr "A deformer object.  Any object that implements a **getmesh** method can be used."

#: PIL.ImageOps.deform:6 of
msgid ""
"An optional resampling filter. Same values possible as in the "
"PIL.Image.transform function."
msgstr "An optional resampling filter. Same values possible as in the PIL.Image.transform function."

#: PIL.ImageOps.equalize:1 of
msgid ""
"Equalize the image histogram. This function applies a non-linear mapping "
"to the input image, in order to create a uniform distribution of "
"grayscale values in the output image."
msgstr ""

#: PIL.ImageOps.equalize:5 of
msgid "The image to equalize."
msgstr "The image to equalize."

#: PIL.ImageOps.equalize:6 of
msgid ""
"An optional mask.  If given, only the pixels selected by the mask are "
"included in the analysis."
msgstr "An optional mask.  If given, only the pixels selected by the mask are included in the analysis."

#: PIL.ImageOps.expand:1 of
msgid "Add border to the image"
msgstr "Add border to the image"

#: PIL.ImageOps.expand:3 of
msgid "The image to expand."
msgstr "The image to expand."

#: PIL.ImageOps.expand:4 of
msgid "Border width, in pixels."
msgstr "Border width, in pixels."

#: PIL.ImageOps.expand:5 of
msgid "Pixel fill value (a color value).  Default is 0 (black)."
msgstr "Pixel fill value (a color value).  Default is 0 (black)."

#: PIL.ImageOps.fit:1 of
msgid ""
"Returns a sized and cropped version of the image, cropped to the "
"requested aspect ratio and size."
msgstr "Returns a sized and cropped version of the image, cropped to the requested aspect ratio and size."

#: PIL.ImageOps.fit:4 of
msgid "This function was contributed by Kevin Cazabon."
msgstr "This function was contributed by Kevin Cazabon."

#: PIL.ImageOps.fit:11 of
msgid ""
"Remove a border around the outside of the image from all four edges. The "
"value is a decimal percentage (use 0.01 for one percent). The default "
"value is 0 (no border). Cannot be greater than or equal to 0.5."
msgstr ""

#: PIL.ImageOps.fit:15 of
#, python-format
msgid ""
"Control the cropping position.  Use (0.5, 0.5) for center cropping (e.g. "
"if cropping the width, take 50% off of the left side, and therefore 50% "
"off the right side). (0.0, 0.0) will crop from the top left corner (i.e. "
"if cropping the width, take all of the crop off of the right side, and if"
" cropping the height, take all of it off the bottom).  (1.0, 0.0) will "
"crop from the bottom left corner, etc. (i.e. if cropping the width, take "
"all of the crop off the left side, and if cropping the height take none "
"from the top, and therefore all off the bottom)."
msgstr ""

#: PIL.ImageOps.flip:1 of
msgid "Flip the image vertically (top to bottom)."
msgstr "Flip the image vertically (top to bottom)."

#: PIL.ImageOps.flip:3 of
msgid "The image to flip."
msgstr "The image to flip."

#: PIL.ImageOps.grayscale:1 of
msgid "Convert the image to grayscale."
msgstr "Convert the image to grayscale."

#: PIL.ImageOps.grayscale:3 of
msgid "The image to convert."
msgstr "The image to convert."

#: PIL.ImageOps.invert:1 of
msgid "Invert (negate) the image."
msgstr "Invert (negate) the image."

#: PIL.ImageOps.invert:3 of
msgid "The image to invert."
msgstr "The image to invert."

#: PIL.ImageOps.mirror:1 of
msgid "Flip image horizontally (left to right)."
msgstr "Flip image horizontally (left to right)."

#: PIL.ImageOps.mirror:3 of
msgid "The image to mirror."
msgstr "The image to mirror."

#: PIL.ImageOps.posterize:1 of
msgid "Reduce the number of bits for each color channel."
msgstr "Reduce the number of bits for each color channel."

#: PIL.ImageOps.posterize:3 of
msgid "The image to posterize."
msgstr "The image to posterize."

#: PIL.ImageOps.posterize:4 of
msgid "The number of bits to keep for each channel (1-8)."
msgstr "The number of bits to keep for each channel (1-8)."

#: PIL.ImageOps.solarize:1 of
msgid "Invert all pixel values above a threshold."
msgstr "Invert all pixel values above a threshold."

#: PIL.ImageOps.solarize:3 of
msgid "The image to solarize."
msgstr "The image to solarize."

#: PIL.ImageOps.solarize:4 of
msgid "All pixels above this greyscale level are inverted."
msgstr "All pixels above this greyscale level are inverted."

#: PIL.ImageOps.exif_transpose:1 of
msgid ""
"If an image has an EXIF Orientation tag, return a new image that is "
"transposed accordingly. Otherwise, return a copy of the image."
msgstr "If an image has an EXIF Orientation tag, return a new image that is transposed accordingly. Otherwise, return a copy of the image."

#: PIL.ImageOps.exif_transpose:4 of
msgid "The image to transpose."
msgstr "The image to transpose."

#: ../../reference/ImagePalette.rst:5
msgid ":py:mod:`ImagePalette` Module"
msgstr ":py:mod:`ImagePalette` Module"

#: ../../reference/ImagePalette.rst:7
msgid ""
"The :py:mod:`ImagePalette` module contains a class of the same name to "
"represent the color palette of palette mapped images."
msgstr "The :py:mod:`ImagePalette` module contains a class of the same name to represent the color palette of palette mapped images."

#: ../../reference/ImagePalette.rst:12
msgid ""
"This module was never well-documented. It hasn't changed since 2001, "
"though, so it's probably safe for you to read the source code and puzzle "
"out the internals if you need to."
msgstr ""

#: ../../reference/ImagePalette.rst:16
msgid ""
"The :py:class:`~PIL.ImagePalette.ImagePalette` class has several methods,"
" but they are all marked as \"experimental.\" Read that as you will. The "
"``[source]`` link is there for a reason."
msgstr ""

#: PIL.ImagePalette.ImagePalette:1 of
msgid "Color palette for palette mapped images"
msgstr "Color palette for palette mapped images"

#: PIL.ImagePalette.ImagePalette:3 of
msgid ""
"The mode to use for the Palette. See: :ref:`concept-modes`. Defaults to "
"\"RGB\""
msgstr "The mode to use for the Palette. See: :ref:`concept-modes`. Defaults to \"RGB\""

#: PIL.ImagePalette.ImagePalette:5 of
msgid ""
"An optional palette. If given, it must be a bytearray, an array or a list"
" of ints between 0-255 and of length ``size`` times the number of colors "
"in ``mode``. The list must be aligned by channel (All R values must be "
"contiguous in the list before G and B values.) Defaults to 0 through 255 "
"per channel."
msgstr ""

#: PIL.ImagePalette.ImagePalette:10 of
msgid ""
"An optional palette size. If given, it cannot be equal to or greater than"
" 256. Defaults to 0."
msgstr "An optional palette size. If given, it cannot be equal to or greater than 256. Defaults to 0."

#: PIL.ImagePalette.ImagePalette.getcolor:1 of
msgid "Given an rgb tuple, allocate palette entry."
msgstr "Given an rgb tuple, allocate palette entry."

#: PIL.ImagePalette.ImagePalette.getdata:1 of
msgid ""
"Get palette contents in format suitable for the low-level "
"``im.putpalette`` primitive."
msgstr "Get palette contents in format suitable for the low-level ``im.putpalette`` primitive."

#: PIL.ImagePalette.ImagePalette.save:1 of
msgid "Save palette to text file."
msgstr "Save palette to text file."

#: PIL.ImagePalette.ImagePalette.tobytes:1
#: PIL.ImagePalette.ImagePalette.tostring:1 of
msgid "Convert palette to bytes."
msgstr "Convert palette to bytes."

#: ../../reference/ImagePath.rst:5
msgid ":py:mod:`ImagePath` Module"
msgstr ":py:mod:`ImagePath` Module"

#: ../../reference/ImagePath.rst:7
msgid ""
"The :py:mod:`ImagePath` module is used to store and manipulate "
"2-dimensional vector data. Path objects can be passed to the methods on "
"the :py:mod:`~PIL.ImageDraw` module."
msgstr ""

#: ../../reference/ImagePath.rst:13
msgid ""
"A path object. The coordinate list can be any sequence object containing "
"either 2-tuples [(x, y), …] or numeric values [x, y, …]."
msgstr "A path object. The coordinate list can be any sequence object containing either 2-tuples [(x, y), …] or numeric values [x, y, …]."

#: ../../reference/ImagePath.rst:16
msgid "You can also create a path object from another path object."
msgstr "You can also create a path object from another path object."

#: ../../reference/ImagePath.rst:18
msgid ""
"In 1.1.6 and later, you can also pass in any object that implements "
"Python’s buffer API. The buffer should provide read access, and contain C"
" floats in machine byte order."
msgstr ""

#: ../../reference/ImagePath.rst:22
msgid ""
"The path object implements most parts of the Python sequence interface, "
"and behaves like a list of (x, y) pairs. You can use len(), item access, "
"and slicing as usual. However, the current version does not support slice"
" assignment, or item and slice deletion."
msgstr ""

#: ../../reference/ImagePath.rst:27
msgid ""
"A sequence. The sequence can contain 2-tuples [(x, y), ...] or a flat "
"list of numbers [x, y, ...]."
msgstr "A sequence. The sequence can contain 2-tuples [(x, y), ...] or a flat list of numbers [x, y, ...]."

#: ../../reference/ImagePath.rst:32
msgid ""
"Compacts the path, by removing points that are close to each other. This "
"method modifies the path in place, and returns the number of points left "
"in the path."
msgstr ""

#: ../../reference/ImagePath.rst:36
msgid ""
"**distance** is measured as `Manhattan distance`_ and defaults to two "
"pixels."
msgstr "**distance** is measured as `Manhattan distance`_ and defaults to two pixels."

#: ../../reference/ImagePath.rst:43
msgid "Gets the bounding box of the path."
msgstr "Gets the bounding box of the path."

#: ../../reference/ImagePath.rst:45
msgid "``(x0, y0, x1, y1)``"
msgstr "``(x0, y0, x1, y1)``"

#: ../../reference/ImagePath.rst:49
msgid "Maps the path through a function."
msgstr "Maps the path through a function."

#: ../../reference/ImagePath.rst:53
msgid "Converts the path to a Python list [(x, y), …]."
msgstr "Converts the path to a Python list [(x, y), …]."

#: ../../reference/ImagePath.rst:55
msgid ""
"By default, this function returns a list of 2-tuples [(x, y), ...].  If "
"this argument is ``True``, it returns a flat list [x, y, ...] instead."
msgstr "By default, this function returns a list of 2-tuples [(x, y), ...].  If this argument is ``True``, it returns a flat list [x, y, ...] instead."

#: ../../reference/ImagePath.rst:58
msgid "A list of coordinates. See **flat**."
msgstr "A list of coordinates. See **flat**."

#: ../../reference/ImagePath.rst:62
msgid ""
"Transforms the path in place, using an affine transform. The matrix is a "
"6-tuple (a, b, c, d, e, f), and each point is mapped as follows:"
msgstr "Transforms the path in place, using an affine transform. The matrix is a 6-tuple (a, b, c, d, e, f), and each point is mapped as follows:"

#: ../../reference/ImageQt.rst:5
msgid ":py:mod:`ImageQt` Module"
msgstr ":py:mod:`ImageQt` Module"

#: ../../reference/ImageQt.rst:7
msgid ""
"The :py:mod:`ImageQt` module contains support for creating PyQt5 or "
"PySide2 QImage objects from PIL images."
msgstr "The :py:mod:`ImageQt` module contains support for creating PyQt5 or PySide2 QImage objects from PIL images."

#: ../../reference/ImageQt.rst:14
msgid ""
"Creates an :py:class:`~PIL.ImageQt.ImageQt` object from a PIL "
":py:class:`~PIL.Image.Image` object. This class is a subclass of "
"QtGui.QImage, which means that you can pass the resulting objects "
"directly to PyQt5/PySide2 API functions and methods."
msgstr ""

#: ../../reference/ImageQt.rst:19
msgid ""
"This operation is currently supported for mode 1, L, P, RGB, and RGBA "
"images. To handle other modes, you need to convert the image first."
msgstr "This operation is currently supported for mode 1, L, P, RGB, and RGBA images. To handle other modes, you need to convert the image first."

#: ../../reference/ImageSequence.rst:5
msgid ":py:mod:`ImageSequence` Module"
msgstr ":py:mod:`ImageSequence` Module"

#: ../../reference/ImageSequence.rst:7
msgid ""
"The :py:mod:`ImageSequence` module contains a wrapper class that lets you"
" iterate over the frames of an image sequence."
msgstr "The :py:mod:`ImageSequence` module contains a wrapper class that lets you iterate over the frames of an image sequence."

#: ../../reference/ImageSequence.rst:11
msgid "Extracting frames from an animation"
msgstr "Extracting frames from an animation"

#: ../../reference/ImageSequence.rst:25
msgid "The :py:class:`~PIL.ImageSequence.Iterator` class"
msgstr "The :py:class:`~PIL.ImageSequence.Iterator` class"

#: PIL.ImageSequence.Iterator:1 of
msgid ""
"This class implements an iterator object that can be used to loop over an"
" image sequence."
msgstr "This class implements an iterator object that can be used to loop over an image sequence."

#: PIL.ImageSequence.Iterator:4 of
msgid ""
"You can use the ``[]`` operator to access elements by index. This "
"operator will raise an :py:exc:`IndexError` if you try to access a "
"nonexistent frame."
msgstr ""

#: ../../reference/ImageStat.rst:5
msgid ":py:mod:`ImageStat` Module"
msgstr ":py:mod:`ImageStat` Module"

#: ../../reference/ImageStat.rst:7
msgid ""
"The :py:mod:`ImageStat` module calculates global statistics for an image,"
" or for a region of an image."
msgstr "The :py:mod:`ImageStat` module calculates global statistics for an image, or for a region of an image."

#: ../../reference/ImageStat.rst:12
msgid ""
"Calculate statistics for the given image. If a mask is included, only the"
" regions covered by that mask are included in the statistics. You can "
"also pass in a previously calculated histogram."
msgstr ""

#: ../../reference/ImageStat.rst:16
msgid "A PIL image, or a precalculated histogram."
msgstr "A PIL image, or a precalculated histogram."

#: ../../reference/ImageStat.rst:21
msgid "Min/max values for each band in the image."
msgstr "Min/max values for each band in the image."

#: ../../reference/ImageStat.rst:25
msgid ""
"This relies on the :py:meth:`~PIL.Image.histogram` method, and simply "
"returns the low and high bins used. This is correct for images with 8 "
"bits per channel, but fails for other modes such as ``I`` or ``F``. "
"Instead, use :py:meth:`~PIL.Image.getextrema` to return per-band extrema "
"for the image. This is more correct and efficient because, for non-8-bit "
"modes, the histogram method uses :py:meth:`~PIL.Image.getextrema` to "
"determine the bins used."
msgstr ""

#: ../../reference/ImageStat.rst:35
msgid "Total number of pixels for each band in the image."
msgstr "Total number of pixels for each band in the image."

#: ../../reference/ImageStat.rst:39
msgid "Sum of all pixels for each band in the image."
msgstr "Sum of all pixels for each band in the image."

#: ../../reference/ImageStat.rst:43
msgid "Squared sum of all pixels for each band in the image."
msgstr "Squared sum of all pixels for each band in the image."

#: ../../reference/ImageStat.rst:47
msgid "Average (arithmetic mean) pixel level for each band in the image."
msgstr "Average (arithmetic mean) pixel level for each band in the image."

#: ../../reference/ImageStat.rst:51
msgid "Median pixel level for each band in the image."
msgstr "Median pixel level for each band in the image."

#: ../../reference/ImageStat.rst:55
msgid "RMS (root-mean-square) for each band in the image."
msgstr "RMS (root-mean-square) for each band in the image."

#: ../../reference/ImageStat.rst:59
msgid "Variance for each band in the image."
msgstr "Variance for each band in the image."

#: ../../reference/ImageStat.rst:63
msgid "Standard deviation for each band in the image."
msgstr "Standard deviation for each band in the image."

#: ../../reference/ImageTk.rst:5
msgid ":py:mod:`ImageTk` Module"
msgstr ":py:mod:`ImageTk` Module"

#: ../../reference/ImageTk.rst:7
msgid ""
"The :py:mod:`ImageTk` module contains support to create and modify "
"Tkinter BitmapImage and PhotoImage objects from PIL images."
msgstr "The :py:mod:`ImageTk` module contains support to create and modify Tkinter BitmapImage and PhotoImage objects from PIL images."

#: ../../reference/ImageTk.rst:10
msgid "For examples, see the demo programs in the Scripts directory."
msgstr "For examples, see the demo programs in the Scripts directory."

#: PIL.ImageTk.BitmapImage:1 of
msgid ""
"A Tkinter-compatible bitmap image.  This can be used everywhere Tkinter "
"expects an image object."
msgstr "A Tkinter-compatible bitmap image.  This can be used everywhere Tkinter expects an image object."

#: PIL.ImageTk.BitmapImage:4 of
msgid ""
"The given image must have mode \"1\".  Pixels having value 0 are treated "
"as transparent.  Options, if any, are passed on to Tkinter.  The most "
"commonly used option is **foreground**, which is used to specify the "
"color for the non-transparent parts.  See the Tkinter documentation for "
"information on how to specify colours."
msgstr ""

#: PIL.ImageTk.BitmapImage:10 of
msgid "A PIL image."
msgstr "A PIL image."

#: PIL.ImageTk.BitmapImage.height:1 PIL.ImageTk.PhotoImage.height:1 of
msgid "Get the height of the image."
msgstr "Get the height of the image."

#: PIL.ImageTk.BitmapImage.height:3 PIL.ImageTk.PhotoImage.height:3 of
msgid "The height, in pixels."
msgstr "The height, in pixels."

#: PIL.ImageTk.BitmapImage.width:1 PIL.ImageTk.PhotoImage.width:1 of
msgid "Get the width of the image."
msgstr "Get the width of the image."

#: PIL.ImageTk.BitmapImage.width:3 PIL.ImageTk.PhotoImage.width:3 of
msgid "The width, in pixels."
msgstr "The width, in pixels."

#: PIL.ImageTk.PhotoImage:1 of
msgid ""
"A Tkinter-compatible photo image.  This can be used everywhere Tkinter "
"expects an image object.  If the image is an RGBA image, pixels having "
"alpha 0 are treated as transparent."
msgstr ""

#: PIL.ImageTk.PhotoImage:5 of
msgid ""
"The constructor takes either a PIL image, or a mode and a size. "
"Alternatively, you can use the **file** or **data** options to initialize"
" the photo image object."
msgstr ""

#: PIL.ImageTk.PhotoImage:9 of
msgid ""
"Either a PIL image, or a mode string.  If a mode string is used, a size "
"must also be given."
msgstr "Either a PIL image, or a mode string.  If a mode string is used, a size must also be given."

#: PIL.ImageTk.PhotoImage:11 PIL.ImageWin.Dib:15 of
msgid ""
"If the first argument is a mode string, this defines the size of the "
"image."
msgstr "If the first argument is a mode string, this defines the size of the image."

#: PIL.ImageTk.PhotoImage:13 of
msgid "A filename to load the image from (using ``Image.open(file)``)."
msgstr "A filename to load the image from (using ``Image.open(file)``)."

#: PIL.ImageTk.PhotoImage:15 of
msgid "An 8-bit string containing image data (as loaded from an image file)."
msgstr "An 8-bit string containing image data (as loaded from an image file)."

#: PIL.ImageTk.PhotoImage.paste:1 of
msgid ""
"Paste a PIL image into the photo image.  Note that this can be very slow "
"if the photo image is displayed."
msgstr "Paste a PIL image into the photo image.  Note that this can be very slow if the photo image is displayed."

#: PIL.ImageTk.PhotoImage.paste:4 of
msgid ""
"A PIL image. The size must match the target region.  If the mode does not"
" match, the image is converted to the mode of the bitmap image."
msgstr "A PIL image. The size must match the target region.  If the mode does not match, the image is converted to the mode of the bitmap image."

#: PIL.ImageTk.PhotoImage.paste:7 of
msgid ""
"A 4-tuple defining the left, upper, right, and lower pixel coordinate. "
"See :ref:`coordinate-system`. If None is given instead of a tuple, all of"
" the image is assumed."
msgstr ""

#: ../../reference/ImageWin.rst:5
msgid ":py:mod:`ImageWin` Module (Windows-only)"
msgstr ":py:mod:`ImageWin` Module (Windows-only)"

#: ../../reference/ImageWin.rst:7
msgid ""
"The :py:mod:`ImageWin` module contains support to create and display "
"images on Windows."
msgstr "The :py:mod:`ImageWin` module contains support to create and display images on Windows."

#: ../../reference/ImageWin.rst:10
msgid ""
"ImageWin can be used with PythonWin and other user interface toolkits "
"that provide access to Windows device contexts or window handles. For "
"example, Tkinter makes the window handle available via the winfo_id "
"method:"
msgstr ""

#: PIL.ImageWin.Dib:1 of
msgid ""
"A Windows bitmap with the given mode and size.  The mode can be one of "
"\"1\", \"L\", \"P\", or \"RGB\"."
msgstr "A Windows bitmap with the given mode and size.  The mode can be one of \"1\", \"L\", \"P\", or \"RGB\"."

#: PIL.ImageWin.Dib:4 of
msgid ""
"If the display requires a palette, this constructor creates a suitable "
"palette and associates it with the image. For an \"L\" image, 128 "
"greylevels are allocated. For an \"RGB\" image, a 6x6x6 colour cube is "
"used, together with 20 greylevels."
msgstr ""

#: PIL.ImageWin.Dib:9 of
msgid ""
"To make sure that palettes work properly under Windows, you must call the"
" **palette** method upon certain events from Windows."
msgstr "To make sure that palettes work properly under Windows, you must call the **palette** method upon certain events from Windows."

#: PIL.ImageWin.Dib:12 of
msgid ""
"Either a PIL image, or a mode string. If a mode string is used, a size "
"must also be given.  The mode can be one of \"1\", \"L\", \"P\", or "
"\"RGB\"."
msgstr ""

#: PIL.ImageWin.Dib.draw:1 of
msgid ""
"Same as expose, but allows you to specify where to draw the image, and "
"what part of it to draw."
msgstr "Same as expose, but allows you to specify where to draw the image, and what part of it to draw."

#: PIL.ImageWin.Dib.draw:4 of
msgid ""
"The destination and source areas are given as 4-tuple rectangles. If the "
"source is omitted, the entire image is copied. If the source and the "
"destination have different sizes, the image is resized as necessary."
msgstr ""

#: PIL.ImageWin.Dib.expose:1 of
msgid "Copy the bitmap contents to a device context."
msgstr "Copy the bitmap contents to a device context."

#: PIL.ImageWin.Dib.expose:3 of
msgid ""
"Device context (HDC), cast to a Python integer, or an HDC or HWND "
"instance.  In PythonWin, you can use the :py:meth:`CDC.GetHandleAttrib` "
"to get a suitable handle."
msgstr ""

#: PIL.ImageWin.Dib.frombytes:1 of
msgid "Load display memory contents from byte data."
msgstr "Load display memory contents from byte data."

#: PIL.ImageWin.Dib.frombytes:3 of
msgid ""
"A buffer containing display data (usually data returned from "
"<b>tobytes</b>)"
msgstr "A buffer containing display data (usually data returned from <b>tobytes</b>)"

#: PIL.ImageWin.Dib.paste:1 of
msgid "Paste a PIL image into the bitmap image."
msgstr "Paste a PIL image into the bitmap image."

#: PIL.ImageWin.Dib.paste:3 of
msgid ""
"A PIL image.  The size must match the target region. If the mode does not"
" match, the image is converted to the mode of the bitmap image."
msgstr "A PIL image.  The size must match the target region. If the mode does not match, the image is converted to the mode of the bitmap image."

#: PIL.ImageWin.Dib.paste:6 of
msgid ""
"A 4-tuple defining the left, upper, right, and lower pixel coordinate.  "
"See :ref:`coordinate-system`. If None is given instead of a tuple, all of"
" the image is assumed."
msgstr ""

#: PIL.ImageWin.Dib.query_palette:1 of
msgid ""
"Installs the palette associated with the image in the given device "
"context."
msgstr "Installs the palette associated with the image in the given device context."

#: PIL.ImageWin.Dib.query_palette:4 of
msgid ""
"This method should be called upon **QUERYNEWPALETTE** and "
"**PALETTECHANGED** events from Windows. If this method returns a non-zero"
" value, one or more display palette entries were changed, and the image "
"should be redrawn."
msgstr ""

#: PIL.ImageWin.Dib.query_palette:9 of
msgid ""
"Device context (HDC), cast to a Python integer, or an HDC or HWND "
"instance."
msgstr "Device context (HDC), cast to a Python integer, or an HDC or HWND instance."

#: PIL.ImageWin.Dib.query_palette:11 of
msgid ""
"A true value if one or more entries were changed (this indicates that the"
" image should be redrawn)."
msgstr "A true value if one or more entries were changed (this indicates that the image should be redrawn)."

#: PIL.ImageWin.Dib.tobytes:1 of
msgid "Copy display memory contents to bytes object."
msgstr "Copy display memory contents to bytes object."

#: PIL.ImageWin.Dib.tobytes:3 of
msgid "A bytes object containing display data."
msgstr "A bytes object containing display data."

#: PIL.ImageWin.HDC:1 of
msgid ""
"Wraps an HDC integer. The resulting object can be passed to the "
":py:meth:`~PIL.ImageWin.Dib.draw` and :py:meth:`~PIL.ImageWin.Dib.expose`"
" methods."
msgstr ""

#: PIL.ImageWin.HWND:1 of
msgid ""
"Wraps an HWND integer. The resulting object can be passed to the "
":py:meth:`~PIL.ImageWin.Dib.draw` and :py:meth:`~PIL.ImageWin.Dib.expose`"
" methods, instead of a DC."
msgstr ""

#: ../../reference/PSDraw.rst:5
msgid ":py:mod:`PSDraw` Module"
msgstr ":py:mod:`PSDraw` Module"

#: ../../reference/PSDraw.rst:7
msgid ""
"The :py:mod:`PSDraw` module provides simple print support for Postscript "
"printers. You can print text, graphics and images through this module."
msgstr "The :py:mod:`PSDraw` module provides simple print support for Postscript printers. You can print text, graphics and images through this module."

#: PIL.PSDraw.PSDraw:1 of
msgid ""
"Sets up printing to the given file. If **fp** is omitted, "
":py:attr:`sys.stdout` is assumed."
msgstr "Sets up printing to the given file. If **fp** is omitted, :py:attr:`sys.stdout` is assumed."

#: PIL.PSDraw.PSDraw.begin_document:1 of
msgid "Set up printing of a document. (Write Postscript DSC header.)"
msgstr "Set up printing of a document. (Write Postscript DSC header.)"

#: PIL.PSDraw.PSDraw.end_document:1 of
msgid "Ends printing. (Write Postscript DSC footer.)"
msgstr "Ends printing. (Write Postscript DSC footer.)"

#: PIL.PSDraw.PSDraw.image:1 of
msgid "Draw a PIL image, centered in the given box."
msgstr "Draw a PIL image, centered in the given box."

#: PIL.PSDraw.PSDraw.line:1 of
msgid ""
"Draws a line between the two points. Coordinates are given in Postscript "
"point coordinates (72 points per inch, (0, 0) is the lower left corner of"
" the page)."
msgstr ""

#: PIL.PSDraw.PSDraw.rectangle:3 of
#, python-format
msgid ""
"A 4-tuple of integers whose order and function is currently undocumented."
"  Hint: the tuple is passed into this format string:  .. code-block:: "
"python      %d %d M %d %d 0 Vr"
msgstr ""

#: PIL.PSDraw.PSDraw.rectangle:3 of
msgid "A 4-tuple of integers whose order and function is currently undocumented."
msgstr "A 4-tuple of integers whose order and function is currently undocumented."

#: PIL.PSDraw.PSDraw.rectangle:6 of
msgid "Hint: the tuple is passed into this format string:"
msgstr "Hint: the tuple is passed into this format string:"

#: PIL.PSDraw.PSDraw.setfont:1 of
msgid "Selects which font to use."
msgstr "Selects which font to use."

#: PIL.PSDraw.PSDraw.setfont:3 of
msgid "A Postscript font name"
msgstr "A Postscript font name"

#: PIL.PSDraw.PSDraw.setfont:4 of
msgid "Size in points."
msgstr "Size in points."

#: PIL.PSDraw.PSDraw.text:1 of
msgid ""
"Draws text at the given position. You must use "
":py:meth:`~PIL.PSDraw.PSDraw.setfont` before calling this method."
msgstr "Draws text at the given position. You must use :py:meth:`~PIL.PSDraw.PSDraw.setfont` before calling this method."

#: ../../reference/PixelAccess.rst:4 ../../reference/PixelAccess.rst:41
msgid ":py:class:`PixelAccess` Class"
msgstr ":py:class:`PixelAccess` Class"

#: ../../reference/PixelAccess.rst:6
msgid ""
"The PixelAccess class provides read and write access to "
":py:class:`PIL.Image` data at a pixel level."
msgstr "The PixelAccess class provides read and write access to :py:class:`PIL.Image` data at a pixel level."

#: ../../reference/PixelAccess.rst:9 ../../reference/PyAccess.rst:9
msgid ""
"Accessing individual pixels is fairly slow. If you are looping over all "
"of the pixels in an image, there is likely a faster way using other parts"
" of the Pillow API."
msgstr ""

#: ../../reference/PixelAccess.rst:14 ../../reference/PyAccess.rst:16
msgid ""
"The following script loads an image, accesses one pixel from it, then "
"changes it."
msgstr "The following script loads an image, accesses one pixel from it, then changes it."

#: ../../reference/PixelAccess.rst:26 ../../reference/PyAccess.rst:27
msgid "Results in the following::"
msgstr "Results in the following::"

#: ../../reference/PixelAccess.rst:31 ../../reference/PyAccess.rst:32
msgid "Access using negative indexes is also possible."
msgstr "Access using negative indexes is also possible."

#: ../../reference/PixelAccess.rst:47 PIL.PyAccess.PyAccess.putpixel:1 of
msgid ""
"Modifies the pixel at x,y. The color is given as a single numerical value"
" for single band images, and a tuple for multi-band images"
msgstr "Modifies the pixel at x,y. The color is given as a single numerical value for single band images, and a tuple for multi-band images"

#: ../../reference/PixelAccess.rst:51 ../../reference/PixelAccess.rst:60
#: ../../reference/PixelAccess.rst:71 ../../reference/PixelAccess.rst:80
msgid "The pixel coordinate, given as (x, y)."
msgstr "The pixel coordinate, given as (x, y)."

#: ../../reference/PixelAccess.rst:52 ../../reference/PixelAccess.rst:72
msgid "The pixel value according to its mode. e.g. tuple (r, g, b) for RGB mode)"
msgstr "The pixel value according to its mode. e.g. tuple (r, g, b) for RGB mode)"

#: ../../reference/PixelAccess.rst:61 ../../reference/PixelAccess.rst:81
msgid "Returns the pixel at x,y. The pixel is returned as a single"
msgstr "Returns the pixel at x,y. The pixel is returned as a single"

#: ../../reference/PixelAccess.rst:57 ../../reference/PixelAccess.rst:77
msgid "value for single band images or a tuple for multiple band images"
msgstr "value for single band images or a tuple for multiple band images"

#: ../../reference/PixelAccess.rst
msgid "param xy"
msgstr "param xy"

#: ../../reference/PixelAccess.rst
msgid "returns"
msgstr "returns"

#: ../../reference/PixelAccess.rst:61 ../../reference/PixelAccess.rst:81
#: PIL.PyAccess.PyAccess.getpixel:7 of
msgid ""
"a pixel value for single band images, a tuple of pixel values for "
"multiband images."
msgstr "a pixel value for single band images, a tuple of pixel values for multiband images."

#: ../../reference/PixelAccess.rst:66
msgid ""
"Modifies the pixel at x,y. The color is given as a single numerical value"
" for single band images, and a tuple for multi-band images. In addition "
"to this, RGB and RGBA tuples are accepted for P images."
msgstr ""

#: ../../reference/PyAccess.rst:5
msgid ":py:mod:`PyAccess` Module"
msgstr ":py:mod:`PyAccess` Module"

#: ../../reference/PyAccess.rst:7
msgid ""
"The :py:mod:`PyAccess` module provides a CFFI/Python implementation of "
"the :ref:`PixelAccess`. This implementation is far faster on PyPy than "
"the PixelAccess version."
msgstr ""

#: ../../reference/PyAccess.rst:42
msgid ":py:class:`PyAccess` Class"
msgstr ":py:class:`PyAccess` Class"

#: PIL.PyAccess.PyAccess.getpixel:1 of
msgid ""
"Returns the pixel at x,y. The pixel is returned as a single value for "
"single band images or a tuple for multiple band images"
msgstr "Returns the pixel at x,y. The pixel is returned as a single value for single band images or a tuple for multiple band images"

#: ../../reference/TiffTags.rst:5
msgid ":py:mod:`TiffTags` Module"
msgstr ":py:mod:`TiffTags` Module"

#: ../../reference/TiffTags.rst:7
msgid ""
"The :py:mod:`TiffTags` module exposes many of the standard TIFF metadata "
"tag numbers, names, and type information."
msgstr "The :py:mod:`TiffTags` module exposes many of the standard TIFF metadata tag numbers, names, and type information."

#: ../../reference/TiffTags.rst:12
msgid "Integer tag number"
msgstr "Integer tag number"

#: ../../reference/TiffTags.rst:13
msgid ""
"Taginfo namedtuple, From the ``TAGS_V2`` info if possible, otherwise just"
" populating the value and name from ``TAGS``. If the tag is not "
"recognized, \"unknown\" is returned for the name"
msgstr ""

#: ../../reference/TiffTags.rst:23
msgid "Integer Tag Number"
msgstr "Integer Tag Number"

#: ../../reference/TiffTags.rst:24
msgid "Tag Name"
msgstr "Tag Name"

#: ../../reference/TiffTags.rst:25
msgid "Integer type from :py:attr:`PIL.TiffTags.TYPES`"
msgstr "Integer type from :py:attr:`PIL.TiffTags.TYPES`"

#: ../../reference/TiffTags.rst:26
msgid "Array length: 0 == variable, 1 == single value, n = fixed"
msgstr "Array length: 0 == variable, 1 == single value, n = fixed"

#: ../../reference/TiffTags.rst:27
msgid "Dict of name:integer value options for an enumeration"
msgstr "Dict of name:integer value options for an enumeration"

#: ../../reference/TiffTags.rst:31
msgid "The enumerated value name"
msgstr "The enumerated value name"

#: ../../reference/TiffTags.rst:32
msgid "The integer corresponding to the name."
msgstr "The integer corresponding to the name."

#: ../../reference/TiffTags.rst:38
msgid ""
"The ``TAGS_V2`` dictionary maps 16-bit integer tag numbers to "
":py:class:`PIL.TagTypes.TagInfo` tuples for metadata fields defined in "
"the TIFF spec."
msgstr ""

#: ../../reference/TiffTags.rst:46
msgid ""
"The ``TAGS`` dictionary maps 16-bit integer TIFF tag number to "
"descriptive string names.  For instance:"
msgstr "The ``TAGS`` dictionary maps 16-bit integer TIFF tag number to descriptive string names.  For instance:"

#: ../../reference/TiffTags.rst:53
msgid ""
"This dictionary contains a superset of the tags in TAGS_V2, common EXIF "
"tags, and other well known metadata tags."
msgstr "This dictionary contains a superset of the tags in TAGS_V2, common EXIF tags, and other well known metadata tags."

#: ../../reference/TiffTags.rst:58
msgid ""
"The ``TYPES`` dictionary maps the TIFF type short integer to a human "
"readable type name."
msgstr "The ``TYPES`` dictionary maps the TIFF type short integer to a human readable type name."

#: ../../reference/block_allocator.rst:2
msgid "Block Allocator"
msgstr "Block Allocator"

#: ../../reference/block_allocator.rst:5
msgid "Previous Design"
msgstr "Previous Design"

#: ../../reference/block_allocator.rst:7
msgid ""
"Historically there have been two image allocators in Pillow: "
"``ImagingAllocateBlock`` and ``ImagingAllocateArray``. The first works "
"for images smaller than 16MB of data and allocates one large chunk of "
"memory of ``im->linesize * im->ysize`` bytes. The second works for large "
"images and makes one allocation for each scan line of size "
"``im->linesize`` bytes.  This makes for a very sharp transition between "
"one allocation and potentially thousands of small allocations, leading to"
" unpredictable performance penalties around the transition."
msgstr ""

#: ../../reference/block_allocator.rst:17
msgid "New Design"
msgstr "New Design"

#: ../../reference/block_allocator.rst:19
msgid ""
"``ImagingAllocateArray`` now allocates space for images as a chain of "
"blocks with a maximum size of 16MB. If there is a memory allocation "
"error, it falls back to allocating a 4KB block, or at least one scan "
"line. This is now the default for all internal allocations."
msgstr ""

#: ../../reference/block_allocator.rst:24
msgid ""
"``ImagingAllocateBlock`` is now only used for those cases when we are "
"specifically requesting a single segment of memory for sharing with other"
" code."
msgstr ""

#: ../../reference/block_allocator.rst:29
msgid "Memory Pools"
msgstr "Memory Pools"

#: ../../reference/block_allocator.rst:31
msgid ""
"There is now a memory pool to contain a supply of recently freed blocks, "
"which can then be reused without going back to the OS for a fresh "
"allocation. This caching of free blocks is currently disabled by default,"
" but can be enabled and tweaked using three environment variables:"
msgstr ""

#: ../../reference/block_allocator.rst:37
msgid ""
"``PILLOW_ALIGNMENT``, in bytes. Specifies the alignment of memory "
"allocations. Valid values are powers of 2 between 1 and 128, inclusive. "
"Defaults to 1."
msgstr ""

#: ../../reference/block_allocator.rst:41
msgid ""
"``PILLOW_BLOCK_SIZE``, in bytes, K, or M.  Specifies the maximum block "
"size for ``ImagingAllocateArray``. Valid values are integers, with an "
"optional `k` or `m` suffix. Defaults to 16M."
msgstr ""

#: ../../reference/block_allocator.rst:45
msgid ""
"``PILLOW_BLOCKS_MAX`` Specifies the number of freed blocks to retain to "
"fill future memory requests. Any freed blocks over this threshold will be"
" returned to the OS immediately. Defaults to 0."
msgstr ""

#: ../../reference/index.rst:2
msgid "Reference"
msgstr "参考"

#: ../../reference/internal_design.rst:2
msgid "Internal Reference Docs"
msgstr "内部参考文件"

#: ../../reference/limits.rst:2
msgid "Limits"
msgstr "范围"

#: ../../reference/limits.rst:4
msgid ""
"This page is documentation to the various fundamental size limits in the "
"Pillow implementation."
msgstr "本页面的文档在枕头落实各项基本的大小限制。"

#: ../../reference/limits.rst:8
msgid "Internal Limits"
msgstr "内部限制"

#: ../../reference/limits.rst:10
msgid ""
"Image sizes cannot be negative. These are checked both in ``Storage.c`` "
"and ``Image.py``"
msgstr "图片大小不能为负。这些在``Storage.c``和``Image.py``检查两"

#: ../../reference/limits.rst:13
msgid "Image sizes may be 0. (Although not in 3.4)"
msgstr "图像尺寸可以是0（尽管未在3.4）"

#: ../../reference/limits.rst:15
msgid ""
"Maximum pixel dimensions are limited to INT32, or 2^31 by the sizes in "
"the image header."
msgstr "最大像素尺寸由在图像标题中的大小限制为INT32，或2 ^ 31。"

#: ../../reference/limits.rst:18
msgid "Individual allocations are limited to 2GB in ``Storage.c``"
msgstr "各个分配被限制为2GB的``Storage.c``"

#: ../../reference/limits.rst:20
msgid ""
"The 2GB allocation puts an upper limit to the xsize of the image of "
"either 2^31 for 'L' or 2^29 for 'RGB'"
msgstr "2GB的分配卖出期权的上限或者2 ^ 31的为“L”或2 ^ 29“RGB”的图像的XSIZE"

#: ../../reference/limits.rst:23
msgid ""
"Individual memory mapped segments are limited to 2GB in map.c based on "
"the overflow checks. This requires that any memory mapped image is "
"smaller than 2GB, as calculated by ``y*stride`` (so 2Gpx for 'L' images, "
"and .5Gpx for 'RGB'"
msgstr ""

#: ../../reference/limits.rst:28
msgid ""
"Any call to internal python size functions for buffers or strings are "
"currently returned as int32, not py_ssize_t. This limits the maximum "
"buffer to 2GB for operations like frombytes and frombuffer."
msgstr ""

#: ../../reference/limits.rst:32
msgid ""
"This also limits the size of buffers converted using a decoder. "
"(decode.c:127)"
msgstr "这还限制缓冲区的大小使用解码器转换。 （decode.c：127）"

#: ../../reference/limits.rst:36
msgid "Format Size Limits"
msgstr "格式大小限制"

#: ../../reference/limits.rst:38
msgid "ICO: Max size is 256x256"
msgstr "ICO: Max size is 256x256"

#: ../../reference/limits.rst:40
msgid ""
"Webp: 16383x16383 (underlying library size limit: "
"https://developers.google.com/speed/webp/docs/api)"
msgstr "Webp: 16383x16383 (underlying library size limit: https://developers.google.com/speed/webp/docs/api)"

#: ../../reference/open_files.rst:4
msgid "File Handling in Pillow"
msgstr "File Handling in Pillow"

#: ../../reference/open_files.rst:6
msgid ""
"When opening a file as an image, Pillow requires a filename, "
"``pathlib.Path`` object, or a file-like object. Pillow uses the filename "
"or ``Path`` to open a file, so for the rest of this article, they will "
"all be treated as a file-like object."
msgstr ""

#: ../../reference/open_files.rst:11
msgid "The following are all equivalent::"
msgstr "以下都是等价::"

#: ../../reference/open_files.rst:31
msgid ""
"If a filename or a path-like object is passed to Pillow, then the "
"resulting file object opened by Pillow may also be closed by Pillow after"
" the ``Image.Image.load()`` method is called, provided the associated "
"image does not have multiple frames."
msgstr ""

#: ../../reference/open_files.rst:36
msgid ""
"Pillow cannot in general close and reopen a file, so any access to that "
"file needs to be prior to the close."
msgstr "Pillow cannot in general close and reopen a file, so any access to that file needs to be prior to the close."

#: ../../reference/open_files.rst:40
msgid "Image Lifecycle"
msgstr "Image Lifecycle"

#: ../../reference/open_files.rst:42
msgid ""
"``Image.open()`` Filenames and ``Path`` objects are opened as a file. "
"Metadata is read from the open file. The file is left open for further "
"usage."
msgstr ""

#: ../../reference/open_files.rst:45
msgid ""
"``Image.Image.load()`` When the pixel data from the image is required, "
"``load()`` is called. The current frame is read into memory. The image "
"can now be used independently of the underlying image file."
msgstr ""

#: ../../reference/open_files.rst:50
msgid ""
"If a filename or a ``Path`` object was passed to ``Image.open()``, then "
"the file object was opened by Pillow and is considered to be used "
"exclusively by Pillow. So if the image is a single-frame image, the file "
"will be closed in this method after the frame is read. If the image is a "
"multi-frame image, (e.g. multipage TIFF and animated GIF) the image file "
"is left open so that ``Image.Image.seek()`` can load the appropriate "
"frame."
msgstr ""

#: ../../reference/open_files.rst:57
msgid ""
"``Image.Image.close()`` Closes the file and destroys the core image "
"object. This is used in the Pillow context manager support. e.g.::"
msgstr "``Image.Image.close()`` Closes the file and destroys the core image object. This is used in the Pillow context manager support. e.g.::"

#: ../../reference/open_files.rst:64
msgid ""
"The lifecycle of a single-frame image is relatively simple. The file must"
" remain open until the ``load()`` or ``close()`` function is called or "
"the context manager exits."
msgstr ""

#: ../../reference/open_files.rst:68
msgid ""
"Multi-frame images are more complicated. The ``load()`` method is not a "
"terminal method, so it should not close the underlying file. In general, "
"Pillow does not know if there are going to be any requests for additional"
" data until the caller has explicitly closed the image."
msgstr ""

#: ../../reference/open_files.rst:75
msgid "Complications"
msgstr "Complications"

#: ../../reference/open_files.rst:77
msgid ""
"``TiffImagePlugin`` has some code to pass the underlying file descriptor "
"into libtiff (if working on an actual file). Since libtiff closes the "
"file descriptor internally, it is duplicated prior to passing it into "
"libtiff."
msgstr ""

#: ../../reference/open_files.rst:81
msgid ""
"After a file has been closed, operations that require file access will "
"fail::"
msgstr "After a file has been closed, operations that require file access will fail::"

#: ../../reference/open_files.rst:93
msgid "Proposed File Handling"
msgstr "Proposed File Handling"

#: ../../reference/open_files.rst:95
msgid ""
"``Image.Image.load()`` should close the image file, unless there are "
"multiple frames."
msgstr "``Image.Image.load()`` should close the image file, unless there are multiple frames."

#: ../../reference/open_files.rst:98
msgid "``Image.Image.seek()`` should never close the image file."
msgstr "``Image.Image.seek()`` should never close the image file."

#: ../../reference/open_files.rst:100
msgid ""
"Users of the library should use a context manager or call "
"``Image.Image.close()`` on any image opened with a filename or ``Path`` "
"object to ensure that the underlying file is closed."
msgstr ""

#: ../../reference/plugins.rst:2
msgid "Plugin reference"
msgstr "Plugin reference"

#: ../../reference/plugins.rst:5
msgid ":mod:`BmpImagePlugin` Module"
msgstr ":mod:`BmpImagePlugin` Module"

#: PIL.BmpImagePlugin.BmpImageFile:1 PIL.EpsImagePlugin.EpsImageFile:1
#: PIL.FliImagePlugin.FliImageFile:1 PIL.FpxImagePlugin.FpxImageFile:1
#: PIL.GbrImagePlugin.GbrImageFile:1 PIL.GifImagePlugin.GifImageFile:1
#: PIL.IcnsImagePlugin.IcnsImageFile:1 PIL.IcoImagePlugin.IcoImageFile:1
#: PIL.ImImagePlugin.ImImageFile:1 PIL.ImtImagePlugin.ImtImageFile:1
#: PIL.IptcImagePlugin.IptcImageFile:1 PIL.Jpeg2KImagePlugin.Jpeg2KImageFile:1
#: PIL.JpegImagePlugin.JpegImageFile:1 PIL.McIdasImagePlugin.McIdasImageFile:1
#: PIL.MpegImagePlugin.MpegImageFile:1 PIL.MspImagePlugin.MspImageFile:1
#: PIL.PcdImagePlugin.PcdImageFile:1 PIL.PcxImagePlugin.PcxImageFile:1
#: PIL.PixarImagePlugin.PixarImageFile:1 PIL.PngImagePlugin.PngImageFile:1
#: PIL.PpmImagePlugin.PpmImageFile:1 PIL.PsdImagePlugin.PsdImageFile:1
#: PIL.SgiImagePlugin.SgiImageFile:1 PIL.SpiderImagePlugin.SpiderImageFile:1
#: PIL.SunImagePlugin.SunImageFile:1 PIL.TgaImagePlugin.TgaImageFile:1
#: PIL.TiffImagePlugin.TiffImageFile:1 PIL.WebPImagePlugin.WebPImageFile:1
#: PIL.XVThumbImagePlugin.XVThumbImageFile:1 PIL.XbmImagePlugin.XbmImageFile:1
#: PIL.XpmImagePlugin.XpmImageFile:1 of
msgid "基类：:class:`PIL.ImageFile.ImageFile`"
msgstr "基类：:class:`PIL.ImageFile.ImageFile`"

#: PIL.BmpImagePlugin.BmpImageFile:1 of
msgid "Image plugin for the Windows Bitmap format (BMP)"
msgstr "Image plugin for the Windows Bitmap format (BMP)"

#: PIL.BmpImagePlugin.DibImageFile:1 PIL.CurImagePlugin.CurImageFile:1 of
msgid "基类：:class:`PIL.BmpImagePlugin.BmpImageFile`"
msgstr "基类：:class:`PIL.BmpImagePlugin.BmpImageFile`"

#: ../../reference/plugins.rst:13
msgid ":mod:`BufrStubImagePlugin` Module"
msgstr ":mod:`BufrStubImagePlugin` Module"

#: PIL.BufrStubImagePlugin.BufrStubImageFile:1
#: PIL.FitsStubImagePlugin.FITSStubImageFile:1
#: PIL.GribStubImagePlugin.GribStubImageFile:1
#: PIL.Hdf5StubImagePlugin.HDF5StubImageFile:1
#: PIL.WmfImagePlugin.WmfStubImageFile:1 of
msgid "基类：:class:`PIL.ImageFile.StubImageFile`"
msgstr "基类：:class:`PIL.ImageFile.StubImageFile`"

#: PIL.BufrStubImagePlugin.register_handler:1 of
msgid "Install application-specific BUFR image handler."
msgstr "Install application-specific BUFR image handler."

#: PIL.BufrStubImagePlugin.register_handler:3
#: PIL.FitsStubImagePlugin.register_handler:3
#: PIL.GribStubImagePlugin.register_handler:3
#: PIL.Hdf5StubImagePlugin.register_handler:3
#: PIL.WmfImagePlugin.register_handler:3 of
msgid "Handler object."
msgstr "Handler object."

#: ../../reference/plugins.rst:21
msgid ":mod:`CurImagePlugin` Module"
msgstr ":mod:`CurImagePlugin` Module"

#: ../../reference/plugins.rst:29
msgid ":mod:`DcxImagePlugin` Module"
msgstr ":mod:`DcxImagePlugin` Module"

#: PIL.DcxImagePlugin.DcxImageFile:1 of
msgid "基类：:class:`PIL.PcxImagePlugin.PcxImageFile`"
msgstr "基类：:class:`PIL.PcxImagePlugin.PcxImageFile`"

#: ../../reference/plugins.rst:37
msgid ":mod:`EpsImagePlugin` Module"
msgstr ":mod:`EpsImagePlugin` Module"

#: PIL.EpsImagePlugin.EpsImageFile:1 of
msgid "EPS File Parser for the Python Imaging Library"
msgstr "EPS File Parser for the Python Imaging Library"

#: PIL.EpsImagePlugin.EpsImageFile.load:1
#: PIL.FpxImagePlugin.FpxImageFile.load:1
#: PIL.GbrImagePlugin.GbrImageFile.load:1
#: PIL.IcnsImagePlugin.IcnsImageFile.load:1
#: PIL.IcoImagePlugin.IcoImageFile.load:1
#: PIL.IptcImagePlugin.IptcImageFile.load:1
#: PIL.Jpeg2KImagePlugin.Jpeg2KImageFile.load:1
#: PIL.TiffImagePlugin.TiffImageFile.load:1
#: PIL.WebPImagePlugin.WebPImageFile.load:1
#: PIL.WmfImagePlugin.WmfStubImageFile.load:1 of
msgid "Load image data based on tile list"
msgstr "Load image data based on tile list"

#: PIL.EpsImagePlugin.Ghostscript:1 of
msgid "Render an image using Ghostscript"
msgstr "Render an image using Ghostscript"

#: PIL.EpsImagePlugin.PSFile:1 of
msgid "Wrapper for bytesio object that treats either CR or LF as end of line."
msgstr "Wrapper for bytesio object that treats either CR or LF as end of line."

#: ../../reference/plugins.rst:45
msgid ":mod:`FitsStubImagePlugin` Module"
msgstr ":mod:`FitsStubImagePlugin` Module"

#: PIL.FitsStubImagePlugin.register_handler:1 of
msgid "Install application-specific FITS image handler."
msgstr "Install application-specific FITS image handler."

#: ../../reference/plugins.rst:53
msgid ":mod:`FliImagePlugin` Module"
msgstr ":mod:`FliImagePlugin` Module"

#: ../../reference/plugins.rst:61
msgid ":mod:`FpxImagePlugin` Module"
msgstr ":mod:`FpxImagePlugin` Module"

#: ../../reference/plugins.rst:69
msgid ":mod:`GbrImagePlugin` Module"
msgstr ":mod:`GbrImagePlugin` Module"

#: ../../reference/plugins.rst:77
msgid ":mod:`GifImagePlugin` Module"
msgstr ":mod:`GifImagePlugin` Module"

#: PIL.GifImagePlugin.getdata:1 of
msgid "Legacy Method"
msgstr "Legacy Method"

#: PIL.GifImagePlugin.getdata:3 of
msgid ""
"Return a list of strings representing this image. The first string is a "
"local image header, the rest contains encoded image data."
msgstr "Return a list of strings representing this image. The first string is a local image header, the rest contains encoded image data."

#: PIL.GifImagePlugin.getdata:7 PIL.GifImagePlugin.getheader:5 of
msgid "Image object"
msgstr "Image object"

#: PIL.GifImagePlugin.getdata:8 of
msgid "Tuple of (x, y) pixels. Defaults to (0,0)"
msgstr "Tuple of (x, y) pixels. Defaults to (0,0)"

#: PIL.GifImagePlugin.getdata:9 of
msgid "E.g. duration or other encoder info parameters"
msgstr "E.g. duration or other encoder info parameters"

#: PIL.GifImagePlugin.getdata:10 of
msgid "List of Bytes containing gif encoded frame data"
msgstr "List of Bytes containing gif encoded frame data"

#: PIL.GifImagePlugin.getheader:1 of
msgid "Legacy Method to get Gif data from image."
msgstr "Legacy Method to get Gif data from image."

#: PIL.GifImagePlugin.getheader:3 of
msgid "Warning:: May modify image data."
msgstr "Warning:: May modify image data."

#: PIL.GifImagePlugin.getheader:6 of
msgid "bytes object containing the source palette, or ...."
msgstr "bytes object containing the source palette, or ...."

#: PIL.GifImagePlugin.getheader:7 of
msgid "encoderinfo"
msgstr "encoderinfo"

#: PIL.GifImagePlugin.getheader:8 of
msgid "tuple of(list of header items, optimized palette)"
msgstr "tuple of(list of header items, optimized palette)"

#: ../../reference/plugins.rst:85
msgid ":mod:`GribStubImagePlugin` Module"
msgstr ":mod:`GribStubImagePlugin` Module"

#: PIL.GribStubImagePlugin.register_handler:1 of
msgid "Install application-specific GRIB image handler."
msgstr "Install application-specific GRIB image handler."

#: ../../reference/plugins.rst:93
msgid ":mod:`Hdf5StubImagePlugin` Module"
msgstr ":mod:`Hdf5StubImagePlugin` Module"

#: PIL.Hdf5StubImagePlugin.register_handler:1 of
msgid "Install application-specific HDF5 image handler."
msgstr "Install application-specific HDF5 image handler."

#: ../../reference/plugins.rst:101
msgid ":mod:`IcnsImagePlugin` Module"
msgstr ":mod:`IcnsImagePlugin` Module"

#: PIL.IcnsImagePlugin.IcnsFile.dataforsize:1 of
msgid ""
"Get an icon resource as {channel: array}.  Note that the arrays are "
"bottom-up like windows bitmaps and will likely need to be flipped or "
"transposed in some way."
msgstr ""

#: PIL.IcnsImagePlugin.IcnsImageFile:1 of
msgid ""
"PIL image support for Mac OS .icns files. Chooses the best resolution, "
"but will possibly load a different size image if you mutate the size "
"attribute before calling 'load'."
msgstr ""

#: PIL.IcnsImagePlugin.IcnsImageFile:6 of
msgid ""
"The info dictionary has a key 'sizes' that is a list of sizes that the "
"icns file has."
msgstr "The info dictionary has a key 'sizes' that is a list of sizes that the icns file has."

#: PIL.IcnsImagePlugin.read_32:1 of
msgid ""
"Read a 32bit RGB icon resource.  Seems to be either uncompressed or an "
"RLE packbits-like scheme."
msgstr "Read a 32bit RGB icon resource.  Seems to be either uncompressed or an RLE packbits-like scheme."

#: ../../reference/plugins.rst:109
msgid ":mod:`IcoImagePlugin` Module"
msgstr ":mod:`IcoImagePlugin` Module"

#: PIL.IcoImagePlugin.IcoFile.frame:1 of
msgid "Get an image from frame idx"
msgstr "Get an image from frame idx"

#: PIL.IcoImagePlugin.IcoFile.getimage:1 of
msgid "Get an image from the icon"
msgstr "Get an image from the icon"

#: PIL.IcoImagePlugin.IcoFile.sizes:1 of
msgid "Get a list of all available icon sizes and color depths."
msgstr "Get a list of all available icon sizes and color depths."

#: PIL.IcoImagePlugin.IcoImageFile:1 of
msgid "PIL read-only image support for Microsoft Windows .ico files."
msgstr "PIL read-only image support for Microsoft Windows .ico files."

#: PIL.IcoImagePlugin.IcoImageFile:3 of
msgid ""
"By default the largest resolution image in the file will be loaded. This "
"can be changed by altering the 'size' attribute before calling 'load'."
msgstr "By default the largest resolution image in the file will be loaded. This can be changed by altering the 'size' attribute before calling 'load'."

#: PIL.IcoImagePlugin.IcoImageFile:6 of
msgid ""
"The info dictionary has a key 'sizes' that is a list of the sizes "
"available in the icon file."
msgstr "The info dictionary has a key 'sizes' that is a list of the sizes available in the icon file."

#: PIL.IcoImagePlugin.IcoImageFile:9 of
msgid "Handles classic, XP and Vista icon formats."
msgstr "Handles classic, XP and Vista icon formats."

#: PIL.IcoImagePlugin.IcoImageFile:11 of
msgid ""
"When saving, PNG compression is used. Support for this was only added in "
"Windows Vista."
msgstr "When saving, PNG compression is used. Support for this was only added in Windows Vista."

#: PIL.IcoImagePlugin.IcoImageFile:14 of
msgid ""
"This plugin is a refactored version of Win32IconImagePlugin by Bryan "
"Davis <casadebender@gmail.com>. "
"https://code.google.com/archive/p/casadebender/wikis/Win32IconImagePlugin.wiki"
msgstr ""

#: ../../reference/plugins.rst:117
msgid ":mod:`ImImagePlugin` Module"
msgstr ":mod:`ImImagePlugin` Module"

#: ../../reference/plugins.rst:125
msgid ":mod:`ImtImagePlugin` Module"
msgstr ":mod:`ImtImagePlugin` Module"

#: ../../reference/plugins.rst:133
msgid ":mod:`IptcImagePlugin` Module"
msgstr ":mod:`IptcImagePlugin` Module"

#: PIL.IptcImagePlugin.getiptcinfo:1 of
msgid "Get IPTC information from TIFF, JPEG, or IPTC file."
msgstr "Get IPTC information from TIFF, JPEG, or IPTC file."

#: PIL.IptcImagePlugin.getiptcinfo:3 of
msgid "An image containing IPTC data."
msgstr "An image containing IPTC data."

#: PIL.IptcImagePlugin.getiptcinfo:4 of
msgid ""
"A dictionary containing IPTC information, or None if no IPTC information "
"block was found."
msgstr "A dictionary containing IPTC information, or None if no IPTC information block was found."

#: ../../reference/plugins.rst:141
msgid ":mod:`JpegImagePlugin` Module"
msgstr ":mod:`JpegImagePlugin` Module"

#: PIL.JpegImagePlugin.JpegImageFile.load_read:1 of
msgid ""
"internal: read more image data For premature EOF and "
"LOAD_TRUNCATED_IMAGES adds EOI marker so libjpeg can finish decoding"
msgstr "internal: read more image data For premature EOF and LOAD_TRUNCATED_IMAGES adds EOI marker so libjpeg can finish decoding"

#: ../../reference/plugins.rst:149
msgid ":mod:`Jpeg2KImagePlugin` Module"
msgstr ":mod:`Jpeg2KImagePlugin` Module"

#: ../../reference/plugins.rst:157
msgid ":mod:`McIdasImagePlugin` Module"
msgstr ":mod:`McIdasImagePlugin` Module"

#: ../../reference/plugins.rst:165
msgid ":mod:`MicImagePlugin` Module"
msgstr ":mod:`MicImagePlugin` Module"

#: PIL.MicImagePlugin.MicImageFile:1 of
msgid "基类：:class:`PIL.TiffImagePlugin.TiffImageFile`"
msgstr "基类：:class:`PIL.TiffImagePlugin.TiffImageFile`"

#: PIL.MicImagePlugin.MicImageFile.seek:1
#: PIL.TiffImagePlugin.TiffImageFile.seek:1 of
msgid "Select a given frame as current image"
msgstr "Select a given frame as current image"

#: PIL.MicImagePlugin.MicImageFile.tell:1
#: PIL.TiffImagePlugin.TiffImageFile.tell:1 of
msgid "Return the current frame number"
msgstr "Return the current frame number"

#: ../../reference/plugins.rst:173
msgid ":mod:`MpegImagePlugin` Module"
msgstr ":mod:`MpegImagePlugin` Module"

#: ../../reference/plugins.rst:181
msgid ":mod:`MspImagePlugin` Module"
msgstr ":mod:`MspImagePlugin` Module"

#: PIL.MspImagePlugin.MspDecoder:1 PIL.SgiImagePlugin.SGI16Decoder:1 of
msgid "基类：:class:`PIL.ImageFile.PyDecoder`"
msgstr "基类：:class:`PIL.ImageFile.PyDecoder`"

#: ../../reference/plugins.rst:189
msgid ":mod:`PalmImagePlugin` Module"
msgstr ":mod:`PalmImagePlugin` Module"

#: ../../reference/plugins.rst:197
msgid ":mod:`PcdImagePlugin` Module"
msgstr ":mod:`PcdImagePlugin` Module"

#: ../../reference/plugins.rst:205
msgid ":mod:`PcxImagePlugin` Module"
msgstr ":mod:`PcxImagePlugin` Module"

#: ../../reference/plugins.rst:213
msgid ":mod:`PdfImagePlugin` Module"
msgstr ":mod:`PdfImagePlugin` Module"

#: ../../reference/plugins.rst:221
msgid ":mod:`PixarImagePlugin` Module"
msgstr ":mod:`PixarImagePlugin` Module"

#: ../../reference/plugins.rst:229
msgid ":mod:`PngImagePlugin` Module"
msgstr ":mod:`PngImagePlugin` Module"

#: PIL.PngImagePlugin.PngImageFile.load_end:1 of
msgid "internal: finished reading image data"
msgstr "internal: finished reading image data"

#: PIL.PngImagePlugin.PngImageFile.load_prepare:1 of
msgid "internal: prepare to read PNG file"
msgstr "internal: prepare to read PNG file"

#: PIL.PngImagePlugin.PngImageFile.load_read:1 of
msgid "internal: read more image data"
msgstr "internal: read more image data"

#: PIL.PngImagePlugin.PngImageFile.verify:1 of
msgid "Verify PNG file"
msgstr "Verify PNG file"

#: PIL.PngImagePlugin.getchunks:1 of
msgid "Return a list of PNG chunks representing this image."
msgstr "Return a list of PNG chunks representing this image."

#: PIL.PngImagePlugin.is_cid:1 of
msgid "Matches zero or more characters at the beginning of the string."
msgstr "Matches zero or more characters at the beginning of the string."

#: PIL.PngImagePlugin.putchunk:1 of
msgid "Write a PNG chunk (including CRC field)"
msgstr "Write a PNG chunk (including CRC field)"

#: PIL.PngImagePlugin.ChunkStream.call:1 of
msgid "Call the appropriate chunk handler"
msgstr "Call the appropriate chunk handler"

#: PIL.PngImagePlugin.ChunkStream.crc:1 of
msgid "Read and verify checksum"
msgstr "Read and verify checksum"

#: PIL.PngImagePlugin.ChunkStream.crc_skip:1 of
msgid "Read checksum.  Used if the C module is not present"
msgstr "Read checksum.  Used if the C module is not present"

#: PIL.PngImagePlugin.ChunkStream.read:1 of
msgid "Fetch a new chunk. Returns header information."
msgstr "Fetch a new chunk. Returns header information."

#: PIL.PngImagePlugin.PngStream:1 of
msgid "基类：:class:`PIL.PngImagePlugin.ChunkStream`"
msgstr "基类：:class:`PIL.PngImagePlugin.ChunkStream`"

#: ../../reference/plugins.rst:249
msgid ":mod:`PpmImagePlugin` Module"
msgstr ":mod:`PpmImagePlugin` Module"

#: ../../reference/plugins.rst:257
msgid ":mod:`PsdImagePlugin` Module"
msgstr ":mod:`PsdImagePlugin` Module"

#: ../../reference/plugins.rst:265
msgid ":mod:`SgiImagePlugin` Module"
msgstr ":mod:`SgiImagePlugin` Module"

#: ../../reference/plugins.rst:273
msgid ":mod:`SpiderImagePlugin` Module"
msgstr ":mod:`SpiderImagePlugin` Module"

#: PIL.SpiderImagePlugin.loadImageSeries:1 of
msgid "create a list of :py:class:`~PIL.Image.Image` objects for use in a montage"
msgstr "create a list of :py:class:`~PIL.Image.Image` objects for use in a montage"

#: ../../reference/plugins.rst:281
msgid ":mod:`SunImagePlugin` Module"
msgstr ":mod:`SunImagePlugin` Module"

#: ../../reference/plugins.rst:289
msgid ":mod:`TgaImagePlugin` Module"
msgstr ":mod:`TgaImagePlugin` Module"

#: ../../reference/plugins.rst:297
msgid ":mod:`TiffImagePlugin` Module"
msgstr ":mod:`TiffImagePlugin` Module"

#: PIL.TiffImagePlugin.IFDRational:1 of
msgid "基类：:class:`numbers.Rational`"
msgstr "基类：:class:`numbers.Rational`"

#: PIL.TiffImagePlugin.IFDRational:1 of
msgid ""
"Implements a rational class where 0/0 is a legal value to match the in "
"the wild use of exif rationals."
msgstr "Implements a rational class where 0/0 is a legal value to match the in the wild use of exif rationals."

#: PIL.TiffImagePlugin.IFDRational:4 of
msgid ""
"e.g., DigitalZoomRatio - 0.00/0.00  indicates that no digital zoom was "
"used"
msgstr "e.g., DigitalZoomRatio - 0.00/0.00  indicates that no digital zoom was used"

#: PIL.TiffImagePlugin.IFDRational.limit_rational:1 of
msgid "Integer, the maximum denominator value"
msgstr "Integer, the maximum denominator value"

#: PIL.TiffImagePlugin.IFDRational.limit_rational:2 of
msgid "Tuple of (numerator, denominator)"
msgstr "Tuple of (numerator, denominator)"

#: PIL.TiffImagePlugin.ImageFileDirectory_v1:1 of
msgid "基类：:class:`PIL.TiffImagePlugin.ImageFileDirectory_v2`"
msgstr "基类：:class:`PIL.TiffImagePlugin.ImageFileDirectory_v2`"

#: PIL.TiffImagePlugin.ImageFileDirectory_v1:1 of
msgid "This class represents the **legacy** interface to a TIFF tag directory."
msgstr "This class represents the **legacy** interface to a TIFF tag directory."

#: PIL.TiffImagePlugin.ImageFileDirectory_v1:3
#: PIL.TiffImagePlugin.ImageFileDirectory_v2:4 of
msgid "Exposes a dictionary interface of the tags in the directory::"
msgstr "Exposes a dictionary interface of the tags in the directory::"

#: PIL.TiffImagePlugin.ImageFileDirectory_v1:11 of
msgid ""
"Also contains a dictionary of tag types as read from the tiff image file,"
" `~PIL.TiffImagePlugin.ImageFileDirectory_v1.tagtype`."
msgstr "Also contains a dictionary of tag types as read from the tiff image file, `~PIL.TiffImagePlugin.ImageFileDirectory_v1.tagtype`."

#: PIL.TiffImagePlugin.ImageFileDirectory_v1:14 of
msgid "Values are returned as a tuple."
msgstr "Values are returned as a tuple."

#: PIL.TiffImagePlugin.ImageFileDirectory_v1.from_v2:1 of
msgid ""
"Returns an :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1` "
"instance with the same data as is contained in the original "
":py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v2` instance."
msgstr ""

#: PIL.TiffImagePlugin.ImageFileDirectory_v1.from_v2:7 of
msgid ":py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1`"
msgstr ":py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1`"

#: PIL.TiffImagePlugin.ImageFileDirectory_v1.to_v2:1 of
msgid ""
"Returns an :py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v2` "
"instance with the same data as is contained in the original "
":py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v1` instance."
msgstr ""

#: PIL.TiffImagePlugin.ImageFileDirectory_v1.to_v2:7 of
msgid ":py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v2`"
msgstr ":py:class:`~PIL.TiffImagePlugin.ImageFileDirectory_v2`"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:1 of
msgid "基类：:class:`collections.abc.MutableMapping`"
msgstr "基类：:class:`collections.abc.MutableMapping`"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:1 of
msgid ""
"This class represents a TIFF tag directory.  To speed things up, we don't"
" decode tags unless they're asked for."
msgstr "This class represents a TIFF tag directory.  To speed things up, we don't decode tags unless they're asked for."

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:12 of
msgid ""
"Individual values are returned as the strings or numbers, sequences are "
"returned as tuples of the values."
msgstr "Individual values are returned as the strings or numbers, sequences are returned as tuples of the values."

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:15 of
msgid ""
"The tiff metadata type of each item is stored in a dictionary of tag "
"types in `~PIL.TiffImagePlugin.ImageFileDirectory_v2.tagtype`. The types "
"are read from a tiff file, guessed from the type added, or added "
"manually."
msgstr ""

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:21 of
msgid "Data Structures:"
msgstr "Data Structures:"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:23 of
msgid "self.tagtype = {}"
msgstr "self.tagtype = {}"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:25 of
msgid "Key: numerical tiff tag number"
msgstr "Key: numerical tiff tag number"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:27 of
msgid "Value: integer corresponding to the data type from"
msgstr "Value: integer corresponding to the data type from"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2:27 of
msgid "~PIL.TiffTags.TYPES`"
msgstr "~PIL.TiffTags.TYPES`"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2.named:1 of
msgid "dict of name|key: value"
msgstr "dict of name|key: value"

#: PIL.TiffImagePlugin.ImageFileDirectory_v2.named:3 of
msgid "Returns the complete tag dictionary, with named tags where possible."
msgstr "Returns the complete tag dictionary, with named tags where possible."

#: ../../reference/plugins.rst:305
msgid ":mod:`WebPImagePlugin` Module"
msgstr ":mod:`WebPImagePlugin` Module"

#: ../../reference/plugins.rst:313
msgid ":mod:`WmfImagePlugin` Module"
msgstr ":mod:`WmfImagePlugin` Module"

#: PIL.WmfImagePlugin.register_handler:1 of
msgid "Install application-specific WMF image handler."
msgstr "Install application-specific WMF image handler."

#: ../../reference/plugins.rst:321
msgid ":mod:`XVThumbImagePlugin` Module"
msgstr ":mod:`XVThumbImagePlugin` Module"

#: ../../reference/plugins.rst:329
msgid ":mod:`XbmImagePlugin` Module"
msgstr ":mod:`XbmImagePlugin` Module"

#: ../../reference/plugins.rst:337
msgid ":mod:`XpmImagePlugin` Module"
msgstr ":mod:`XpmImagePlugin` Module"

